
Smart_home_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00000f32  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080018e  0080018e  000010f4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00001848  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001451  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d5  00000000  00000000  00002dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc4  00000000  00000000  000033ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00004174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030f  00000000  00000000  000043bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f0  00000000  00000000  000046cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3a       	cpi	r26, 0xA1	; 161
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 06 	call	0xcce	; 0xcce <main>
  8a:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_read>:
 *  Author: M
 */ 
#include "EEPROM.h"

uint8_t EEPROM_read(uint16_t add){
	while(GETBIT(EECR,EEWE)==1){};
  92:	2c b3       	in	r18, 0x1c	; 28
  94:	21 fd       	sbrc	r18, 1
  96:	fd cf       	rjmp	.-6      	; 0x92 <EEPROM_read>
		EEAR =add;
  98:	9f bb       	out	0x1f, r25	; 31
  9a:	8e bb       	out	0x1e, r24	; 30
		SETBIT(EECR,EERE);
  9c:	e0 9a       	sbi	0x1c, 0	; 28
		return EEDR;
  9e:	8d b3       	in	r24, 0x1d	; 29
}
  a0:	08 95       	ret

000000a2 <EEPROM_write>:
void EEPROM_write(uint16_t add , uint8_t data){ 
	while(GETBIT(EECR,EEWE)==1){};
  a2:	2c b3       	in	r18, 0x1c	; 28
  a4:	21 fd       	sbrc	r18, 1
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <EEPROM_write>
    EEAR =add;
  a8:	9f bb       	out	0x1f, r25	; 31
  aa:	8e bb       	out	0x1e, r24	; 30
	EEDR =data;
  ac:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR,EEMWE);
  ae:	e2 9a       	sbi	0x1c, 2	; 28
	SETBIT(EECR,EEWE);
  b0:	e1 9a       	sbi	0x1c, 1	; 28
}
  b2:	08 95       	ret

000000b4 <keypad_init>:
	'1','2','3','N',
	'N','0','N','N'
};
void keypad_init(){

	CLRBIT(DDRD,2);
  b4:	8a 98       	cbi	0x11, 2	; 17
	CLRBIT(DDRD,3);
  b6:	8b 98       	cbi	0x11, 3	; 17
	CLRBIT(DDRD,4);
  b8:	8c 98       	cbi	0x11, 4	; 17
	CLRBIT(DDRD,5);
  ba:	8d 98       	cbi	0x11, 5	; 17
	PORTD |= 0b00111100; // internal pull up in case of protues
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	8c 63       	ori	r24, 0x3C	; 60
  c0:	82 bb       	out	0x12, r24	; 18
	SETBIT(DDRB,0);
  c2:	b8 9a       	sbi	0x17, 0	; 23
	SETBIT(DDRB,1);
  c4:	b9 9a       	sbi	0x17, 1	; 23
	SETBIT(DDRB,2);
  c6:	ba 9a       	sbi	0x17, 2	; 23
	SETBIT(DDRB,3);
  c8:	bb 9a       	sbi	0x17, 3	; 23
}
  ca:	08 95       	ret

000000cc <keypad_read>:
int8_t keypad_read(){

	for(uint8_t i = 0; i < 4 ; i++){
  cc:	e0 e0       	ldi	r30, 0x00	; 0
		PORTB = PORTB & 0b11110000;
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 7f       	andi	r24, 0xF0	; 240
  d2:	88 bb       	out	0x18, r24	; 24
		if (i == 0) PORTB |= 0b00001110;
  d4:	ee 23       	and	r30, r30
  d6:	21 f4       	brne	.+8      	; 0xe0 <keypad_read+0x14>
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	8e 60       	ori	r24, 0x0E	; 14
  dc:	88 bb       	out	0x18, r24	; 24
  de:	0c c0       	rjmp	.+24     	; 0xf8 <keypad_read+0x2c>
		if (i == 1) PORTB |= 0b00001101;
  e0:	e1 30       	cpi	r30, 0x01	; 1
  e2:	21 f4       	brne	.+8      	; 0xec <keypad_read+0x20>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 60       	ori	r24, 0x0D	; 13
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	0b c0       	rjmp	.+22     	; 0x102 <keypad_read+0x36>
		if (i == 2) PORTB |= 0b00001011;
  ec:	e2 30       	cpi	r30, 0x02	; 2
  ee:	21 f4       	brne	.+8      	; 0xf8 <keypad_read+0x2c>
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	8b 60       	ori	r24, 0x0B	; 11
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	05 c0       	rjmp	.+10     	; 0x102 <keypad_read+0x36>
		if (i == 3) PORTB |= 0b00000111;
  f8:	e3 30       	cpi	r30, 0x03	; 3
  fa:	19 f4       	brne	.+6      	; 0x102 <keypad_read+0x36>
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	88 bb       	out	0x18, r24	; 24
		
		if (GETBIT(PIND,2) == 0) return keypad_matrix[0+4*i];
 102:	80 b3       	in	r24, 0x10	; 16
 104:	82 fd       	sbrc	r24, 2
 106:	09 c0       	rjmp	.+18     	; 0x11a <keypad_read+0x4e>
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 5a       	subi	r30, 0xA0	; 160
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	80 81       	ld	r24, Z
 118:	08 95       	ret
		if (GETBIT(PIND,3) == 0) return keypad_matrix[1+4*i];
 11a:	80 b3       	in	r24, 0x10	; 16
 11c:	83 fd       	sbrc	r24, 3
 11e:	09 c0       	rjmp	.+18     	; 0x132 <keypad_read+0x66>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	81 81       	ldd	r24, Z+1	; 0x01
 130:	08 95       	ret
		if (GETBIT(PIND,4) == 0) return keypad_matrix[2+4*i];
 132:	80 b3       	in	r24, 0x10	; 16
 134:	84 fd       	sbrc	r24, 4
 136:	09 c0       	rjmp	.+18     	; 0x14a <keypad_read+0x7e>
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	e0 5a       	subi	r30, 0xA0	; 160
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	08 95       	ret
		if (GETBIT(PIND,5) == 0) return keypad_matrix[3+4*i];
 14a:	80 b3       	in	r24, 0x10	; 16
 14c:	85 fd       	sbrc	r24, 5
 14e:	09 c0       	rjmp	.+18     	; 0x162 <keypad_read+0x96>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 5a       	subi	r30, 0xA0	; 160
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	83 81       	ldd	r24, Z+3	; 0x03
 160:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e9       	ldi	r24, 0x9F	; 159
 164:	9f e0       	ldi	r25, 0x0F	; 15
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <keypad_read+0x9a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <keypad_read+0xa0>
 16c:	00 00       	nop
	SETBIT(DDRB,2);
	SETBIT(DDRB,3);
}
int8_t keypad_read(){

	for(uint8_t i = 0; i < 4 ; i++){
 16e:	ef 5f       	subi	r30, 0xFF	; 255
 170:	e4 30       	cpi	r30, 0x04	; 4
 172:	09 f0       	breq	.+2      	; 0x176 <keypad_read+0xaa>
 174:	ac cf       	rjmp	.-168    	; 0xce <keypad_read+0x2>
		if (GETBIT(PIND,4) == 0) return keypad_matrix[2+4*i];
		if (GETBIT(PIND,5) == 0) return keypad_matrix[3+4*i];
		_delay_ms(1);
		
	}
	return -1;
 176:	8f ef       	ldi	r24, 0xFF	; 255

 178:	08 95       	ret

0000017a <LCD_write_command>:
_delay_ms(20);
LCD_write_command(0x0C);
}

void LCD_write_command(uint8_t cmd){
	 RS(0);
 17a:	d9 98       	cbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(cmd,4));
 17c:	98 2f       	mov	r25, r24
 17e:	92 95       	swap	r25
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	90 ff       	sbrs	r25, 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <LCD_write_command+0x10>
 186:	db 9a       	sbi	0x1b, 3	; 27
 188:	01 c0       	rjmp	.+2      	; 0x18c <LCD_write_command+0x12>
 18a:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,5));
 18c:	98 2f       	mov	r25, r24
 18e:	92 95       	swap	r25
 190:	96 95       	lsr	r25
 192:	97 70       	andi	r25, 0x07	; 7
 194:	90 ff       	sbrs	r25, 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <LCD_write_command+0x22>
 198:	dc 9a       	sbi	0x1b, 4	; 27
 19a:	01 c0       	rjmp	.+2      	; 0x19e <LCD_write_command+0x24>
 19c:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,6));
 19e:	98 2f       	mov	r25, r24
 1a0:	92 95       	swap	r25
 1a2:	96 95       	lsr	r25
 1a4:	96 95       	lsr	r25
 1a6:	93 70       	andi	r25, 0x03	; 3
 1a8:	90 ff       	sbrs	r25, 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <LCD_write_command+0x36>
 1ac:	dd 9a       	sbi	0x1b, 5	; 27
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <LCD_write_command+0x38>
 1b0:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,7));
 1b2:	88 23       	and	r24, r24
 1b4:	14 f4       	brge	.+4      	; 0x1ba <LCD_write_command+0x40>
 1b6:	de 9a       	sbi	0x1b, 6	; 27
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <LCD_write_command+0x42>
 1ba:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 1bc:	da 9a       	sbi	0x1b, 2	; 27
 1be:	ef e9       	ldi	r30, 0x9F	; 159
 1c0:	ff e0       	ldi	r31, 0x0F	; 15
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_write_command+0x48>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_write_command+0x4e>
 1c8:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 1ca:	da 98       	cbi	0x1b, 2	; 27
 1cc:	ef e9       	ldi	r30, 0x9F	; 159
 1ce:	ff e0       	ldi	r31, 0x0F	; 15
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_write_command+0x56>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <LCD_write_command+0x5c>
 1d6:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(cmd,0));
 1d8:	80 ff       	sbrs	r24, 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <LCD_write_command+0x66>
 1dc:	db 9a       	sbi	0x1b, 3	; 27
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <LCD_write_command+0x68>
 1e0:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,1));
 1e2:	98 2f       	mov	r25, r24
 1e4:	96 95       	lsr	r25
 1e6:	90 ff       	sbrs	r25, 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <LCD_write_command+0x74>
 1ea:	dc 9a       	sbi	0x1b, 4	; 27
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <LCD_write_command+0x76>
 1ee:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,2));
 1f0:	98 2f       	mov	r25, r24
 1f2:	96 95       	lsr	r25
 1f4:	96 95       	lsr	r25
 1f6:	90 ff       	sbrs	r25, 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <LCD_write_command+0x84>
 1fa:	dd 9a       	sbi	0x1b, 5	; 27
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <LCD_write_command+0x86>
 1fe:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,3));
 200:	86 95       	lsr	r24
 202:	86 95       	lsr	r24
 204:	86 95       	lsr	r24
 206:	80 ff       	sbrs	r24, 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <LCD_write_command+0x94>
 20a:	de 9a       	sbi	0x1b, 6	; 27
 20c:	01 c0       	rjmp	.+2      	; 0x210 <LCD_write_command+0x96>
 20e:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 210:	da 9a       	sbi	0x1b, 2	; 27
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_write_command+0x9c>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_write_command+0xa2>
 21c:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 21e:	da 98       	cbi	0x1b, 2	; 27
 220:	ef e9       	ldi	r30, 0x9F	; 159
 222:	ff e0       	ldi	r31, 0x0F	; 15
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_write_command+0xaa>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_write_command+0xb0>
 22a:	00 00       	nop
	 _delay_ms(1);
}
 22c:	08 95       	ret

0000022e <LCD_init>:
 *  Author: M
 */ 
#include "LCD.h"

void LCD_init (){
INIT_LCD();
 22e:	8a b3       	in	r24, 0x1a	; 26
 230:	8e 67       	ori	r24, 0x7E	; 126
 232:	8a bb       	out	0x1a, r24	; 26
LCD_write_command(0X3);
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 23a:	8f e7       	ldi	r24, 0x7F	; 127
 23c:	9e e3       	ldi	r25, 0x3E	; 62
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_init+0x10>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_init+0x16>
 244:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 24c:	af e7       	ldi	r26, 0x7F	; 127
 24e:	be e3       	ldi	r27, 0x3E	; 62
 250:	11 97       	sbiw	r26, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_init+0x22>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_init+0x28>
 256:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 25e:	8f e7       	ldi	r24, 0x7F	; 127
 260:	9e e3       	ldi	r25, 0x3E	; 62
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_init+0x34>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_init+0x3a>
 268:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X2);
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X28);
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X08);
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X01);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X06);
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	99 ef       	ldi	r25, 0xF9	; 249
 28c:	a0 e0       	ldi	r26, 0x00	; 0
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	a0 40       	sbci	r26, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <LCD_init+0x60>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_init+0x6a>
 298:	00 00       	nop
_delay_ms(20);
LCD_write_command(0x0C);
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
}
 2a0:	08 95       	ret

000002a2 <LCD_write_char>:
	 EN(0);
	 _delay_ms(1);
}

void LCD_write_char(uint8_t data){
	 RS(1);
 2a2:	d9 9a       	sbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(data,4));
 2a4:	98 2f       	mov	r25, r24
 2a6:	92 95       	swap	r25
 2a8:	9f 70       	andi	r25, 0x0F	; 15
 2aa:	90 ff       	sbrs	r25, 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <LCD_write_char+0x10>
 2ae:	db 9a       	sbi	0x1b, 3	; 27
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <LCD_write_char+0x12>
 2b2:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,5));
 2b4:	98 2f       	mov	r25, r24
 2b6:	92 95       	swap	r25
 2b8:	96 95       	lsr	r25
 2ba:	97 70       	andi	r25, 0x07	; 7
 2bc:	90 ff       	sbrs	r25, 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <LCD_write_char+0x22>
 2c0:	dc 9a       	sbi	0x1b, 4	; 27
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <LCD_write_char+0x24>
 2c4:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,6));
 2c6:	98 2f       	mov	r25, r24
 2c8:	92 95       	swap	r25
 2ca:	96 95       	lsr	r25
 2cc:	96 95       	lsr	r25
 2ce:	93 70       	andi	r25, 0x03	; 3
 2d0:	90 ff       	sbrs	r25, 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <LCD_write_char+0x36>
 2d4:	dd 9a       	sbi	0x1b, 5	; 27
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <LCD_write_char+0x38>
 2d8:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,7));
 2da:	88 23       	and	r24, r24
 2dc:	14 f4       	brge	.+4      	; 0x2e2 <LCD_write_char+0x40>
 2de:	de 9a       	sbi	0x1b, 6	; 27
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <LCD_write_char+0x42>
 2e2:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 2e4:	da 9a       	sbi	0x1b, 2	; 27
 2e6:	ef e9       	ldi	r30, 0x9F	; 159
 2e8:	ff e0       	ldi	r31, 0x0F	; 15
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_write_char+0x48>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_write_char+0x4e>
 2f0:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 2f2:	da 98       	cbi	0x1b, 2	; 27
 2f4:	ef e9       	ldi	r30, 0x9F	; 159
 2f6:	ff e0       	ldi	r31, 0x0F	; 15
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_write_char+0x56>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_write_char+0x5c>
 2fe:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(data,0));
 300:	80 ff       	sbrs	r24, 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <LCD_write_char+0x66>
 304:	db 9a       	sbi	0x1b, 3	; 27
 306:	01 c0       	rjmp	.+2      	; 0x30a <LCD_write_char+0x68>
 308:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,1));
 30a:	98 2f       	mov	r25, r24
 30c:	96 95       	lsr	r25
 30e:	90 ff       	sbrs	r25, 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <LCD_write_char+0x74>
 312:	dc 9a       	sbi	0x1b, 4	; 27
 314:	01 c0       	rjmp	.+2      	; 0x318 <LCD_write_char+0x76>
 316:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,2));
 318:	98 2f       	mov	r25, r24
 31a:	96 95       	lsr	r25
 31c:	96 95       	lsr	r25
 31e:	90 ff       	sbrs	r25, 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <LCD_write_char+0x84>
 322:	dd 9a       	sbi	0x1b, 5	; 27
 324:	01 c0       	rjmp	.+2      	; 0x328 <LCD_write_char+0x86>
 326:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,3));
 328:	86 95       	lsr	r24
 32a:	86 95       	lsr	r24
 32c:	86 95       	lsr	r24
 32e:	80 ff       	sbrs	r24, 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <LCD_write_char+0x94>
 332:	de 9a       	sbi	0x1b, 6	; 27
 334:	01 c0       	rjmp	.+2      	; 0x338 <LCD_write_char+0x96>
 336:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 338:	da 9a       	sbi	0x1b, 2	; 27
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_write_char+0x9c>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_write_char+0xa2>
 344:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 346:	da 98       	cbi	0x1b, 2	; 27
 348:	ef e9       	ldi	r30, 0x9F	; 159
 34a:	ff e0       	ldi	r31, 0x0F	; 15
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_write_char+0xaa>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_write_char+0xb0>
 352:	00 00       	nop
	 _delay_ms(1);
}
 354:	08 95       	ret

00000356 <LCD_write_string>:
void LCD_write_string(uint8_t txt[]){
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	8c 01       	movw	r16, r24
	for (uint8_t i=0;txt[i]!='\0';i++){
 35e:	fc 01       	movw	r30, r24
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	51 f0       	breq	.+20     	; 0x37a <LCD_write_string+0x24>
 366:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_char(txt[i]);
 368:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
	 _delay_ms(1);
	 EN(0);
	 _delay_ms(1);
}
void LCD_write_string(uint8_t txt[]){
	for (uint8_t i=0;txt[i]!='\0';i++){
 36c:	cf 5f       	subi	r28, 0xFF	; 255
 36e:	f8 01       	movw	r30, r16
 370:	ec 0f       	add	r30, r28
 372:	f1 1d       	adc	r31, r1
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	b9 f7       	brne	.-18     	; 0x368 <LCD_write_string+0x12>
		LCD_write_char(txt[i]);
	}
}
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <LCD_write_num>:
void LCD_write_num(uint32_t num){
 382:	8f 92       	push	r8
 384:	9f 92       	push	r9
 386:	af 92       	push	r10
 388:	bf 92       	push	r11
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	2a 97       	sbiw	r28, 0x0a	; 10
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	dc 01       	movw	r26, r24
 3a6:	cb 01       	movw	r24, r22
uint8_t txt[10] = {0};
 3a8:	ae 01       	movw	r20, r28
 3aa:	4f 5f       	subi	r20, 0xFF	; 255
 3ac:	5f 4f       	sbci	r21, 0xFF	; 255
 3ae:	2a e0       	ldi	r18, 0x0A	; 10
 3b0:	fa 01       	movw	r30, r20
 3b2:	11 92       	st	Z+, r1
 3b4:	2a 95       	dec	r18
 3b6:	e9 f7       	brne	.-6      	; 0x3b2 <LCD_write_num+0x30>
int8_t i = 0;
if(num == 0) {
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	a1 05       	cpc	r26, r1
 3bc:	b1 05       	cpc	r27, r1
 3be:	21 f4       	brne	.+8      	; 0x3c8 <LCD_write_num+0x46>
	LCD_write_char('0');
 3c0:	80 e3       	ldi	r24, 0x30	; 48
 3c2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
	return;
 3c6:	38 c0       	rjmp	.+112    	; 0x438 <LCD_write_num+0xb6>
	}
}
void LCD_write_num(uint32_t num){
uint8_t txt[10] = {0};
int8_t i = 0;
if(num == 0) {
 3c8:	10 e0       	ldi	r17, 0x00	; 0
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
{
	txt[i] = num%10 + 48;
 3ca:	0f 2e       	mov	r0, r31
 3cc:	fa e0       	ldi	r31, 0x0A	; 10
 3ce:	8f 2e       	mov	r8, r31
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	9f 2e       	mov	r9, r31
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	af 2e       	mov	r10, r31
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	bf 2e       	mov	r11, r31
 3dc:	f0 2d       	mov	r31, r0
 3de:	e1 2e       	mov	r14, r17
 3e0:	ff 24       	eor	r15, r15
 3e2:	e7 fc       	sbrc	r14, 7
 3e4:	f0 94       	com	r15
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	2c 0f       	add	r18, r28
 3ec:	3d 1f       	adc	r19, r29
 3ee:	e2 0e       	add	r14, r18
 3f0:	f3 1e       	adc	r15, r19
 3f2:	bc 01       	movw	r22, r24
 3f4:	cd 01       	movw	r24, r26
 3f6:	a5 01       	movw	r20, r10
 3f8:	94 01       	movw	r18, r8
 3fa:	0e 94 75 07 	call	0xeea	; 0xeea <__udivmodsi4>
 3fe:	60 5d       	subi	r22, 0xD0	; 208
 400:	f7 01       	movw	r30, r14
 402:	60 83       	st	Z, r22
	num = num  / 10 ;
 404:	82 2f       	mov	r24, r18
 406:	93 2f       	mov	r25, r19
 408:	a4 2f       	mov	r26, r20
 40a:	b5 2f       	mov	r27, r21
int8_t i = 0;
if(num == 0) {
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
 40c:	1f 5f       	subi	r17, 0xFF	; 255
 40e:	00 97       	sbiw	r24, 0x00	; 0
 410:	a1 05       	cpc	r26, r1
 412:	b1 05       	cpc	r27, r1
 414:	21 f7       	brne	.-56     	; 0x3de <LCD_write_num+0x5c>
{
	txt[i] = num%10 + 48;
	num = num  / 10 ;
}
i--;
 416:	11 50       	subi	r17, 0x01	; 1
while(i >= 0){
 418:	7a f0       	brmi	.+30     	; 0x438 <LCD_write_num+0xb6>
	LCD_write_char(txt[i]);
 41a:	e1 2f       	mov	r30, r17
 41c:	ff 27       	eor	r31, r31
 41e:	e7 fd       	sbrc	r30, 7
 420:	f0 95       	com	r31
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	2c 0f       	add	r18, r28
 428:	3d 1f       	adc	r19, r29
 42a:	e2 0f       	add	r30, r18
 42c:	f3 1f       	adc	r31, r19
 42e:	80 81       	ld	r24, Z
 430:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
	i--;
 434:	11 50       	subi	r17, 0x01	; 1
 436:	88 f7       	brcc	.-30     	; 0x41a <LCD_write_num+0x98>
}
 438:	2a 96       	adiw	r28, 0x0a	; 10
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	bf 90       	pop	r11
 450:	af 90       	pop	r10
 452:	9f 90       	pop	r9
 454:	8f 90       	pop	r8
 456:	08 95       	ret

00000458 <__vector_11>:
	SETBIT(TIMSK,TOIE0);
	guest_display();
	count=5;	

}
ISR(TIMER0_OVF_vect){
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
	
	static uint8_t admin_mode = 0;
	static uint8_t guest_mode = 0;
	admin_mode++;
 466:	80 91 96 01 	lds	r24, 0x0196
 46a:	8f 5f       	subi	r24, 0xFF	; 255
 46c:	80 93 96 01 	sts	0x0196, r24
	guest_mode++;
 470:	90 91 97 01 	lds	r25, 0x0197
 474:	9f 5f       	subi	r25, 0xFF	; 255
 476:	90 93 97 01 	sts	0x0197, r25
	if (admin_mode==255 && state==0)			// 1.5sec
 47a:	8f 3f       	cpi	r24, 0xFF	; 255
 47c:	a1 f4       	brne	.+40     	; 0x4a6 <__vector_11+0x4e>
 47e:	80 91 8e 01 	lds	r24, 0x018E
 482:	88 23       	and	r24, r24
 484:	81 f4       	brne	.+32     	; 0x4a6 <__vector_11+0x4e>
	{
		
		TOGBIT(PORTC,0);
 486:	95 b3       	in	r25, 0x15	; 21
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	89 27       	eor	r24, r25
 48c:	85 bb       	out	0x15, r24	; 21
		admin_mode=0;
 48e:	10 92 96 01 	sts	0x0196, r1
		guest_mode=0;
 492:	10 92 97 01 	sts	0x0197, r1
		count=0;
 496:	10 92 93 01 	sts	0x0193, r1
		start_msg=0;
 49a:	10 92 94 01 	sts	0x0194, r1
		CLRBIT(TIMSK,TOIE0);
 49e:	89 b7       	in	r24, 0x39	; 57
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	89 bf       	out	0x39, r24	; 57
 4a4:	12 c0       	rjmp	.+36     	; 0x4ca <__vector_11+0x72>
	}
	else if (guest_mode==255 && state==1)	// 1.5sec
 4a6:	9f 3f       	cpi	r25, 0xFF	; 255
 4a8:	81 f4       	brne	.+32     	; 0x4ca <__vector_11+0x72>
 4aa:	80 91 8e 01 	lds	r24, 0x018E
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	61 f4       	brne	.+24     	; 0x4ca <__vector_11+0x72>
	{
		
		CLRBIT(PORTC,2);
 4b2:	aa 98       	cbi	0x15, 2	; 21
		admin_mode=0;
 4b4:	10 92 96 01 	sts	0x0196, r1
		guest_mode=0;
 4b8:	10 92 97 01 	sts	0x0197, r1
		count=0;
 4bc:	10 92 93 01 	sts	0x0193, r1
		start_msg=0;
 4c0:	10 92 94 01 	sts	0x0194, r1
		CLRBIT(TIMSK,TOIE0);
 4c4:	89 b7       	in	r24, 0x39	; 57
 4c6:	8e 7f       	andi	r24, 0xFE	; 254
 4c8:	89 bf       	out	0x39, r24	; 57
	}
}
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <admin_display>:
void admin_display(){
	LCD_write_command(1);
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("1>Room1");
 4de:	80 e7       	ldi	r24, 0x70	; 112
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0x88);
 4e6:	88 e8       	ldi	r24, 0x88	; 136
 4e8:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("2>Room2");
 4ec:	88 e7       	ldi	r24, 0x78	; 120
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc0);
 4f4:	80 ec       	ldi	r24, 0xC0	; 192
 4f6:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("3>Room3");
 4fa:	80 e8       	ldi	r24, 0x80	; 128
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc8);
 502:	88 ec       	ldi	r24, 0xC8	; 200
 504:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("4>More");
 508:	88 e8       	ldi	r24, 0x88	; 136
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
}
 510:	08 95       	ret

00000512 <ADMIN>:
		}
	
	}
}
void ADMIN(){
	SETBIT(PORTC,0);
 512:	a8 9a       	sbi	0x15, 0	; 21
	SETBIT(TIMSK,TOIE0);
 514:	89 b7       	in	r24, 0x39	; 57
 516:	81 60       	ori	r24, 0x01	; 1
 518:	89 bf       	out	0x39, r24	; 57
	admin_display();
 51a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>
	count=5;
 51e:	85 e0       	ldi	r24, 0x05	; 5
 520:	80 93 93 01 	sts	0x0193, r24
	
}
 524:	08 95       	ret

00000526 <admin_display2>:
	LCD_write_string("3>Room3");
	LCD_write_command(0xc8);
	LCD_write_string("4>More");
}
void admin_display2(){
	LCD_write_command(1);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("4>Room4");
 52c:	8f e8       	ldi	r24, 0x8F	; 143
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0x88);
 534:	88 e8       	ldi	r24, 0x88	; 136
 536:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("5>TV");
 53a:	87 e9       	ldi	r24, 0x97	; 151
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc0);
 542:	80 ec       	ldi	r24, 0xC0	; 192
 544:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("6>COND");
 548:	8c e9       	ldi	r24, 0x9C	; 156
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc8);
 550:	88 ec       	ldi	r24, 0xC8	; 200
 552:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("7>back");
 556:	83 ea       	ldi	r24, 0xA3	; 163
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
}
 55e:	08 95       	ret

00000560 <guest_display>:
void guest_display(){
	LCD_write_command(1);
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("1>Room1");
 566:	80 e7       	ldi	r24, 0x70	; 112
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0x88);
 56e:	88 e8       	ldi	r24, 0x88	; 136
 570:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("2>Room2");
 574:	88 e7       	ldi	r24, 0x78	; 120
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc0);
 57c:	80 ec       	ldi	r24, 0xC0	; 192
 57e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("3>Room3");
 582:	80 e8       	ldi	r24, 0x80	; 128
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc8);
 58a:	88 ec       	ldi	r24, 0xC8	; 200
 58c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("4>Room4");
 590:	8f e8       	ldi	r24, 0x8F	; 143
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 598:	08 95       	ret

0000059a <GUEST>:
	admin_display();
	count=5;
	
}
void GUEST(){
	SETBIT(PORTC,2);
 59a:	aa 9a       	sbi	0x15, 2	; 21
	SETBIT(TIMSK,TOIE0);
 59c:	89 b7       	in	r24, 0x39	; 57
 59e:	81 60       	ori	r24, 0x01	; 1
 5a0:	89 bf       	out	0x39, r24	; 57
	guest_display();
 5a2:	0e 94 b0 02 	call	0x560	; 0x560 <guest_display>
	count=5;	
 5a6:	85 e0       	ldi	r24, 0x05	; 5
 5a8:	80 93 93 01 	sts	0x0193, r24

}
 5ac:	08 95       	ret

000005ae <get_password>:
		}*/
	}
}

void get_password ()
{
 5ae:	cf 93       	push	r28
	int8_t key=keypad_read();
 5b0:	0e 94 66 00 	call	0xcc	; 0xcc <keypad_read>
 5b4:	c8 2f       	mov	r28, r24
	if(key != -1 && key!='N'){
 5b6:	8f 3f       	cpi	r24, 0xFF	; 255
 5b8:	09 f4       	brne	.+2      	; 0x5bc <get_password+0xe>
 5ba:	87 c3       	rjmp	.+1806   	; 0xcca <__stack+0x46b>
 5bc:	8e 34       	cpi	r24, 0x4E	; 78
 5be:	09 f4       	brne	.+2      	; 0x5c2 <get_password+0x14>
 5c0:	84 c3       	rjmp	.+1800   	; 0xcca <__stack+0x46b>
		switch (count)
 5c2:	80 91 93 01 	lds	r24, 0x0193
 5c6:	83 30       	cpi	r24, 0x03	; 3
 5c8:	09 f4       	brne	.+2      	; 0x5cc <get_password+0x1e>
 5ca:	a1 c0       	rjmp	.+322    	; 0x70e <get_password+0x160>
 5cc:	84 30       	cpi	r24, 0x04	; 4
 5ce:	38 f4       	brcc	.+14     	; 0x5de <get_password+0x30>
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <get_password+0x28>
 5d4:	60 c0       	rjmp	.+192    	; 0x696 <get_password+0xe8>
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	08 f0       	brcs	.+2      	; 0x5dc <get_password+0x2e>
 5da:	7b c0       	rjmp	.+246    	; 0x6d2 <get_password+0x124>
 5dc:	0a c0       	rjmp	.+20     	; 0x5f2 <get_password+0x44>
 5de:	85 30       	cpi	r24, 0x05	; 5
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <get_password+0x36>
 5e2:	c8 c1       	rjmp	.+912    	; 0x974 <__stack+0x115>
 5e4:	85 30       	cpi	r24, 0x05	; 5
 5e6:	08 f4       	brcc	.+2      	; 0x5ea <get_password+0x3c>
 5e8:	b0 c0       	rjmp	.+352    	; 0x74a <get_password+0x19c>
 5ea:	86 30       	cpi	r24, 0x06	; 6
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <get_password+0x42>
 5ee:	6d c3       	rjmp	.+1754   	; 0xcca <__stack+0x46b>
 5f0:	f9 c2       	rjmp	.+1522   	; 0xbe4 <__stack+0x385>
		{
			case 0 :
			if (key-48==0)
 5f2:	c0 33       	cpi	r28, 0x30	; 48
 5f4:	b1 f4       	brne	.+44     	; 0x622 <get_password+0x74>
			{
				block_mode=0;
 5f6:	10 92 9d 01 	sts	0x019D, r1
				EEPROM_write(30,0);
 5fa:	8e e1       	ldi	r24, 0x1E	; 30
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				state=0;
 604:	10 92 8e 01 	sts	0x018E, r1
				count++;
 608:	80 91 93 01 	lds	r24, 0x0193
 60c:	8f 5f       	subi	r24, 0xFF	; 255
 60e:	80 93 93 01 	sts	0x0193, r24
				LCD_write_command(1);
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Admin password");
 618:	8a ea       	ldi	r24, 0xAA	; 170
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 620:	30 c0       	rjmp	.+96     	; 0x682 <get_password+0xd4>
				
			}
			else if (key-48==1)
 622:	c1 33       	cpi	r28, 0x31	; 49
 624:	b9 f4       	brne	.+46     	; 0x654 <get_password+0xa6>
			{
				block_mode=0;
 626:	10 92 9d 01 	sts	0x019D, r1
				EEPROM_write(30,0);
 62a:	8e e1       	ldi	r24, 0x1E	; 30
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				state=1;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	80 93 8e 01 	sts	0x018E, r24
				count++;
 63a:	80 91 93 01 	lds	r24, 0x0193
 63e:	8f 5f       	subi	r24, 0xFF	; 255
 640:	80 93 93 01 	sts	0x0193, r24
				LCD_write_command(1);
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Guest password");
 64a:	89 eb       	ldi	r24, 0xB9	; 185
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 652:	17 c0       	rjmp	.+46     	; 0x682 <get_password+0xd4>
				
			}
			else {
				LCD_write_command(1);
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("wrong entry");
 65a:	88 ec       	ldi	r24, 0xC8	; 200
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	93 ec       	ldi	r25, 0xC3	; 195
 666:	a9 e0       	ldi	r26, 0x09	; 9
 668:	81 50       	subi	r24, 0x01	; 1
 66a:	90 40       	sbci	r25, 0x00	; 0
 66c:	a0 40       	sbci	r26, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <get_password+0xba>
 670:	00 c0       	rjmp	.+0      	; 0x672 <get_password+0xc4>
 672:	00 00       	nop
				_delay_ms(200);
				LCD_write_command(1);
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("0>admin&1>guest ");
 67a:	84 ed       	ldi	r24, 0xD4	; 212
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	93 ec       	ldi	r25, 0xC3	; 195
 686:	a9 e0       	ldi	r26, 0x09	; 9
 688:	81 50       	subi	r24, 0x01	; 1
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	a0 40       	sbci	r26, 0x00	; 0
 68e:	e1 f7       	brne	.-8      	; 0x688 <get_password+0xda>
 690:	00 c0       	rjmp	.+0      	; 0x692 <get_password+0xe4>
 692:	00 00       	nop
 694:	1a c3       	rjmp	.+1588   	; 0xcca <__stack+0x46b>
			}
			_delay_ms(200);
			break;
			case 1 :
			LCD_write_command(0xc3);
 696:	83 ec       	ldi	r24, 0xC3	; 195
 698:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 69c:	8c 2f       	mov	r24, r28
 69e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	91 ee       	ldi	r25, 0xE1	; 225
 6a6:	a4 e0       	ldi	r26, 0x04	; 4
 6a8:	81 50       	subi	r24, 0x01	; 1
 6aa:	90 40       	sbci	r25, 0x00	; 0
 6ac:	a0 40       	sbci	r26, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <get_password+0xfa>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <get_password+0x104>
 6b2:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc3);
 6b4:	83 ec       	ldi	r24, 0xC3	; 195
 6b6:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 6ba:	8a e2       	ldi	r24, 0x2A	; 42
 6bc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			c1=key-48;   // first digit of entered password from user
 6c0:	c0 53       	subi	r28, 0x30	; 48
 6c2:	c0 93 9f 01 	sts	0x019F, r28
			count++;
 6c6:	80 91 93 01 	lds	r24, 0x0193
 6ca:	8f 5f       	subi	r24, 0xFF	; 255
 6cc:	80 93 93 01 	sts	0x0193, r24
			break;
 6d0:	fc c2       	rjmp	.+1528   	; 0xcca <__stack+0x46b>
			case 2 :
			LCD_write_command(0xc4);
 6d2:	84 ec       	ldi	r24, 0xC4	; 196
 6d4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 6d8:	8c 2f       	mov	r24, r28
 6da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 6de:	8f ef       	ldi	r24, 0xFF	; 255
 6e0:	91 ee       	ldi	r25, 0xE1	; 225
 6e2:	a4 e0       	ldi	r26, 0x04	; 4
 6e4:	81 50       	subi	r24, 0x01	; 1
 6e6:	90 40       	sbci	r25, 0x00	; 0
 6e8:	a0 40       	sbci	r26, 0x00	; 0
 6ea:	e1 f7       	brne	.-8      	; 0x6e4 <get_password+0x136>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <get_password+0x140>
 6ee:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc4);
 6f0:	84 ec       	ldi	r24, 0xC4	; 196
 6f2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 6f6:	8a e2       	ldi	r24, 0x2A	; 42
 6f8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			c2=key-48;  // second digit of entered password from user
 6fc:	c0 53       	subi	r28, 0x30	; 48
 6fe:	c0 93 9c 01 	sts	0x019C, r28
			count++;
 702:	80 91 93 01 	lds	r24, 0x0193
 706:	8f 5f       	subi	r24, 0xFF	; 255
 708:	80 93 93 01 	sts	0x0193, r24
			break;
 70c:	de c2       	rjmp	.+1468   	; 0xcca <__stack+0x46b>
			case 3 :
			LCD_write_command(0xc5);
 70e:	85 ec       	ldi	r24, 0xC5	; 197
 710:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 714:	8c 2f       	mov	r24, r28
 716:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	91 ee       	ldi	r25, 0xE1	; 225
 71e:	a4 e0       	ldi	r26, 0x04	; 4
 720:	81 50       	subi	r24, 0x01	; 1
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	a0 40       	sbci	r26, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <get_password+0x172>
 728:	00 c0       	rjmp	.+0      	; 0x72a <get_password+0x17c>
 72a:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc5);
 72c:	85 ec       	ldi	r24, 0xC5	; 197
 72e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 732:	8a e2       	ldi	r24, 0x2A	; 42
 734:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			c3=key-48;   // third digit of entered password from user
 738:	c0 53       	subi	r28, 0x30	; 48
 73a:	c0 93 a0 01 	sts	0x01A0, r28
			count++;
 73e:	80 91 93 01 	lds	r24, 0x0193
 742:	8f 5f       	subi	r24, 0xFF	; 255
 744:	80 93 93 01 	sts	0x0193, r24
			break;
 748:	c0 c2       	rjmp	.+1408   	; 0xcca <__stack+0x46b>
			case 4 :
			LCD_write_command(0xc6);
 74a:	86 ec       	ldi	r24, 0xC6	; 198
 74c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 750:	8c 2f       	mov	r24, r28
 752:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 756:	8f ef       	ldi	r24, 0xFF	; 255
 758:	91 ee       	ldi	r25, 0xE1	; 225
 75a:	a4 e0       	ldi	r26, 0x04	; 4
 75c:	81 50       	subi	r24, 0x01	; 1
 75e:	90 40       	sbci	r25, 0x00	; 0
 760:	a0 40       	sbci	r26, 0x00	; 0
 762:	e1 f7       	brne	.-8      	; 0x75c <get_password+0x1ae>
 764:	00 c0       	rjmp	.+0      	; 0x766 <get_password+0x1b8>
 766:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc6);
 768:	86 ec       	ldi	r24, 0xC6	; 198
 76a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 76e:	8a e2       	ldi	r24, 0x2A	; 42
 770:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			LCD_write_command(1);
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			c4=key-48;  // forth digit of entered password from user
 77a:	c0 53       	subi	r28, 0x30	; 48
 77c:	c0 93 9b 01 	sts	0x019B, r28
			
			if (( c1==a1&&c2==a2&&c3==a3&&c4==a4) && state==0 && initial==0){
 780:	60 91 9f 01 	lds	r22, 0x019F
 784:	80 91 8c 01 	lds	r24, 0x018C
 788:	68 17       	cp	r22, r24
 78a:	d9 f4       	brne	.+54     	; 0x7c2 <get_password+0x214>
 78c:	90 91 9c 01 	lds	r25, 0x019C
 790:	80 91 8b 01 	lds	r24, 0x018B
 794:	98 17       	cp	r25, r24
 796:	a9 f4       	brne	.+42     	; 0x7c2 <get_password+0x214>
 798:	90 91 a0 01 	lds	r25, 0x01A0
 79c:	80 91 8a 01 	lds	r24, 0x018A
 7a0:	98 17       	cp	r25, r24
 7a2:	79 f4       	brne	.+30     	; 0x7c2 <get_password+0x214>
 7a4:	80 91 89 01 	lds	r24, 0x0189
 7a8:	c8 17       	cp	r28, r24
 7aa:	59 f4       	brne	.+22     	; 0x7c2 <get_password+0x214>
 7ac:	80 91 8e 01 	lds	r24, 0x018E
 7b0:	88 23       	and	r24, r24
 7b2:	39 f4       	brne	.+14     	; 0x7c2 <get_password+0x214>
 7b4:	80 91 92 01 	lds	r24, 0x0192
 7b8:	88 23       	and	r24, r24
 7ba:	19 f4       	brne	.+6      	; 0x7c2 <get_password+0x214>
				/*call function to enter admin mode */
				key=-1;
				ADMIN();
 7bc:	0e 94 89 02 	call	0x512	; 0x512 <ADMIN>
				key=-1;
 7c0:	84 c2       	rjmp	.+1288   	; 0xcca <__stack+0x46b>
			}
			else if (( c1==g1&&c2==g2&&c3==g3&&c4==g4)&& state==1 && initial==0 ){
 7c2:	80 91 9a 01 	lds	r24, 0x019A
 7c6:	68 17       	cp	r22, r24
 7c8:	d9 f4       	brne	.+54     	; 0x800 <get_password+0x252>
 7ca:	90 91 9c 01 	lds	r25, 0x019C
 7ce:	80 91 9e 01 	lds	r24, 0x019E
 7d2:	98 17       	cp	r25, r24
 7d4:	a9 f4       	brne	.+42     	; 0x800 <get_password+0x252>
 7d6:	90 91 a0 01 	lds	r25, 0x01A0
 7da:	80 91 99 01 	lds	r24, 0x0199
 7de:	98 17       	cp	r25, r24
 7e0:	79 f4       	brne	.+30     	; 0x800 <get_password+0x252>
 7e2:	80 91 98 01 	lds	r24, 0x0198
 7e6:	c8 17       	cp	r28, r24
 7e8:	59 f4       	brne	.+22     	; 0x800 <get_password+0x252>
 7ea:	80 91 8e 01 	lds	r24, 0x018E
 7ee:	81 30       	cpi	r24, 0x01	; 1
 7f0:	39 f4       	brne	.+14     	; 0x800 <get_password+0x252>
 7f2:	80 91 92 01 	lds	r24, 0x0192
 7f6:	88 23       	and	r24, r24
 7f8:	19 f4       	brne	.+6      	; 0x800 <get_password+0x252>
				/*call function to enter guest mode */
				key=-1;
				GUEST();
 7fa:	0e 94 cd 02 	call	0x59a	; 0x59a <GUEST>
				key=-1;
 7fe:	65 c2       	rjmp	.+1226   	; 0xcca <__stack+0x46b>
			}
			else if (initial==1 && state==0 ){
 800:	80 91 92 01 	lds	r24, 0x0192
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	31 f5       	brne	.+76     	; 0x854 <get_password+0x2a6>
 808:	80 91 8e 01 	lds	r24, 0x018E
 80c:	88 23       	and	r24, r24
 80e:	09 f0       	breq	.+2      	; 0x812 <get_password+0x264>
 810:	4a c0       	rjmp	.+148    	; 0x8a6 <__stack+0x47>
				EEPROM_write(20,c1);
 812:	84 e1       	ldi	r24, 0x14	; 20
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(21,c2);
 81a:	85 e1       	ldi	r24, 0x15	; 21
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	60 91 9c 01 	lds	r22, 0x019C
 822:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(22,c3);
 826:	86 e1       	ldi	r24, 0x16	; 22
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	60 91 a0 01 	lds	r22, 0x01A0
 82e:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(23,c4);
 832:	87 e1       	ldi	r24, 0x17	; 23
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	60 91 9b 01 	lds	r22, 0x019B
 83a:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(24,15);
 83e:	88 e1       	ldi	r24, 0x18	; 24
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	6f e0       	ldi	r22, 0x0F	; 15
 844:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				initial++;
 848:	80 91 92 01 	lds	r24, 0x0192
 84c:	8f 5f       	subi	r24, 0xFF	; 255
 84e:	80 93 92 01 	sts	0x0192, r24
 852:	3b c2       	rjmp	.+1142   	; 0xcca <__stack+0x46b>
				
			}
			else if (initial==3&& state==1 ){
 854:	83 30       	cpi	r24, 0x03	; 3
 856:	39 f5       	brne	.+78     	; 0x8a6 <__stack+0x47>
 858:	80 91 8e 01 	lds	r24, 0x018E
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	19 f5       	brne	.+70     	; 0x8a6 <__stack+0x47>
				EEPROM_write(25,c1);
 860:	89 e1       	ldi	r24, 0x19	; 25
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(26,c2);
 868:	8a e1       	ldi	r24, 0x1A	; 26
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	60 91 9c 01 	lds	r22, 0x019C
 870:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(27,c3);
 874:	8b e1       	ldi	r24, 0x1B	; 27
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	60 91 a0 01 	lds	r22, 0x01A0
 87c:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(28,c4);
 880:	8c e1       	ldi	r24, 0x1C	; 28
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	60 91 9b 01 	lds	r22, 0x019B
 888:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(29,15);
 88c:	8d e1       	ldi	r24, 0x1D	; 29
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	6f e0       	ldi	r22, 0x0F	; 15
 892:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				initial++;
 896:	80 91 92 01 	lds	r24, 0x0192
 89a:	8f 5f       	subi	r24, 0xFF	; 255
 89c:	80 93 92 01 	sts	0x0192, r24
				start_msg=0;
 8a0:	10 92 94 01 	sts	0x0194, r1
 8a4:	12 c2       	rjmp	.+1060   	; 0xcca <__stack+0x46b>
			}
			
			else {
				block_mode++;
 8a6:	80 91 9d 01 	lds	r24, 0x019D
 8aa:	8f 5f       	subi	r24, 0xFF	; 255
 8ac:	80 93 9d 01 	sts	0x019D, r24
				LCD_write_command(1);
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Wrong password");
 8b6:	85 ee       	ldi	r24, 0xE5	; 229
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 8be:	8f ef       	ldi	r24, 0xFF	; 255
 8c0:	95 ea       	ldi	r25, 0xA5	; 165
 8c2:	ae e0       	ldi	r26, 0x0E	; 14
 8c4:	81 50       	subi	r24, 0x01	; 1
 8c6:	90 40       	sbci	r25, 0x00	; 0
 8c8:	a0 40       	sbci	r26, 0x00	; 0
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <__stack+0x65>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <__stack+0x6f>
 8ce:	00 00       	nop
				_delay_ms(300);
				LCD_write_command(1);
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_num(3-block_mode);
 8d6:	80 91 9d 01 	lds	r24, 0x019D
 8da:	63 e0       	ldi	r22, 0x03	; 3
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	68 1b       	sub	r22, r24
 8e0:	71 09       	sbc	r23, r1
 8e2:	88 27       	eor	r24, r24
 8e4:	77 fd       	sbrc	r23, 7
 8e6:	80 95       	com	r24
 8e8:	98 2f       	mov	r25, r24
 8ea:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_write_num>
				LCD_write_string(" Tries left");
 8ee:	84 ef       	ldi	r24, 0xF4	; 244
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	91 ee       	ldi	r25, 0xE1	; 225
 8fa:	a4 e0       	ldi	r26, 0x04	; 4
 8fc:	81 50       	subi	r24, 0x01	; 1
 8fe:	90 40       	sbci	r25, 0x00	; 0
 900:	a0 40       	sbci	r26, 0x00	; 0
 902:	e1 f7       	brne	.-8      	; 0x8fc <__stack+0x9d>
 904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0xa7>
 906:	00 00       	nop
				_delay_ms(100);
				EEPROM_write(30,block_mode);				
 908:	8e e1       	ldi	r24, 0x1E	; 30
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	60 91 9d 01 	lds	r22, 0x019D
 910:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				count=1;
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	80 93 93 01 	sts	0x0193, r24
				if(block_mode==3){
 91a:	80 91 9d 01 	lds	r24, 0x019D
 91e:	83 30       	cpi	r24, 0x03	; 3
 920:	09 f0       	breq	.+2      	; 0x924 <__stack+0xc5>
 922:	d3 c1       	rjmp	.+934    	; 0xcca <__stack+0x46b>
				SETBIT(PORTC,4);
 924:	ac 9a       	sbi	0x15, 4	; 21
				LCD_write_command(1);
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("you are blocked");
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	91 e0       	ldi	r25, 0x01	; 1
 930:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 934:	80 ec       	ldi	r24, 0xC0	; 192
 936:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("for 20 sec");
 93a:	80 e1       	ldi	r24, 0x10	; 16
 93c:	91 e0       	ldi	r25, 0x01	; 1
 93e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 942:	8f ef       	ldi	r24, 0xFF	; 255
 944:	97 ea       	ldi	r25, 0xA7	; 167
 946:	a1 e6       	ldi	r26, 0x61	; 97
 948:	81 50       	subi	r24, 0x01	; 1
 94a:	90 40       	sbci	r25, 0x00	; 0
 94c:	a0 40       	sbci	r26, 0x00	; 0
 94e:	e1 f7       	brne	.-8      	; 0x948 <__stack+0xe9>
 950:	00 c0       	rjmp	.+0      	; 0x952 <__stack+0xf3>
 952:	00 00       	nop
				_delay_ms(2000);
				CLRBIT(PORTC,4);
 954:	ac 98       	cbi	0x15, 4	; 21
				LCD_write_command(1);
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Enter right pass");
 95c:	8b e1       	ldi	r24, 0x1B	; 27
 95e:	91 e0       	ldi	r25, 0x01	; 1
 960:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				block_mode=0;
 964:	10 92 9d 01 	sts	0x019D, r1
				EEPROM_write(30,0);
 968:	8e e1       	ldi	r24, 0x1E	; 30
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
 972:	ab c1       	rjmp	.+854    	; 0xcca <__stack+0x46b>
				}
				
			}
			break;
			case 5:
			switch (key){
 974:	c4 33       	cpi	r28, 0x34	; 52
 976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x11b>
 978:	63 c0       	rjmp	.+198    	; 0xa40 <__stack+0x1e1>
 97a:	c5 33       	cpi	r28, 0x35	; 53
 97c:	64 f4       	brge	.+24     	; 0x996 <__stack+0x137>
 97e:	c2 33       	cpi	r28, 0x32	; 50
 980:	69 f1       	breq	.+90     	; 0x9dc <__stack+0x17d>
 982:	c3 33       	cpi	r28, 0x33	; 51
 984:	0c f0       	brlt	.+2      	; 0x988 <__stack+0x129>
 986:	43 c0       	rjmp	.+134    	; 0xa0e <__stack+0x1af>
 988:	cf 3f       	cpi	r28, 0xFF	; 255
 98a:	09 f4       	brne	.+2      	; 0x98e <__stack+0x12f>
 98c:	9e c1       	rjmp	.+828    	; 0xcca <__stack+0x46b>
 98e:	c1 33       	cpi	r28, 0x31	; 49
 990:	09 f0       	breq	.+2      	; 0x994 <__stack+0x135>
 992:	25 c1       	rjmp	.+586    	; 0xbde <__stack+0x37f>
 994:	0a c0       	rjmp	.+20     	; 0x9aa <__stack+0x14b>
 996:	c6 33       	cpi	r28, 0x36	; 54
 998:	09 f4       	brne	.+2      	; 0x99c <__stack+0x13d>
 99a:	d3 c0       	rjmp	.+422    	; 0xb42 <__stack+0x2e3>
 99c:	c6 33       	cpi	r28, 0x36	; 54
 99e:	0c f4       	brge	.+2      	; 0x9a2 <__stack+0x143>
 9a0:	94 c0       	rjmp	.+296    	; 0xaca <__stack+0x26b>
 9a2:	c7 33       	cpi	r28, 0x37	; 55
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <__stack+0x149>
 9a6:	1b c1       	rjmp	.+566    	; 0xbde <__stack+0x37f>
 9a8:	08 c1       	rjmp	.+528    	; 0xbba <__stack+0x35b>
				case '1':
				LCD_write_command(1);
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 1");
 9b0:	8c e2       	ldi	r24, 0x2C	; 44
 9b2:	91 e0       	ldi	r25, 0x01	; 1
 9b4:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 9b8:	80 ec       	ldi	r24, 0xC0	; 192
 9ba:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 9be:	83 e3       	ldi	r24, 0x33	; 51
 9c0:	91 e0       	ldi	r25, 0x01	; 1
 9c2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				button_num=key;
 9c6:	81 e3       	ldi	r24, 0x31	; 49
 9c8:	80 93 95 01 	sts	0x0195, r24
				CLRBIT(PORTB,4);
 9cc:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 9ce:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 9d2:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				count=6;
 9d4:	86 e0       	ldi	r24, 0x06	; 6
 9d6:	80 93 93 01 	sts	0x0193, r24
				break;
 9da:	77 c1       	rjmp	.+750    	; 0xcca <__stack+0x46b>
				case '2':
				LCD_write_command(1);
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 2");
 9e2:	85 e4       	ldi	r24, 0x45	; 69
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 9ea:	80 ec       	ldi	r24, 0xC0	; 192
 9ec:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 9f0:	83 e3       	ldi	r24, 0x33	; 51
 9f2:	91 e0       	ldi	r25, 0x01	; 1
 9f4:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				button_num=key;
 9f8:	82 e3       	ldi	r24, 0x32	; 50
 9fa:	80 93 95 01 	sts	0x0195, r24
				CLRBIT(PORTB,4);
 9fe:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 a00:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 a04:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				count=6;
 a06:	86 e0       	ldi	r24, 0x06	; 6
 a08:	80 93 93 01 	sts	0x0193, r24
				break;
 a0c:	5e c1       	rjmp	.+700    	; 0xcca <__stack+0x46b>
				case '3':
				LCD_write_command(1);
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 3");
 a14:	8c e4       	ldi	r24, 0x4C	; 76
 a16:	91 e0       	ldi	r25, 0x01	; 1
 a18:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 a1c:	80 ec       	ldi	r24, 0xC0	; 192
 a1e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 a22:	83 e3       	ldi	r24, 0x33	; 51
 a24:	91 e0       	ldi	r25, 0x01	; 1
 a26:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				button_num=key;
 a2a:	83 e3       	ldi	r24, 0x33	; 51
 a2c:	80 93 95 01 	sts	0x0195, r24
				CLRBIT(PORTB,4);
 a30:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 a32:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 a36:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				count=6;
 a38:	86 e0       	ldi	r24, 0x06	; 6
 a3a:	80 93 93 01 	sts	0x0193, r24
				break;
 a3e:	45 c1       	rjmp	.+650    	; 0xcca <__stack+0x46b>
				case '4':
				button_num=key;
 a40:	84 e3       	ldi	r24, 0x34	; 52
 a42:	80 93 95 01 	sts	0x0195, r24
				if (state==1){
 a46:	80 91 8e 01 	lds	r24, 0x018E
 a4a:	81 30       	cpi	r24, 0x01	; 1
 a4c:	b1 f4       	brne	.+44     	; 0xa7a <__stack+0x21b>
				LCD_write_command(1);
 a4e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 4");
 a52:	83 e5       	ldi	r24, 0x53	; 83
 a54:	91 e0       	ldi	r25, 0x01	; 1
 a56:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 a5a:	80 ec       	ldi	r24, 0xC0	; 192
 a5c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 a60:	83 e3       	ldi	r24, 0x33	; 51
 a62:	91 e0       	ldi	r25, 0x01	; 1
 a64:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 a68:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 a6a:	84 e3       	ldi	r24, 0x34	; 52
 a6c:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 a70:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				count=6;
 a72:	86 e0       	ldi	r24, 0x06	; 6
 a74:	80 93 93 01 	sts	0x0193, r24
 a78:	28 c1       	rjmp	.+592    	; 0xcca <__stack+0x46b>
				}
				else if(state==0 && disp_falg==0){
 a7a:	88 23       	and	r24, r24
 a7c:	09 f0       	breq	.+2      	; 0xa80 <__stack+0x221>
 a7e:	25 c1       	rjmp	.+586    	; 0xcca <__stack+0x46b>
 a80:	80 91 91 01 	lds	r24, 0x0191
 a84:	88 23       	and	r24, r24
 a86:	31 f4       	brne	.+12     	; 0xa94 <__stack+0x235>
					key=-1;
					admin_display2();
 a88:	0e 94 93 02 	call	0x526	; 0x526 <admin_display2>
					disp_falg=1;}
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	80 93 91 01 	sts	0x0191, r24
 a92:	1b c1       	rjmp	.+566    	; 0xcca <__stack+0x46b>
				else if (state==0 && disp_falg==1){
 a94:	81 30       	cpi	r24, 0x01	; 1
 a96:	09 f0       	breq	.+2      	; 0xa9a <__stack+0x23b>
 a98:	18 c1       	rjmp	.+560    	; 0xcca <__stack+0x46b>
					LCD_write_command(1);
 a9a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					LCD_write_string("Room 4");
 a9e:	83 e5       	ldi	r24, 0x53	; 83
 aa0:	91 e0       	ldi	r25, 0x01	; 1
 aa2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
					LCD_write_command(0xc0);
 aa6:	80 ec       	ldi	r24, 0xC0	; 192
 aa8:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					LCD_write_string("1>on 2>off 3>back");
 aac:	83 e3       	ldi	r24, 0x33	; 51
 aae:	91 e0       	ldi	r25, 0x01	; 1
 ab0:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
					CLRBIT(PORTB,4);
 ab4:	c4 98       	cbi	0x18, 4	; 24
					SPI_send_char(key);
 ab6:	84 e3       	ldi	r24, 0x34	; 52
 ab8:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
					SETBIT(PORTB,4);
 abc:	c4 9a       	sbi	0x18, 4	; 24
					key=-1;
					count=6;
 abe:	86 e0       	ldi	r24, 0x06	; 6
 ac0:	80 93 93 01 	sts	0x0193, r24
					disp_falg=0;
 ac4:	10 92 91 01 	sts	0x0191, r1
 ac8:	00 c1       	rjmp	.+512    	; 0xcca <__stack+0x46b>
				}		
				else {key=-1;}
				break;
				case '5':
				button_num=key;
 aca:	85 e3       	ldi	r24, 0x35	; 53
 acc:	80 93 95 01 	sts	0x0195, r24
				if (state==0 && disp_falg==1){
 ad0:	80 91 8e 01 	lds	r24, 0x018E
 ad4:	88 23       	and	r24, r24
 ad6:	e9 f4       	brne	.+58     	; 0xb12 <__stack+0x2b3>
 ad8:	80 91 91 01 	lds	r24, 0x0191
 adc:	81 30       	cpi	r24, 0x01	; 1
 ade:	09 f0       	breq	.+2      	; 0xae2 <__stack+0x283>
 ae0:	f4 c0       	rjmp	.+488    	; 0xcca <__stack+0x46b>
				LCD_write_command(1);
 ae2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("TV");
 ae6:	8a e5       	ldi	r24, 0x5A	; 90
 ae8:	91 e0       	ldi	r25, 0x01	; 1
 aea:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 aee:	80 ec       	ldi	r24, 0xC0	; 192
 af0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 af4:	83 e3       	ldi	r24, 0x33	; 51
 af6:	91 e0       	ldi	r25, 0x01	; 1
 af8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 afc:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 afe:	85 e3       	ldi	r24, 0x35	; 53
 b00:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 b04:	c4 9a       	sbi	0x18, 4	; 24
				disp_falg=0;
 b06:	10 92 91 01 	sts	0x0191, r1
				key=-1;
				count=6;
 b0a:	86 e0       	ldi	r24, 0x06	; 6
 b0c:	80 93 93 01 	sts	0x0193, r24
 b10:	dc c0       	rjmp	.+440    	; 0xcca <__stack+0x46b>
				}
				else if(state==1) {
 b12:	81 30       	cpi	r24, 0x01	; 1
 b14:	09 f0       	breq	.+2      	; 0xb18 <__stack+0x2b9>
 b16:	d9 c0       	rjmp	.+434    	; 0xcca <__stack+0x46b>
					LCD_write_command(1);
 b18:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					LCD_write_string("wrong entry");
 b1c:	88 ec       	ldi	r24, 0xC8	; 200
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 b24:	8f ef       	ldi	r24, 0xFF	; 255
 b26:	91 ee       	ldi	r25, 0xE1	; 225
 b28:	a4 e0       	ldi	r26, 0x04	; 4
 b2a:	81 50       	subi	r24, 0x01	; 1
 b2c:	90 40       	sbci	r25, 0x00	; 0
 b2e:	a0 40       	sbci	r26, 0x00	; 0
 b30:	e1 f7       	brne	.-8      	; 0xb2a <__stack+0x2cb>
 b32:	00 c0       	rjmp	.+0      	; 0xb34 <__stack+0x2d5>
 b34:	00 00       	nop
					_delay_ms(100);
					LCD_write_command(1);
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					guest_display();
 b3c:	0e 94 b0 02 	call	0x560	; 0x560 <guest_display>
 b40:	c4 c0       	rjmp	.+392    	; 0xcca <__stack+0x46b>
				}
				break;
				case '6':
				button_num=key;
 b42:	86 e3       	ldi	r24, 0x36	; 54
 b44:	80 93 95 01 	sts	0x0195, r24
				if(state==0 && disp_falg==1){
 b48:	80 91 8e 01 	lds	r24, 0x018E
 b4c:	88 23       	and	r24, r24
 b4e:	e9 f4       	brne	.+58     	; 0xb8a <__stack+0x32b>
 b50:	80 91 91 01 	lds	r24, 0x0191
 b54:	81 30       	cpi	r24, 0x01	; 1
 b56:	09 f0       	breq	.+2      	; 0xb5a <__stack+0x2fb>
 b58:	b8 c0       	rjmp	.+368    	; 0xcca <__stack+0x46b>
				LCD_write_command(1);
 b5a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("COND");
 b5e:	8d e5       	ldi	r24, 0x5D	; 93
 b60:	91 e0       	ldi	r25, 0x01	; 1
 b62:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 b66:	80 ec       	ldi	r24, 0xC0	; 192
 b68:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 b6c:	83 e3       	ldi	r24, 0x33	; 51
 b6e:	91 e0       	ldi	r25, 0x01	; 1
 b70:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 b74:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 b76:	86 e3       	ldi	r24, 0x36	; 54
 b78:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 b7c:	c4 9a       	sbi	0x18, 4	; 24
				disp_falg=0;
 b7e:	10 92 91 01 	sts	0x0191, r1
				key=-1;
				count=6;
 b82:	86 e0       	ldi	r24, 0x06	; 6
 b84:	80 93 93 01 	sts	0x0193, r24
 b88:	a0 c0       	rjmp	.+320    	; 0xcca <__stack+0x46b>
				}				
				else if(state==1) {
 b8a:	81 30       	cpi	r24, 0x01	; 1
 b8c:	09 f0       	breq	.+2      	; 0xb90 <__stack+0x331>
 b8e:	9d c0       	rjmp	.+314    	; 0xcca <__stack+0x46b>
					LCD_write_command(1);
 b90:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					LCD_write_string("wrong entry");
 b94:	88 ec       	ldi	r24, 0xC8	; 200
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 b9c:	8f ef       	ldi	r24, 0xFF	; 255
 b9e:	91 ee       	ldi	r25, 0xE1	; 225
 ba0:	a4 e0       	ldi	r26, 0x04	; 4
 ba2:	81 50       	subi	r24, 0x01	; 1
 ba4:	90 40       	sbci	r25, 0x00	; 0
 ba6:	a0 40       	sbci	r26, 0x00	; 0
 ba8:	e1 f7       	brne	.-8      	; 0xba2 <__stack+0x343>
 baa:	00 c0       	rjmp	.+0      	; 0xbac <__stack+0x34d>
 bac:	00 00       	nop
					_delay_ms(100);
					LCD_write_command(1);
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					guest_display();
 bb4:	0e 94 b0 02 	call	0x560	; 0x560 <guest_display>
 bb8:	88 c0       	rjmp	.+272    	; 0xcca <__stack+0x46b>
				}
				break;
				case '7':
				button_num=key;
 bba:	87 e3       	ldi	r24, 0x37	; 55
 bbc:	80 93 95 01 	sts	0x0195, r24
				if(state==0&&disp_falg==1){
 bc0:	80 91 8e 01 	lds	r24, 0x018E
 bc4:	88 23       	and	r24, r24
 bc6:	09 f0       	breq	.+2      	; 0xbca <__stack+0x36b>
 bc8:	80 c0       	rjmp	.+256    	; 0xcca <__stack+0x46b>
 bca:	80 91 91 01 	lds	r24, 0x0191
 bce:	81 30       	cpi	r24, 0x01	; 1
 bd0:	09 f0       	breq	.+2      	; 0xbd4 <__stack+0x375>
 bd2:	7b c0       	rjmp	.+246    	; 0xcca <__stack+0x46b>
					admin_display();
 bd4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>
					disp_falg=0;
 bd8:	10 92 91 01 	sts	0x0191, r1
 bdc:	76 c0       	rjmp	.+236    	; 0xcca <__stack+0x46b>
				else{key=-1;}
				break;
				case -1:
				break;
				default:
				admin_display();
 bde:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>
				break;
 be2:	73 c0       	rjmp	.+230    	; 0xcca <__stack+0x46b>
			}
			break;
			case 6:
			switch (key){
 be4:	c2 33       	cpi	r28, 0x32	; 50
 be6:	49 f1       	breq	.+82     	; 0xc3a <__stack+0x3db>
 be8:	c3 33       	cpi	r28, 0x33	; 51
 bea:	09 f4       	brne	.+2      	; 0xbee <__stack+0x38f>
 bec:	49 c0       	rjmp	.+146    	; 0xc80 <__stack+0x421>
 bee:	c1 33       	cpi	r28, 0x31	; 49
 bf0:	09 f0       	breq	.+2      	; 0xbf4 <__stack+0x395>
 bf2:	5d c0       	rjmp	.+186    	; 0xcae <__stack+0x44f>
				case '1':
				LCD_write_command(1);
 bf4:	81 e0       	ldi	r24, 0x01	; 1
 bf6:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 1");
 bfa:	8c e2       	ldi	r24, 0x2C	; 44
 bfc:	91 e0       	ldi	r25, 0x01	; 1
 bfe:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 c02:	80 ec       	ldi	r24, 0xC0	; 192
 c04:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("on");				// change this to spi send 
 c08:	82 e6       	ldi	r24, 0x62	; 98
 c0a:	91 e0       	ldi	r25, 0x01	; 1
 c0c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 c10:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 c12:	81 e3       	ldi	r24, 0x31	; 49
 c14:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 c18:	c4 9a       	sbi	0x18, 4	; 24
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	91 ee       	ldi	r25, 0xE1	; 225
 c1e:	a4 e0       	ldi	r26, 0x04	; 4
 c20:	81 50       	subi	r24, 0x01	; 1
 c22:	90 40       	sbci	r25, 0x00	; 0
 c24:	a0 40       	sbci	r26, 0x00	; 0
 c26:	e1 f7       	brne	.-8      	; 0xc20 <__stack+0x3c1>
 c28:	00 c0       	rjmp	.+0      	; 0xc2a <__stack+0x3cb>
 c2a:	00 00       	nop
				_delay_ms(100);
				CLRBIT(PORTB,4);
 c2c:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(button_num);
 c2e:	80 91 95 01 	lds	r24, 0x0195
 c32:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 c36:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				break;
 c38:	48 c0       	rjmp	.+144    	; 0xcca <__stack+0x46b>
				case '2':
				LCD_write_command(1);
 c3a:	81 e0       	ldi	r24, 0x01	; 1
 c3c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 1");		// change this to spi send 	
 c40:	8c e2       	ldi	r24, 0x2C	; 44
 c42:	91 e0       	ldi	r25, 0x01	; 1
 c44:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 c48:	80 ec       	ldi	r24, 0xC0	; 192
 c4a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("off");
 c4e:	85 e6       	ldi	r24, 0x65	; 101
 c50:	91 e0       	ldi	r25, 0x01	; 1
 c52:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 c56:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 c58:	82 e3       	ldi	r24, 0x32	; 50
 c5a:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 c5e:	c4 9a       	sbi	0x18, 4	; 24
 c60:	8f ef       	ldi	r24, 0xFF	; 255
 c62:	91 ee       	ldi	r25, 0xE1	; 225
 c64:	a4 e0       	ldi	r26, 0x04	; 4
 c66:	81 50       	subi	r24, 0x01	; 1
 c68:	90 40       	sbci	r25, 0x00	; 0
 c6a:	a0 40       	sbci	r26, 0x00	; 0
 c6c:	e1 f7       	brne	.-8      	; 0xc66 <__stack+0x407>
 c6e:	00 c0       	rjmp	.+0      	; 0xc70 <__stack+0x411>
 c70:	00 00       	nop
				_delay_ms(100);
				CLRBIT(PORTB,4);
 c72:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(button_num);
 c74:	80 91 95 01 	lds	r24, 0x0195
 c78:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 c7c:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				break;
 c7e:	25 c0       	rjmp	.+74     	; 0xcca <__stack+0x46b>
				case '3':
				CLRBIT(PORTB,4);
 c80:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char('0');
 c82:	80 e3       	ldi	r24, 0x30	; 48
 c84:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
				SETBIT(PORTB,4);
 c88:	c4 9a       	sbi	0x18, 4	; 24
				if(state==0){
 c8a:	80 91 8e 01 	lds	r24, 0x018E
 c8e:	88 23       	and	r24, r24
 c90:	31 f4       	brne	.+12     	; 0xc9e <__stack+0x43f>
					admin_display();
 c92:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>
					key=-1;
					count=5;
 c96:	85 e0       	ldi	r24, 0x05	; 5
 c98:	80 93 93 01 	sts	0x0193, r24
 c9c:	16 c0       	rjmp	.+44     	; 0xcca <__stack+0x46b>
				}
				else if(state==1){
 c9e:	81 30       	cpi	r24, 0x01	; 1
 ca0:	a1 f4       	brne	.+40     	; 0xcca <__stack+0x46b>
					guest_display();
 ca2:	0e 94 b0 02 	call	0x560	; 0x560 <guest_display>
					key=-1;
					count=5;
 ca6:	85 e0       	ldi	r24, 0x05	; 5
 ca8:	80 93 93 01 	sts	0x0193, r24
 cac:	0e c0       	rjmp	.+28     	; 0xcca <__stack+0x46b>
				}
				break;
				default:
				LCD_write_command(1);
 cae:	81 e0       	ldi	r24, 0x01	; 1
 cb0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("wrong entry");
 cb4:	88 ec       	ldi	r24, 0xC8	; 200
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 cbc:	80 ec       	ldi	r24, 0xC0	; 192
 cbe:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 cc2:	83 e3       	ldi	r24, 0x33	; 51
 cc4:	91 e0       	ldi	r25, 0x01	; 1
 cc6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
			break;				
		
		}
	
	}
}
 cca:	cf 91       	pop	r28
 ccc:	08 95       	ret

00000cce <main>:
uint8_t state=0; // Admin(0) or guest(1)
uint8_t a1=1,a2=2,a3=3,a4=4; // right password digits --> admin
uint8_t g1,g2,g3,g4;		//right password digits	--> guest
uint8_t c1,c2,c3,c4; // password digits entered by user
int main(void){
	Set_admin_pass=EEPROM_read(24);
 cce:	88 e1       	ldi	r24, 0x18	; 24
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 cd6:	80 93 90 01 	sts	0x0190, r24
	Set_guest_pass=EEPROM_read(29);
 cda:	8d e1       	ldi	r24, 0x1D	; 29
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 ce2:	80 93 8f 01 	sts	0x018F, r24
	a1=EEPROM_read(20); // first digit of admin mode
 ce6:	84 e1       	ldi	r24, 0x14	; 20
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 cee:	80 93 8c 01 	sts	0x018C, r24
	a2=EEPROM_read(21);	// second digit of admin mode
 cf2:	85 e1       	ldi	r24, 0x15	; 21
 cf4:	90 e0       	ldi	r25, 0x00	; 0
 cf6:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 cfa:	80 93 8b 01 	sts	0x018B, r24
	a3=EEPROM_read(22);	// third digit of admin mode
 cfe:	86 e1       	ldi	r24, 0x16	; 22
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d06:	80 93 8a 01 	sts	0x018A, r24
	a4=EEPROM_read(23);	// forth digit of admin mode
 d0a:	87 e1       	ldi	r24, 0x17	; 23
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d12:	80 93 89 01 	sts	0x0189, r24
	g1=EEPROM_read(25);	// first digit of guest mode
 d16:	89 e1       	ldi	r24, 0x19	; 25
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d1e:	80 93 9a 01 	sts	0x019A, r24
	g2=EEPROM_read(26);	// second digit of guest mode
 d22:	8a e1       	ldi	r24, 0x1A	; 26
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d2a:	80 93 9e 01 	sts	0x019E, r24
	g3=EEPROM_read(27);	// third digit of guest mode
 d2e:	8b e1       	ldi	r24, 0x1B	; 27
 d30:	90 e0       	ldi	r25, 0x00	; 0
 d32:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d36:	80 93 99 01 	sts	0x0199, r24
	g4=EEPROM_read(28);	// forth digit of guest mode
 d3a:	8c e1       	ldi	r24, 0x1C	; 28
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d42:	80 93 98 01 	sts	0x0198, r24
	SETBIT(DDRC,0);		// LED FOR ADMIN MODE
 d46:	a0 9a       	sbi	0x14, 0	; 20
	SETBIT(DDRC,2);		// LED FOR GUEST MODE
 d48:	a2 9a       	sbi	0x14, 2	; 20
	SETBIT(DDRC,4);		// LED FOR BLOCK MODE
 d4a:	a4 9a       	sbi	0x14, 4	; 20
//	sei();
//	int8_t key;
	LCD_init();
 d4c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_init>
	keypad_init();
 d50:	0e 94 5a 00 	call	0xb4	; 0xb4 <keypad_init>
	SPI_master_init();
 d54:	0e 94 57 07 	call	0xeae	; 0xeae <SPI_master_init>
	timer_normal_init();
 d58:	0e 94 68 07 	call	0xed0	; 0xed0 <timer_normal_init>
//    SETBIT(PORTC,4);
//	LCD_write_string("enter password");
	block_mode=EEPROM_read(30);
 d5c:	8e e1       	ldi	r24, 0x1E	; 30
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d64:	80 93 9d 01 	sts	0x019D, r24
    {
		
		if(block_mode==3){
		SETBIT(PORTC,4);
		LCD_write_command(1);
		LCD_write_string("you are blocked");
 d68:	00 e0       	ldi	r16, 0x00	; 0
 d6a:	11 e0       	ldi	r17, 0x01	; 1
		LCD_write_command(0xc0);
		LCD_write_string("for 20 sec");
 d6c:	0f 2e       	mov	r0, r31
 d6e:	f0 e1       	ldi	r31, 0x10	; 16
 d70:	ef 2e       	mov	r14, r31
 d72:	f1 e0       	ldi	r31, 0x01	; 1
 d74:	ff 2e       	mov	r15, r31
 d76:	f0 2d       	mov	r31, r0
		_delay_ms(2000);
		CLRBIT(PORTC,4);
		LCD_write_command(1);
		LCD_write_string("Enter right pass");
 d78:	0f 2e       	mov	r0, r31
 d7a:	fb e1       	ldi	r31, 0x1B	; 27
 d7c:	cf 2e       	mov	r12, r31
 d7e:	f1 e0       	ldi	r31, 0x01	; 1
 d80:	df 2e       	mov	r13, r31
 d82:	f0 2d       	mov	r31, r0
		
		
		if (Set_admin_pass==255	&& initial==0 )		// to set first value of admin password
		{
			LCD_write_command(1);
			LCD_write_string("Enter new admin");
 d84:	0f 2e       	mov	r0, r31
 d86:	f9 e6       	ldi	r31, 0x69	; 105
 d88:	af 2e       	mov	r10, r31
 d8a:	f1 e0       	ldi	r31, 0x01	; 1
 d8c:	bf 2e       	mov	r11, r31
 d8e:	f0 2d       	mov	r31, r0
			start_msg=1;
			_delay_ms(200);
		}
		if (Set_guest_pass==255 && initial==2)		// to set first value of guest password
		{
			initial=3;
 d90:	0f 2e       	mov	r0, r31
 d92:	f3 e0       	ldi	r31, 0x03	; 3
 d94:	9f 2e       	mov	r9, r31
 d96:	f0 2d       	mov	r31, r0
			LCD_write_command(1);
			LCD_write_string("Enter new guest");
 d98:	0f 2e       	mov	r0, r31
 d9a:	f9 e7       	ldi	r31, 0x79	; 121
 d9c:	6f 2e       	mov	r6, r31
 d9e:	f1 e0       	ldi	r31, 0x01	; 1
 da0:	7f 2e       	mov	r7, r31
 da2:	f0 2d       	mov	r31, r0
			start_msg=1;
			_delay_ms(200);
		}
		if(start_msg==0){						// start message to user before writing password
		LCD_write_command(1);
		LCD_write_string("0>admin&1>guest ");
 da4:	c4 ed       	ldi	r28, 0xD4	; 212
 da6:	d0 e0       	ldi	r29, 0x00	; 0
//	LCD_write_string("enter password");
	block_mode=EEPROM_read(30);
	while(1)
    {
		
		if(block_mode==3){
 da8:	80 91 9d 01 	lds	r24, 0x019D
 dac:	83 30       	cpi	r24, 0x03	; 3
 dae:	f9 f4       	brne	.+62     	; 0xdee <main+0x120>
		SETBIT(PORTC,4);
 db0:	ac 9a       	sbi	0x15, 4	; 21
		LCD_write_command(1);
 db2:	81 e0       	ldi	r24, 0x01	; 1
 db4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("you are blocked");
 db8:	c8 01       	movw	r24, r16
 dba:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
		LCD_write_command(0xc0);
 dbe:	80 ec       	ldi	r24, 0xC0	; 192
 dc0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("for 20 sec");
 dc4:	c7 01       	movw	r24, r14
 dc6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 dca:	8f ef       	ldi	r24, 0xFF	; 255
 dcc:	97 ea       	ldi	r25, 0xA7	; 167
 dce:	a1 e6       	ldi	r26, 0x61	; 97
 dd0:	81 50       	subi	r24, 0x01	; 1
 dd2:	90 40       	sbci	r25, 0x00	; 0
 dd4:	a0 40       	sbci	r26, 0x00	; 0
 dd6:	e1 f7       	brne	.-8      	; 0xdd0 <main+0x102>
 dd8:	00 c0       	rjmp	.+0      	; 0xdda <main+0x10c>
 dda:	00 00       	nop
		_delay_ms(2000);
		CLRBIT(PORTC,4);
 ddc:	ac 98       	cbi	0x15, 4	; 21
		LCD_write_command(1);
 dde:	81 e0       	ldi	r24, 0x01	; 1
 de0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("Enter right pass");
 de4:	c6 01       	movw	r24, r12
 de6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
		block_mode=0;
 dea:	10 92 9d 01 	sts	0x019D, r1

		}
		
		
		if (Set_admin_pass==255	&& initial==0 )		// to set first value of admin password
 dee:	80 91 90 01 	lds	r24, 0x0190
 df2:	8f 3f       	cpi	r24, 0xFF	; 255
 df4:	e1 f4       	brne	.+56     	; 0xe2e <main+0x160>
 df6:	80 91 92 01 	lds	r24, 0x0192
 dfa:	88 23       	and	r24, r24
 dfc:	c1 f4       	brne	.+48     	; 0xe2e <main+0x160>
		{
			LCD_write_command(1);
 dfe:	81 e0       	ldi	r24, 0x01	; 1
 e00:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_string("Enter new admin");
 e04:	c5 01       	movw	r24, r10
 e06:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
			initial=1;
 e0a:	81 e0       	ldi	r24, 0x01	; 1
 e0c:	80 93 92 01 	sts	0x0192, r24
			count=1;
 e10:	80 93 93 01 	sts	0x0193, r24
			state=0;
 e14:	10 92 8e 01 	sts	0x018E, r1
			start_msg=1;
 e18:	80 93 94 01 	sts	0x0194, r24
 e1c:	8f ef       	ldi	r24, 0xFF	; 255
 e1e:	93 ec       	ldi	r25, 0xC3	; 195
 e20:	a9 e0       	ldi	r26, 0x09	; 9
 e22:	81 50       	subi	r24, 0x01	; 1
 e24:	90 40       	sbci	r25, 0x00	; 0
 e26:	a0 40       	sbci	r26, 0x00	; 0
 e28:	e1 f7       	brne	.-8      	; 0xe22 <main+0x154>
 e2a:	00 c0       	rjmp	.+0      	; 0xe2c <main+0x15e>
 e2c:	00 00       	nop
			_delay_ms(200);
		}
		if (Set_guest_pass==255 && initial==2)		// to set first value of guest password
 e2e:	80 91 8f 01 	lds	r24, 0x018F
 e32:	8f 3f       	cpi	r24, 0xFF	; 255
 e34:	e1 f4       	brne	.+56     	; 0xe6e <main+0x1a0>
 e36:	80 91 92 01 	lds	r24, 0x0192
 e3a:	82 30       	cpi	r24, 0x02	; 2
 e3c:	c1 f4       	brne	.+48     	; 0xe6e <main+0x1a0>
		{
			initial=3;
 e3e:	90 92 92 01 	sts	0x0192, r9
			LCD_write_command(1);
 e42:	81 e0       	ldi	r24, 0x01	; 1
 e44:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_string("Enter new guest");
 e48:	c3 01       	movw	r24, r6
 e4a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
			count=1;
 e4e:	81 e0       	ldi	r24, 0x01	; 1
 e50:	80 93 93 01 	sts	0x0193, r24
			state=1;			
 e54:	80 93 8e 01 	sts	0x018E, r24
			start_msg=1;
 e58:	80 93 94 01 	sts	0x0194, r24
 e5c:	8f ef       	ldi	r24, 0xFF	; 255
 e5e:	93 ec       	ldi	r25, 0xC3	; 195
 e60:	a9 e0       	ldi	r26, 0x09	; 9
 e62:	81 50       	subi	r24, 0x01	; 1
 e64:	90 40       	sbci	r25, 0x00	; 0
 e66:	a0 40       	sbci	r26, 0x00	; 0
 e68:	e1 f7       	brne	.-8      	; 0xe62 <main+0x194>
 e6a:	00 c0       	rjmp	.+0      	; 0xe6c <main+0x19e>
 e6c:	00 00       	nop
			_delay_ms(200);
		}
		if(start_msg==0){						// start message to user before writing password
 e6e:	80 91 94 01 	lds	r24, 0x0194
 e72:	88 23       	and	r24, r24
 e74:	c9 f4       	brne	.+50     	; 0xea8 <main+0x1da>
		LCD_write_command(1);
 e76:	81 e0       	ldi	r24, 0x01	; 1
 e78:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("0>admin&1>guest ");
 e7c:	ce 01       	movw	r24, r28
 e7e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 e82:	8f ef       	ldi	r24, 0xFF	; 255
 e84:	99 e6       	ldi	r25, 0x69	; 105
 e86:	a8 e1       	ldi	r26, 0x18	; 24
 e88:	81 50       	subi	r24, 0x01	; 1
 e8a:	90 40       	sbci	r25, 0x00	; 0
 e8c:	a0 40       	sbci	r26, 0x00	; 0
 e8e:	e1 f7       	brne	.-8      	; 0xe88 <main+0x1ba>
 e90:	00 c0       	rjmp	.+0      	; 0xe92 <main+0x1c4>
 e92:	00 00       	nop
		_delay_ms(500);
		start_msg++;
 e94:	80 91 94 01 	lds	r24, 0x0194
 e98:	8f 5f       	subi	r24, 0xFF	; 255
 e9a:	80 93 94 01 	sts	0x0194, r24
		CLRBIT(PORTB,4);
 e9e:	c4 98       	cbi	0x18, 4	; 24
		SPI_send_char('0');
 ea0:	80 e3       	ldi	r24, 0x30	; 48
 ea2:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_send_char>
		SETBIT(PORTB,4);
 ea6:	c4 9a       	sbi	0x18, 4	; 24
		}
		get_password();
 ea8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <get_password>
		SPI_send_char(key);
		SETBIT(PORTB,4);
		sei();				// test
		_delay_ms(100);
		}*/
	}
 eac:	7d cf       	rjmp	.-262    	; 0xda8 <main+0xda>

00000eae <SPI_master_init>:
#define CS	PB4
//#define CS2	PB3
#define CLK PB5

void SPI_master_init(){
	DDRB |= (1<<MOSI)|(1<<CS)|(1<<CLK);
 eae:	87 b3       	in	r24, 0x17	; 23
 eb0:	80 6b       	ori	r24, 0xB0	; 176
 eb2:	87 bb       	out	0x17, r24	; 23
	SPCR = 1<<MSTR | 1<<SPE;
 eb4:	80 e5       	ldi	r24, 0x50	; 80
 eb6:	8d b9       	out	0x0d, r24	; 13
}
 eb8:	08 95       	ret

00000eba <SPI_slave_init>:
void SPI_slave_init(){	
	SETBIT(DDRB,MISO);	// MISO
 eba:	be 9a       	sbi	0x17, 6	; 23
	SETBIT(SPCR,SPE);	// enable SPI
 ebc:	6e 9a       	sbi	0x0d, 6	; 13
}
 ebe:	08 95       	ret

00000ec0 <SPI_send_char>:
void SPI_send_char(uint8_t data){
	SPDR = data;
 ec0:	8f b9       	out	0x0f, r24	; 15
	while(GETBIT(SPSR,SPIF) == 0);
 ec2:	77 9b       	sbis	0x0e, 7	; 14
 ec4:	fe cf       	rjmp	.-4      	; 0xec2 <SPI_send_char+0x2>
}
 ec6:	08 95       	ret

00000ec8 <SPI_receive_char>:
uint8_t SPI_receive_char(){
	while(GETBIT(SPSR,SPIF) == 0);
 ec8:	77 9b       	sbis	0x0e, 7	; 14
 eca:	fe cf       	rjmp	.-4      	; 0xec8 <SPI_receive_char>
	return SPDR;
 ecc:	8f b1       	in	r24, 0x0f	; 15
 ece:	08 95       	ret

00000ed0 <timer_normal_init>:
 *  Author: M
 */ 
#include "Timer0.h"

void timer_normal_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00);
 ed0:	85 e8       	ldi	r24, 0x85	; 133
 ed2:	83 bf       	out	0x33, r24	; 51
	//SETBIT(TIMSK,TOIE0);
	sei();
 ed4:	78 94       	sei
}
 ed6:	08 95       	ret

00000ed8 <timer_compare_init>:
void timer_compare_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00) | (1<<WGM01);
 ed8:	8d e8       	ldi	r24, 0x8D	; 141
 eda:	83 bf       	out	0x33, r24	; 51
	OCR0 =200;
 edc:	88 ec       	ldi	r24, 0xC8	; 200
 ede:	8c bf       	out	0x3c, r24	; 60
	SETBIT(TIMSK,OCIE0);
 ee0:	89 b7       	in	r24, 0x39	; 57
 ee2:	82 60       	ori	r24, 0x02	; 2
 ee4:	89 bf       	out	0x39, r24	; 57
	sei();
 ee6:	78 94       	sei
 ee8:	08 95       	ret

00000eea <__udivmodsi4>:
 eea:	a1 e2       	ldi	r26, 0x21	; 33
 eec:	1a 2e       	mov	r1, r26
 eee:	aa 1b       	sub	r26, r26
 ef0:	bb 1b       	sub	r27, r27
 ef2:	fd 01       	movw	r30, r26
 ef4:	0d c0       	rjmp	.+26     	; 0xf10 <__udivmodsi4_ep>

00000ef6 <__udivmodsi4_loop>:
 ef6:	aa 1f       	adc	r26, r26
 ef8:	bb 1f       	adc	r27, r27
 efa:	ee 1f       	adc	r30, r30
 efc:	ff 1f       	adc	r31, r31
 efe:	a2 17       	cp	r26, r18
 f00:	b3 07       	cpc	r27, r19
 f02:	e4 07       	cpc	r30, r20
 f04:	f5 07       	cpc	r31, r21
 f06:	20 f0       	brcs	.+8      	; 0xf10 <__udivmodsi4_ep>
 f08:	a2 1b       	sub	r26, r18
 f0a:	b3 0b       	sbc	r27, r19
 f0c:	e4 0b       	sbc	r30, r20
 f0e:	f5 0b       	sbc	r31, r21

00000f10 <__udivmodsi4_ep>:
 f10:	66 1f       	adc	r22, r22
 f12:	77 1f       	adc	r23, r23
 f14:	88 1f       	adc	r24, r24
 f16:	99 1f       	adc	r25, r25
 f18:	1a 94       	dec	r1
 f1a:	69 f7       	brne	.-38     	; 0xef6 <__udivmodsi4_loop>
 f1c:	60 95       	com	r22
 f1e:	70 95       	com	r23
 f20:	80 95       	com	r24
 f22:	90 95       	com	r25
 f24:	9b 01       	movw	r18, r22
 f26:	ac 01       	movw	r20, r24
 f28:	bd 01       	movw	r22, r26
 f2a:	cf 01       	movw	r24, r30
 f2c:	08 95       	ret

00000f2e <_exit>:
 f2e:	f8 94       	cli

00000f30 <__stop_program>:
 f30:	ff cf       	rjmp	.-2      	; 0xf30 <__stop_program>
