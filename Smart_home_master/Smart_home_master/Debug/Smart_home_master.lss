
Smart_home_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018c  00800060  00000f54  00000fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008001ec  008001ec  00001174  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000018c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001451  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d5  00000000  00000000  00002e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc4  00000000  00000000  0000342e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000041f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030f  00000000  00000000  0000443c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f0  00000000  00000000  0000474b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3e       	cpi	r26, 0xEC	; 236
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ac ee       	ldi	r26, 0xEC	; 236
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3f       	cpi	r26, 0xFF	; 255
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 70 06 	call	0xce0	; 0xce0 <main>
  8a:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_read>:
 *  Author: M
 */ 
#include "EEPROM.h"

uint8_t EEPROM_read(uint16_t add){
	while(GETBIT(EECR,EEWE)==1){};
  92:	2c b3       	in	r18, 0x1c	; 28
  94:	21 fd       	sbrc	r18, 1
  96:	fd cf       	rjmp	.-6      	; 0x92 <EEPROM_read>
		EEAR =add;
  98:	9f bb       	out	0x1f, r25	; 31
  9a:	8e bb       	out	0x1e, r24	; 30
		SETBIT(EECR,EERE);
  9c:	e0 9a       	sbi	0x1c, 0	; 28
		return EEDR;
  9e:	8d b3       	in	r24, 0x1d	; 29
}
  a0:	08 95       	ret

000000a2 <EEPROM_write>:
void EEPROM_write(uint16_t add , uint8_t data){ 
	while(GETBIT(EECR,EEWE)==1){};
  a2:	2c b3       	in	r18, 0x1c	; 28
  a4:	21 fd       	sbrc	r18, 1
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <EEPROM_write>
    EEAR =add;
  a8:	9f bb       	out	0x1f, r25	; 31
  aa:	8e bb       	out	0x1e, r24	; 30
	EEDR =data;
  ac:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR,EEMWE);
  ae:	e2 9a       	sbi	0x1c, 2	; 28
	SETBIT(EECR,EEWE);
  b0:	e1 9a       	sbi	0x1c, 1	; 28
}
  b2:	08 95       	ret

000000b4 <keypad_init>:
	'1','2','3','N',
	'N','0','N','N'
};
void keypad_init(){

	CLRBIT(DDRD,2);
  b4:	8a 98       	cbi	0x11, 2	; 17
	CLRBIT(DDRD,3);
  b6:	8b 98       	cbi	0x11, 3	; 17
	CLRBIT(DDRD,4);
  b8:	8c 98       	cbi	0x11, 4	; 17
	CLRBIT(DDRD,5);
  ba:	8d 98       	cbi	0x11, 5	; 17
	PORTD |= 0b00111100; // internal pull up in case of protues
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	8c 63       	ori	r24, 0x3C	; 60
  c0:	82 bb       	out	0x12, r24	; 18
	SETBIT(DDRB,0);
  c2:	b8 9a       	sbi	0x17, 0	; 23
	SETBIT(DDRB,1);
  c4:	b9 9a       	sbi	0x17, 1	; 23
	SETBIT(DDRB,2);
  c6:	ba 9a       	sbi	0x17, 2	; 23
	SETBIT(DDRB,3);
  c8:	bb 9a       	sbi	0x17, 3	; 23
}
  ca:	08 95       	ret

000000cc <keypad_read>:
int8_t keypad_read(){

	for(uint8_t i = 0; i < 4 ; i++){
  cc:	e0 e0       	ldi	r30, 0x00	; 0
		PORTB = PORTB & 0b11110000;
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 7f       	andi	r24, 0xF0	; 240
  d2:	88 bb       	out	0x18, r24	; 24
		if (i == 0) PORTB |= 0b00001110;
  d4:	ee 23       	and	r30, r30
  d6:	21 f4       	brne	.+8      	; 0xe0 <keypad_read+0x14>
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	8e 60       	ori	r24, 0x0E	; 14
  dc:	88 bb       	out	0x18, r24	; 24
  de:	0c c0       	rjmp	.+24     	; 0xf8 <keypad_read+0x2c>
		if (i == 1) PORTB |= 0b00001101;
  e0:	e1 30       	cpi	r30, 0x01	; 1
  e2:	21 f4       	brne	.+8      	; 0xec <keypad_read+0x20>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 60       	ori	r24, 0x0D	; 13
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	0b c0       	rjmp	.+22     	; 0x102 <keypad_read+0x36>
		if (i == 2) PORTB |= 0b00001011;
  ec:	e2 30       	cpi	r30, 0x02	; 2
  ee:	21 f4       	brne	.+8      	; 0xf8 <keypad_read+0x2c>
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	8b 60       	ori	r24, 0x0B	; 11
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	05 c0       	rjmp	.+10     	; 0x102 <keypad_read+0x36>
		if (i == 3) PORTB |= 0b00000111;
  f8:	e3 30       	cpi	r30, 0x03	; 3
  fa:	19 f4       	brne	.+6      	; 0x102 <keypad_read+0x36>
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	88 bb       	out	0x18, r24	; 24
		
		if (GETBIT(PIND,2) == 0) return keypad_matrix[0+4*i];
 102:	80 b3       	in	r24, 0x10	; 16
 104:	82 fd       	sbrc	r24, 2
 106:	09 c0       	rjmp	.+18     	; 0x11a <keypad_read+0x4e>
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 5a       	subi	r30, 0xA0	; 160
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	80 81       	ld	r24, Z
 118:	08 95       	ret
		if (GETBIT(PIND,3) == 0) return keypad_matrix[1+4*i];
 11a:	80 b3       	in	r24, 0x10	; 16
 11c:	83 fd       	sbrc	r24, 3
 11e:	09 c0       	rjmp	.+18     	; 0x132 <keypad_read+0x66>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	81 81       	ldd	r24, Z+1	; 0x01
 130:	08 95       	ret
		if (GETBIT(PIND,4) == 0) return keypad_matrix[2+4*i];
 132:	80 b3       	in	r24, 0x10	; 16
 134:	84 fd       	sbrc	r24, 4
 136:	09 c0       	rjmp	.+18     	; 0x14a <keypad_read+0x7e>
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	e0 5a       	subi	r30, 0xA0	; 160
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	08 95       	ret
		if (GETBIT(PIND,5) == 0) return keypad_matrix[3+4*i];
 14a:	80 b3       	in	r24, 0x10	; 16
 14c:	85 fd       	sbrc	r24, 5
 14e:	09 c0       	rjmp	.+18     	; 0x162 <keypad_read+0x96>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 5a       	subi	r30, 0xA0	; 160
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	83 81       	ldd	r24, Z+3	; 0x03
 160:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e9       	ldi	r24, 0x9F	; 159
 164:	9f e0       	ldi	r25, 0x0F	; 15
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <keypad_read+0x9a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <keypad_read+0xa0>
 16c:	00 00       	nop
	SETBIT(DDRB,2);
	SETBIT(DDRB,3);
}
int8_t keypad_read(){

	for(uint8_t i = 0; i < 4 ; i++){
 16e:	ef 5f       	subi	r30, 0xFF	; 255
 170:	e4 30       	cpi	r30, 0x04	; 4
 172:	09 f0       	breq	.+2      	; 0x176 <keypad_read+0xaa>
 174:	ac cf       	rjmp	.-168    	; 0xce <keypad_read+0x2>
		if (GETBIT(PIND,4) == 0) return keypad_matrix[2+4*i];
		if (GETBIT(PIND,5) == 0) return keypad_matrix[3+4*i];
		_delay_ms(1);
		
	}
	return -1;
 176:	8f ef       	ldi	r24, 0xFF	; 255

 178:	08 95       	ret

0000017a <LCD_write_command>:
_delay_ms(20);
LCD_write_command(0x0C);
}

void LCD_write_command(uint8_t cmd){
	 RS(0);
 17a:	d9 98       	cbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(cmd,4));
 17c:	98 2f       	mov	r25, r24
 17e:	92 95       	swap	r25
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	90 ff       	sbrs	r25, 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <LCD_write_command+0x10>
 186:	db 9a       	sbi	0x1b, 3	; 27
 188:	01 c0       	rjmp	.+2      	; 0x18c <LCD_write_command+0x12>
 18a:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,5));
 18c:	98 2f       	mov	r25, r24
 18e:	92 95       	swap	r25
 190:	96 95       	lsr	r25
 192:	97 70       	andi	r25, 0x07	; 7
 194:	90 ff       	sbrs	r25, 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <LCD_write_command+0x22>
 198:	dc 9a       	sbi	0x1b, 4	; 27
 19a:	01 c0       	rjmp	.+2      	; 0x19e <LCD_write_command+0x24>
 19c:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,6));
 19e:	98 2f       	mov	r25, r24
 1a0:	92 95       	swap	r25
 1a2:	96 95       	lsr	r25
 1a4:	96 95       	lsr	r25
 1a6:	93 70       	andi	r25, 0x03	; 3
 1a8:	90 ff       	sbrs	r25, 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <LCD_write_command+0x36>
 1ac:	dd 9a       	sbi	0x1b, 5	; 27
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <LCD_write_command+0x38>
 1b0:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,7));
 1b2:	88 23       	and	r24, r24
 1b4:	14 f4       	brge	.+4      	; 0x1ba <LCD_write_command+0x40>
 1b6:	de 9a       	sbi	0x1b, 6	; 27
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <LCD_write_command+0x42>
 1ba:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 1bc:	da 9a       	sbi	0x1b, 2	; 27
 1be:	ef e9       	ldi	r30, 0x9F	; 159
 1c0:	ff e0       	ldi	r31, 0x0F	; 15
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_write_command+0x48>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_write_command+0x4e>
 1c8:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 1ca:	da 98       	cbi	0x1b, 2	; 27
 1cc:	ef e9       	ldi	r30, 0x9F	; 159
 1ce:	ff e0       	ldi	r31, 0x0F	; 15
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_write_command+0x56>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <LCD_write_command+0x5c>
 1d6:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(cmd,0));
 1d8:	80 ff       	sbrs	r24, 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <LCD_write_command+0x66>
 1dc:	db 9a       	sbi	0x1b, 3	; 27
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <LCD_write_command+0x68>
 1e0:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,1));
 1e2:	98 2f       	mov	r25, r24
 1e4:	96 95       	lsr	r25
 1e6:	90 ff       	sbrs	r25, 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <LCD_write_command+0x74>
 1ea:	dc 9a       	sbi	0x1b, 4	; 27
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <LCD_write_command+0x76>
 1ee:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,2));
 1f0:	98 2f       	mov	r25, r24
 1f2:	96 95       	lsr	r25
 1f4:	96 95       	lsr	r25
 1f6:	90 ff       	sbrs	r25, 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <LCD_write_command+0x84>
 1fa:	dd 9a       	sbi	0x1b, 5	; 27
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <LCD_write_command+0x86>
 1fe:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,3));
 200:	86 95       	lsr	r24
 202:	86 95       	lsr	r24
 204:	86 95       	lsr	r24
 206:	80 ff       	sbrs	r24, 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <LCD_write_command+0x94>
 20a:	de 9a       	sbi	0x1b, 6	; 27
 20c:	01 c0       	rjmp	.+2      	; 0x210 <LCD_write_command+0x96>
 20e:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 210:	da 9a       	sbi	0x1b, 2	; 27
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_write_command+0x9c>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_write_command+0xa2>
 21c:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 21e:	da 98       	cbi	0x1b, 2	; 27
 220:	ef e9       	ldi	r30, 0x9F	; 159
 222:	ff e0       	ldi	r31, 0x0F	; 15
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_write_command+0xaa>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_write_command+0xb0>
 22a:	00 00       	nop
	 _delay_ms(1);
}
 22c:	08 95       	ret

0000022e <LCD_init>:
 *  Author: M
 */ 
#include "LCD.h"

void LCD_init (){
INIT_LCD();
 22e:	8a b3       	in	r24, 0x1a	; 26
 230:	8e 67       	ori	r24, 0x7E	; 126
 232:	8a bb       	out	0x1a, r24	; 26
LCD_write_command(0X3);
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 23a:	8f e7       	ldi	r24, 0x7F	; 127
 23c:	9e e3       	ldi	r25, 0x3E	; 62
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_init+0x10>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_init+0x16>
 244:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 24c:	af e7       	ldi	r26, 0x7F	; 127
 24e:	be e3       	ldi	r27, 0x3E	; 62
 250:	11 97       	sbiw	r26, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_init+0x22>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_init+0x28>
 256:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 25e:	8f e7       	ldi	r24, 0x7F	; 127
 260:	9e e3       	ldi	r25, 0x3E	; 62
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_init+0x34>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_init+0x3a>
 268:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X2);
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X28);
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X08);
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X01);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X06);
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	99 ef       	ldi	r25, 0xF9	; 249
 28c:	a0 e0       	ldi	r26, 0x00	; 0
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	a0 40       	sbci	r26, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <LCD_init+0x60>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_init+0x6a>
 298:	00 00       	nop
_delay_ms(20);
LCD_write_command(0x0C);
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
}
 2a0:	08 95       	ret

000002a2 <LCD_write_char>:
	 EN(0);
	 _delay_ms(1);
}

void LCD_write_char(uint8_t data){
	 RS(1);
 2a2:	d9 9a       	sbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(data,4));
 2a4:	98 2f       	mov	r25, r24
 2a6:	92 95       	swap	r25
 2a8:	9f 70       	andi	r25, 0x0F	; 15
 2aa:	90 ff       	sbrs	r25, 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <LCD_write_char+0x10>
 2ae:	db 9a       	sbi	0x1b, 3	; 27
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <LCD_write_char+0x12>
 2b2:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,5));
 2b4:	98 2f       	mov	r25, r24
 2b6:	92 95       	swap	r25
 2b8:	96 95       	lsr	r25
 2ba:	97 70       	andi	r25, 0x07	; 7
 2bc:	90 ff       	sbrs	r25, 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <LCD_write_char+0x22>
 2c0:	dc 9a       	sbi	0x1b, 4	; 27
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <LCD_write_char+0x24>
 2c4:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,6));
 2c6:	98 2f       	mov	r25, r24
 2c8:	92 95       	swap	r25
 2ca:	96 95       	lsr	r25
 2cc:	96 95       	lsr	r25
 2ce:	93 70       	andi	r25, 0x03	; 3
 2d0:	90 ff       	sbrs	r25, 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <LCD_write_char+0x36>
 2d4:	dd 9a       	sbi	0x1b, 5	; 27
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <LCD_write_char+0x38>
 2d8:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,7));
 2da:	88 23       	and	r24, r24
 2dc:	14 f4       	brge	.+4      	; 0x2e2 <LCD_write_char+0x40>
 2de:	de 9a       	sbi	0x1b, 6	; 27
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <LCD_write_char+0x42>
 2e2:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 2e4:	da 9a       	sbi	0x1b, 2	; 27
 2e6:	ef e9       	ldi	r30, 0x9F	; 159
 2e8:	ff e0       	ldi	r31, 0x0F	; 15
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_write_char+0x48>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_write_char+0x4e>
 2f0:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 2f2:	da 98       	cbi	0x1b, 2	; 27
 2f4:	ef e9       	ldi	r30, 0x9F	; 159
 2f6:	ff e0       	ldi	r31, 0x0F	; 15
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_write_char+0x56>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_write_char+0x5c>
 2fe:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(data,0));
 300:	80 ff       	sbrs	r24, 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <LCD_write_char+0x66>
 304:	db 9a       	sbi	0x1b, 3	; 27
 306:	01 c0       	rjmp	.+2      	; 0x30a <LCD_write_char+0x68>
 308:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,1));
 30a:	98 2f       	mov	r25, r24
 30c:	96 95       	lsr	r25
 30e:	90 ff       	sbrs	r25, 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <LCD_write_char+0x74>
 312:	dc 9a       	sbi	0x1b, 4	; 27
 314:	01 c0       	rjmp	.+2      	; 0x318 <LCD_write_char+0x76>
 316:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,2));
 318:	98 2f       	mov	r25, r24
 31a:	96 95       	lsr	r25
 31c:	96 95       	lsr	r25
 31e:	90 ff       	sbrs	r25, 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <LCD_write_char+0x84>
 322:	dd 9a       	sbi	0x1b, 5	; 27
 324:	01 c0       	rjmp	.+2      	; 0x328 <LCD_write_char+0x86>
 326:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,3));
 328:	86 95       	lsr	r24
 32a:	86 95       	lsr	r24
 32c:	86 95       	lsr	r24
 32e:	80 ff       	sbrs	r24, 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <LCD_write_char+0x94>
 332:	de 9a       	sbi	0x1b, 6	; 27
 334:	01 c0       	rjmp	.+2      	; 0x338 <LCD_write_char+0x96>
 336:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 338:	da 9a       	sbi	0x1b, 2	; 27
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_write_char+0x9c>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_write_char+0xa2>
 344:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 346:	da 98       	cbi	0x1b, 2	; 27
 348:	ef e9       	ldi	r30, 0x9F	; 159
 34a:	ff e0       	ldi	r31, 0x0F	; 15
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_write_char+0xaa>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_write_char+0xb0>
 352:	00 00       	nop
	 _delay_ms(1);
}
 354:	08 95       	ret

00000356 <LCD_write_string>:
void LCD_write_string(uint8_t txt[]){
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	8c 01       	movw	r16, r24
	for (uint8_t i=0;txt[i]!='\0';i++){
 35e:	fc 01       	movw	r30, r24
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	51 f0       	breq	.+20     	; 0x37a <LCD_write_string+0x24>
 366:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_char(txt[i]);
 368:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
	 _delay_ms(1);
	 EN(0);
	 _delay_ms(1);
}
void LCD_write_string(uint8_t txt[]){
	for (uint8_t i=0;txt[i]!='\0';i++){
 36c:	cf 5f       	subi	r28, 0xFF	; 255
 36e:	f8 01       	movw	r30, r16
 370:	ec 0f       	add	r30, r28
 372:	f1 1d       	adc	r31, r1
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	b9 f7       	brne	.-18     	; 0x368 <LCD_write_string+0x12>
		LCD_write_char(txt[i]);
	}
}
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <LCD_write_num>:
void LCD_write_num(uint32_t num){
 382:	8f 92       	push	r8
 384:	9f 92       	push	r9
 386:	af 92       	push	r10
 388:	bf 92       	push	r11
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	2a 97       	sbiw	r28, 0x0a	; 10
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	dc 01       	movw	r26, r24
 3a6:	cb 01       	movw	r24, r22
uint8_t txt[10] = {0};
 3a8:	ae 01       	movw	r20, r28
 3aa:	4f 5f       	subi	r20, 0xFF	; 255
 3ac:	5f 4f       	sbci	r21, 0xFF	; 255
 3ae:	2a e0       	ldi	r18, 0x0A	; 10
 3b0:	fa 01       	movw	r30, r20
 3b2:	11 92       	st	Z+, r1
 3b4:	2a 95       	dec	r18
 3b6:	e9 f7       	brne	.-6      	; 0x3b2 <LCD_write_num+0x30>
int8_t i = 0;
if(num == 0) {
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	a1 05       	cpc	r26, r1
 3bc:	b1 05       	cpc	r27, r1
 3be:	21 f4       	brne	.+8      	; 0x3c8 <LCD_write_num+0x46>
	LCD_write_char('0');
 3c0:	80 e3       	ldi	r24, 0x30	; 48
 3c2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
	return;
 3c6:	38 c0       	rjmp	.+112    	; 0x438 <LCD_write_num+0xb6>
	}
}
void LCD_write_num(uint32_t num){
uint8_t txt[10] = {0};
int8_t i = 0;
if(num == 0) {
 3c8:	10 e0       	ldi	r17, 0x00	; 0
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
{
	txt[i] = num%10 + 48;
 3ca:	0f 2e       	mov	r0, r31
 3cc:	fa e0       	ldi	r31, 0x0A	; 10
 3ce:	8f 2e       	mov	r8, r31
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	9f 2e       	mov	r9, r31
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	af 2e       	mov	r10, r31
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	bf 2e       	mov	r11, r31
 3dc:	f0 2d       	mov	r31, r0
 3de:	e1 2e       	mov	r14, r17
 3e0:	ff 24       	eor	r15, r15
 3e2:	e7 fc       	sbrc	r14, 7
 3e4:	f0 94       	com	r15
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	2c 0f       	add	r18, r28
 3ec:	3d 1f       	adc	r19, r29
 3ee:	e2 0e       	add	r14, r18
 3f0:	f3 1e       	adc	r15, r19
 3f2:	bc 01       	movw	r22, r24
 3f4:	cd 01       	movw	r24, r26
 3f6:	a5 01       	movw	r20, r10
 3f8:	94 01       	movw	r18, r8
 3fa:	0e 94 86 07 	call	0xf0c	; 0xf0c <__udivmodsi4>
 3fe:	60 5d       	subi	r22, 0xD0	; 208
 400:	f7 01       	movw	r30, r14
 402:	60 83       	st	Z, r22
	num = num  / 10 ;
 404:	82 2f       	mov	r24, r18
 406:	93 2f       	mov	r25, r19
 408:	a4 2f       	mov	r26, r20
 40a:	b5 2f       	mov	r27, r21
int8_t i = 0;
if(num == 0) {
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
 40c:	1f 5f       	subi	r17, 0xFF	; 255
 40e:	00 97       	sbiw	r24, 0x00	; 0
 410:	a1 05       	cpc	r26, r1
 412:	b1 05       	cpc	r27, r1
 414:	21 f7       	brne	.-56     	; 0x3de <LCD_write_num+0x5c>
{
	txt[i] = num%10 + 48;
	num = num  / 10 ;
}
i--;
 416:	11 50       	subi	r17, 0x01	; 1
while(i >= 0){
 418:	7a f0       	brmi	.+30     	; 0x438 <LCD_write_num+0xb6>
	LCD_write_char(txt[i]);
 41a:	e1 2f       	mov	r30, r17
 41c:	ff 27       	eor	r31, r31
 41e:	e7 fd       	sbrc	r30, 7
 420:	f0 95       	com	r31
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	2c 0f       	add	r18, r28
 428:	3d 1f       	adc	r19, r29
 42a:	e2 0f       	add	r30, r18
 42c:	f3 1f       	adc	r31, r19
 42e:	80 81       	ld	r24, Z
 430:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
	i--;
 434:	11 50       	subi	r17, 0x01	; 1
 436:	88 f7       	brcc	.-30     	; 0x41a <LCD_write_num+0x98>
}
 438:	2a 96       	adiw	r28, 0x0a	; 10
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	bf 90       	pop	r11
 450:	af 90       	pop	r10
 452:	9f 90       	pop	r9
 454:	8f 90       	pop	r8
 456:	08 95       	ret

00000458 <__vector_11>:
	SETBIT(TIMSK,TOIE0);
	guest_display();
	count=5;	

}
ISR(TIMER0_OVF_vect){
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
	
	static uint8_t admin_mode = 0;
	static uint8_t guest_mode = 0;
	admin_mode++;
 466:	80 91 f4 01 	lds	r24, 0x01F4
 46a:	8f 5f       	subi	r24, 0xFF	; 255
 46c:	80 93 f4 01 	sts	0x01F4, r24
	guest_mode++;
 470:	90 91 f5 01 	lds	r25, 0x01F5
 474:	9f 5f       	subi	r25, 0xFF	; 255
 476:	90 93 f5 01 	sts	0x01F5, r25
	if (admin_mode==255 && state==0)			// 1.5sec
 47a:	8f 3f       	cpi	r24, 0xFF	; 255
 47c:	a1 f4       	brne	.+40     	; 0x4a6 <__vector_11+0x4e>
 47e:	80 91 ec 01 	lds	r24, 0x01EC
 482:	88 23       	and	r24, r24
 484:	81 f4       	brne	.+32     	; 0x4a6 <__vector_11+0x4e>
	{
		
		TOGBIT(PORTC,0);
 486:	95 b3       	in	r25, 0x15	; 21
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	89 27       	eor	r24, r25
 48c:	85 bb       	out	0x15, r24	; 21
		admin_mode=0;
 48e:	10 92 f4 01 	sts	0x01F4, r1
		guest_mode=0;
 492:	10 92 f5 01 	sts	0x01F5, r1
		count=0;
 496:	10 92 f1 01 	sts	0x01F1, r1
		start_msg=0;
 49a:	10 92 f2 01 	sts	0x01F2, r1
		CLRBIT(TIMSK,TOIE0);
 49e:	89 b7       	in	r24, 0x39	; 57
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	89 bf       	out	0x39, r24	; 57
 4a4:	12 c0       	rjmp	.+36     	; 0x4ca <__vector_11+0x72>
	}
	else if (guest_mode==255 && state==1)	// 1.5sec
 4a6:	9f 3f       	cpi	r25, 0xFF	; 255
 4a8:	81 f4       	brne	.+32     	; 0x4ca <__vector_11+0x72>
 4aa:	80 91 ec 01 	lds	r24, 0x01EC
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	61 f4       	brne	.+24     	; 0x4ca <__vector_11+0x72>
	{
		
		CLRBIT(PORTC,2);
 4b2:	aa 98       	cbi	0x15, 2	; 21
		admin_mode=0;
 4b4:	10 92 f4 01 	sts	0x01F4, r1
		guest_mode=0;
 4b8:	10 92 f5 01 	sts	0x01F5, r1
		count=0;
 4bc:	10 92 f1 01 	sts	0x01F1, r1
		start_msg=0;
 4c0:	10 92 f2 01 	sts	0x01F2, r1
		CLRBIT(TIMSK,TOIE0);
 4c4:	89 b7       	in	r24, 0x39	; 57
 4c6:	8e 7f       	andi	r24, 0xFE	; 254
 4c8:	89 bf       	out	0x39, r24	; 57
	}
}
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <admin_display>:
void admin_display(){
	LCD_write_command(1);
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("1>Room1");
 4de:	80 e7       	ldi	r24, 0x70	; 112
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0x88);
 4e6:	88 e8       	ldi	r24, 0x88	; 136
 4e8:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("2>Room2");
 4ec:	88 e7       	ldi	r24, 0x78	; 120
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc0);
 4f4:	80 ec       	ldi	r24, 0xC0	; 192
 4f6:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("3>Room3");
 4fa:	80 e8       	ldi	r24, 0x80	; 128
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc8);
 502:	88 ec       	ldi	r24, 0xC8	; 200
 504:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("4>More");
 508:	88 e8       	ldi	r24, 0x88	; 136
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
}
 510:	08 95       	ret

00000512 <ADMIN>:
		}
	
	}
}
void ADMIN(){
	SETBIT(PORTC,0);
 512:	a8 9a       	sbi	0x15, 0	; 21
	SETBIT(TIMSK,TOIE0);
 514:	89 b7       	in	r24, 0x39	; 57
 516:	81 60       	ori	r24, 0x01	; 1
 518:	89 bf       	out	0x39, r24	; 57
	admin_display();
 51a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>
	count=5;
 51e:	85 e0       	ldi	r24, 0x05	; 5
 520:	80 93 f1 01 	sts	0x01F1, r24
	
}
 524:	08 95       	ret

00000526 <admin_display2>:
	LCD_write_string("3>Room3");
	LCD_write_command(0xc8);
	LCD_write_string("4>More");
}
void admin_display2(){
	LCD_write_command(1);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("4>Room4");
 52c:	8f e8       	ldi	r24, 0x8F	; 143
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0x88);
 534:	88 e8       	ldi	r24, 0x88	; 136
 536:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("5>TV");
 53a:	87 e9       	ldi	r24, 0x97	; 151
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc0);
 542:	80 ec       	ldi	r24, 0xC0	; 192
 544:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("6>COND");
 548:	8c e9       	ldi	r24, 0x9C	; 156
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc8);
 550:	88 ec       	ldi	r24, 0xC8	; 200
 552:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("7>back");
 556:	83 ea       	ldi	r24, 0xA3	; 163
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
}
 55e:	08 95       	ret

00000560 <guest_display>:
void guest_display(){
	LCD_write_command(1);
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("1>Room1");
 566:	80 e7       	ldi	r24, 0x70	; 112
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0x88);
 56e:	88 e8       	ldi	r24, 0x88	; 136
 570:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("2>Room2");
 574:	88 e7       	ldi	r24, 0x78	; 120
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc0);
 57c:	80 ec       	ldi	r24, 0xC0	; 192
 57e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("3>Room3");
 582:	80 e8       	ldi	r24, 0x80	; 128
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc8);
 58a:	88 ec       	ldi	r24, 0xC8	; 200
 58c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("4>Room4");
 590:	8f e8       	ldi	r24, 0x8F	; 143
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 598:	08 95       	ret

0000059a <GUEST>:
	admin_display();
	count=5;
	
}
void GUEST(){
	SETBIT(PORTC,2);
 59a:	aa 9a       	sbi	0x15, 2	; 21
	SETBIT(TIMSK,TOIE0);
 59c:	89 b7       	in	r24, 0x39	; 57
 59e:	81 60       	ori	r24, 0x01	; 1
 5a0:	89 bf       	out	0x39, r24	; 57
	guest_display();
 5a2:	0e 94 b0 02 	call	0x560	; 0x560 <guest_display>
	count=5;	
 5a6:	85 e0       	ldi	r24, 0x05	; 5
 5a8:	80 93 f1 01 	sts	0x01F1, r24

}
 5ac:	08 95       	ret

000005ae <get_password>:
		
	}
}

void get_password ()
{
 5ae:	cf 93       	push	r28
	int8_t key=keypad_read();
 5b0:	0e 94 66 00 	call	0xcc	; 0xcc <keypad_read>
 5b4:	c8 2f       	mov	r28, r24
	if(key != -1 && key!='N'){
 5b6:	8f 3f       	cpi	r24, 0xFF	; 255
 5b8:	09 f4       	brne	.+2      	; 0x5bc <get_password+0xe>
 5ba:	90 c3       	rjmp	.+1824   	; 0xcdc <__stack+0x47d>
 5bc:	8e 34       	cpi	r24, 0x4E	; 78
 5be:	09 f4       	brne	.+2      	; 0x5c2 <get_password+0x14>
 5c0:	8d c3       	rjmp	.+1818   	; 0xcdc <__stack+0x47d>
		switch (count)
 5c2:	80 91 f1 01 	lds	r24, 0x01F1
 5c6:	83 30       	cpi	r24, 0x03	; 3
 5c8:	09 f4       	brne	.+2      	; 0x5cc <get_password+0x1e>
 5ca:	8c c0       	rjmp	.+280    	; 0x6e4 <get_password+0x136>
 5cc:	84 30       	cpi	r24, 0x04	; 4
 5ce:	38 f4       	brcc	.+14     	; 0x5de <get_password+0x30>
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <get_password+0x28>
 5d4:	4b c0       	rjmp	.+150    	; 0x66c <get_password+0xbe>
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	08 f0       	brcs	.+2      	; 0x5dc <get_password+0x2e>
 5da:	66 c0       	rjmp	.+204    	; 0x6a8 <get_password+0xfa>
 5dc:	0a c0       	rjmp	.+20     	; 0x5f2 <get_password+0x44>
 5de:	85 30       	cpi	r24, 0x05	; 5
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <get_password+0x36>
 5e2:	d1 c1       	rjmp	.+930    	; 0x986 <__stack+0x127>
 5e4:	85 30       	cpi	r24, 0x05	; 5
 5e6:	08 f4       	brcc	.+2      	; 0x5ea <get_password+0x3c>
 5e8:	9b c0       	rjmp	.+310    	; 0x720 <get_password+0x172>
 5ea:	86 30       	cpi	r24, 0x06	; 6
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <get_password+0x42>
 5ee:	76 c3       	rjmp	.+1772   	; 0xcdc <__stack+0x47d>
 5f0:	02 c3       	rjmp	.+1540   	; 0xbf6 <__stack+0x397>
		{
			case 0 :
			if (key-48==0)
 5f2:	c0 33       	cpi	r28, 0x30	; 48
 5f4:	61 f4       	brne	.+24     	; 0x60e <get_password+0x60>
			{
				//block_mode=0;
				//EEPROM_write(30,0);
				state=0;
 5f6:	10 92 ec 01 	sts	0x01EC, r1
				count++;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 93 f1 01 	sts	0x01F1, r24
				LCD_write_command(1);
 600:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Admin password");
 604:	8a ea       	ldi	r24, 0xAA	; 170
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 60c:	25 c0       	rjmp	.+74     	; 0x658 <get_password+0xaa>
				
			}
			else if (key-48==1)
 60e:	c1 33       	cpi	r28, 0x31	; 49
 610:	61 f4       	brne	.+24     	; 0x62a <get_password+0x7c>
			{
				//block_mode=0;
				//EEPROM_write(30,0);
				state=1;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	80 93 ec 01 	sts	0x01EC, r24
				count++;
 618:	80 93 f1 01 	sts	0x01F1, r24
				LCD_write_command(1);
 61c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Guest password");
 620:	89 eb       	ldi	r24, 0xB9	; 185
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 628:	17 c0       	rjmp	.+46     	; 0x658 <get_password+0xaa>
				
			}
			else {
				LCD_write_command(1);
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("wrong entry");
 630:	88 ec       	ldi	r24, 0xC8	; 200
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	93 ec       	ldi	r25, 0xC3	; 195
 63c:	a9 e0       	ldi	r26, 0x09	; 9
 63e:	81 50       	subi	r24, 0x01	; 1
 640:	90 40       	sbci	r25, 0x00	; 0
 642:	a0 40       	sbci	r26, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <get_password+0x90>
 646:	00 c0       	rjmp	.+0      	; 0x648 <get_password+0x9a>
 648:	00 00       	nop
				_delay_ms(200);
				LCD_write_command(1);
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("0>admin&1>guest ");
 650:	84 ed       	ldi	r24, 0xD4	; 212
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	93 ec       	ldi	r25, 0xC3	; 195
 65c:	a9 e0       	ldi	r26, 0x09	; 9
 65e:	81 50       	subi	r24, 0x01	; 1
 660:	90 40       	sbci	r25, 0x00	; 0
 662:	a0 40       	sbci	r26, 0x00	; 0
 664:	e1 f7       	brne	.-8      	; 0x65e <get_password+0xb0>
 666:	00 c0       	rjmp	.+0      	; 0x668 <get_password+0xba>
 668:	00 00       	nop
 66a:	38 c3       	rjmp	.+1648   	; 0xcdc <__stack+0x47d>
			}
			_delay_ms(200);
			break;
			case 1 :
			LCD_write_command(0xc3);
 66c:	83 ec       	ldi	r24, 0xC3	; 195
 66e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 672:	8c 2f       	mov	r24, r28
 674:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	91 ee       	ldi	r25, 0xE1	; 225
 67c:	a4 e0       	ldi	r26, 0x04	; 4
 67e:	81 50       	subi	r24, 0x01	; 1
 680:	90 40       	sbci	r25, 0x00	; 0
 682:	a0 40       	sbci	r26, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <get_password+0xd0>
 686:	00 c0       	rjmp	.+0      	; 0x688 <get_password+0xda>
 688:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc3);
 68a:	83 ec       	ldi	r24, 0xC3	; 195
 68c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 690:	8a e2       	ldi	r24, 0x2A	; 42
 692:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			c1=key-48;   // first digit of entered password from user
 696:	c0 53       	subi	r28, 0x30	; 48
 698:	c0 93 fd 01 	sts	0x01FD, r28
			count++;
 69c:	80 91 f1 01 	lds	r24, 0x01F1
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	80 93 f1 01 	sts	0x01F1, r24
			break;
 6a6:	1a c3       	rjmp	.+1588   	; 0xcdc <__stack+0x47d>
			case 2 :
			LCD_write_command(0xc4);
 6a8:	84 ec       	ldi	r24, 0xC4	; 196
 6aa:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 6ae:	8c 2f       	mov	r24, r28
 6b0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 6b4:	8f ef       	ldi	r24, 0xFF	; 255
 6b6:	91 ee       	ldi	r25, 0xE1	; 225
 6b8:	a4 e0       	ldi	r26, 0x04	; 4
 6ba:	81 50       	subi	r24, 0x01	; 1
 6bc:	90 40       	sbci	r25, 0x00	; 0
 6be:	a0 40       	sbci	r26, 0x00	; 0
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <get_password+0x10c>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <get_password+0x116>
 6c4:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc4);
 6c6:	84 ec       	ldi	r24, 0xC4	; 196
 6c8:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 6cc:	8a e2       	ldi	r24, 0x2A	; 42
 6ce:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			c2=key-48;  // second digit of entered password from user
 6d2:	c0 53       	subi	r28, 0x30	; 48
 6d4:	c0 93 fa 01 	sts	0x01FA, r28
			count++;
 6d8:	80 91 f1 01 	lds	r24, 0x01F1
 6dc:	8f 5f       	subi	r24, 0xFF	; 255
 6de:	80 93 f1 01 	sts	0x01F1, r24
			break;
 6e2:	fc c2       	rjmp	.+1528   	; 0xcdc <__stack+0x47d>
			case 3 :
			LCD_write_command(0xc5);
 6e4:	85 ec       	ldi	r24, 0xC5	; 197
 6e6:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 6ea:	8c 2f       	mov	r24, r28
 6ec:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	91 ee       	ldi	r25, 0xE1	; 225
 6f4:	a4 e0       	ldi	r26, 0x04	; 4
 6f6:	81 50       	subi	r24, 0x01	; 1
 6f8:	90 40       	sbci	r25, 0x00	; 0
 6fa:	a0 40       	sbci	r26, 0x00	; 0
 6fc:	e1 f7       	brne	.-8      	; 0x6f6 <get_password+0x148>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <get_password+0x152>
 700:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc5);
 702:	85 ec       	ldi	r24, 0xC5	; 197
 704:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 708:	8a e2       	ldi	r24, 0x2A	; 42
 70a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			c3=key-48;   // third digit of entered password from user
 70e:	c0 53       	subi	r28, 0x30	; 48
 710:	c0 93 fe 01 	sts	0x01FE, r28
			count++;
 714:	80 91 f1 01 	lds	r24, 0x01F1
 718:	8f 5f       	subi	r24, 0xFF	; 255
 71a:	80 93 f1 01 	sts	0x01F1, r24
			break;
 71e:	de c2       	rjmp	.+1468   	; 0xcdc <__stack+0x47d>
			case 4 :
			LCD_write_command(0xc6);
 720:	86 ec       	ldi	r24, 0xC6	; 198
 722:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 726:	8c 2f       	mov	r24, r28
 728:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 72c:	8f ef       	ldi	r24, 0xFF	; 255
 72e:	91 ee       	ldi	r25, 0xE1	; 225
 730:	a4 e0       	ldi	r26, 0x04	; 4
 732:	81 50       	subi	r24, 0x01	; 1
 734:	90 40       	sbci	r25, 0x00	; 0
 736:	a0 40       	sbci	r26, 0x00	; 0
 738:	e1 f7       	brne	.-8      	; 0x732 <get_password+0x184>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <get_password+0x18e>
 73c:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc6);
 73e:	86 ec       	ldi	r24, 0xC6	; 198
 740:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 744:	8a e2       	ldi	r24, 0x2A	; 42
 746:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			LCD_write_command(1);
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			c4=key-48;  // forth digit of entered password from user
 750:	c0 53       	subi	r28, 0x30	; 48
 752:	c0 93 f9 01 	sts	0x01F9, r28
			
			if (( c1==a1&&c2==a2&&c3==a3&&c4==a4) && state==0 && initial==0){
 756:	60 91 fd 01 	lds	r22, 0x01FD
 75a:	80 91 ea 01 	lds	r24, 0x01EA
 75e:	68 17       	cp	r22, r24
 760:	11 f5       	brne	.+68     	; 0x7a6 <get_password+0x1f8>
 762:	90 91 fa 01 	lds	r25, 0x01FA
 766:	80 91 e9 01 	lds	r24, 0x01E9
 76a:	98 17       	cp	r25, r24
 76c:	e1 f4       	brne	.+56     	; 0x7a6 <get_password+0x1f8>
 76e:	90 91 fe 01 	lds	r25, 0x01FE
 772:	80 91 e8 01 	lds	r24, 0x01E8
 776:	98 17       	cp	r25, r24
 778:	b1 f4       	brne	.+44     	; 0x7a6 <get_password+0x1f8>
 77a:	80 91 e7 01 	lds	r24, 0x01E7
 77e:	c8 17       	cp	r28, r24
 780:	91 f4       	brne	.+36     	; 0x7a6 <get_password+0x1f8>
 782:	80 91 ec 01 	lds	r24, 0x01EC
 786:	88 23       	and	r24, r24
 788:	71 f4       	brne	.+28     	; 0x7a6 <get_password+0x1f8>
 78a:	80 91 f0 01 	lds	r24, 0x01F0
 78e:	88 23       	and	r24, r24
 790:	51 f4       	brne	.+20     	; 0x7a6 <get_password+0x1f8>
				/*call function to enter admin mode */
				key=-1;
				ADMIN();
 792:	0e 94 89 02 	call	0x512	; 0x512 <ADMIN>
				block_mode=0;
 796:	10 92 fb 01 	sts	0x01FB, r1
				EEPROM_write(30,0);
 79a:	8e e1       	ldi	r24, 0x1E	; 30
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				key=-1;
 7a4:	9b c2       	rjmp	.+1334   	; 0xcdc <__stack+0x47d>
			}
			else if (( c1==g1&&c2==g2&&c3==g3&&c4==g4)&& state==1 && initial==0 ){
 7a6:	80 91 f8 01 	lds	r24, 0x01F8
 7aa:	68 17       	cp	r22, r24
 7ac:	11 f5       	brne	.+68     	; 0x7f2 <get_password+0x244>
 7ae:	90 91 fa 01 	lds	r25, 0x01FA
 7b2:	80 91 fc 01 	lds	r24, 0x01FC
 7b6:	98 17       	cp	r25, r24
 7b8:	e1 f4       	brne	.+56     	; 0x7f2 <get_password+0x244>
 7ba:	90 91 fe 01 	lds	r25, 0x01FE
 7be:	80 91 f7 01 	lds	r24, 0x01F7
 7c2:	98 17       	cp	r25, r24
 7c4:	b1 f4       	brne	.+44     	; 0x7f2 <get_password+0x244>
 7c6:	80 91 f6 01 	lds	r24, 0x01F6
 7ca:	c8 17       	cp	r28, r24
 7cc:	91 f4       	brne	.+36     	; 0x7f2 <get_password+0x244>
 7ce:	80 91 ec 01 	lds	r24, 0x01EC
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	71 f4       	brne	.+28     	; 0x7f2 <get_password+0x244>
 7d6:	80 91 f0 01 	lds	r24, 0x01F0
 7da:	88 23       	and	r24, r24
 7dc:	51 f4       	brne	.+20     	; 0x7f2 <get_password+0x244>
				/*call function to enter guest mode */
				key=-1;
				GUEST();
 7de:	0e 94 cd 02 	call	0x59a	; 0x59a <GUEST>
				block_mode=0;
 7e2:	10 92 fb 01 	sts	0x01FB, r1
				EEPROM_write(30,0);
 7e6:	8e e1       	ldi	r24, 0x1E	; 30
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				key=-1;
 7f0:	75 c2       	rjmp	.+1258   	; 0xcdc <__stack+0x47d>
			}
			else if (initial==1 && state==0 ){
 7f2:	80 91 f0 01 	lds	r24, 0x01F0
 7f6:	81 30       	cpi	r24, 0x01	; 1
 7f8:	31 f5       	brne	.+76     	; 0x846 <get_password+0x298>
 7fa:	80 91 ec 01 	lds	r24, 0x01EC
 7fe:	88 23       	and	r24, r24
 800:	09 f0       	breq	.+2      	; 0x804 <get_password+0x256>
 802:	5a c0       	rjmp	.+180    	; 0x8b8 <__stack+0x59>
				EEPROM_write(20,c1);
 804:	84 e1       	ldi	r24, 0x14	; 20
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(21,c2);
 80c:	85 e1       	ldi	r24, 0x15	; 21
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	60 91 fa 01 	lds	r22, 0x01FA
 814:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(22,c3);
 818:	86 e1       	ldi	r24, 0x16	; 22
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	60 91 fe 01 	lds	r22, 0x01FE
 820:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(23,c4);
 824:	87 e1       	ldi	r24, 0x17	; 23
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	60 91 f9 01 	lds	r22, 0x01F9
 82c:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(24,15);
 830:	88 e1       	ldi	r24, 0x18	; 24
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	6f e0       	ldi	r22, 0x0F	; 15
 836:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				initial++;
 83a:	80 91 f0 01 	lds	r24, 0x01F0
 83e:	8f 5f       	subi	r24, 0xFF	; 255
 840:	80 93 f0 01 	sts	0x01F0, r24
 844:	4b c2       	rjmp	.+1174   	; 0xcdc <__stack+0x47d>
				
			}
			else if (initial==3&& state==1 ){
 846:	83 30       	cpi	r24, 0x03	; 3
 848:	b9 f5       	brne	.+110    	; 0x8b8 <__stack+0x59>
 84a:	80 91 ec 01 	lds	r24, 0x01EC
 84e:	81 30       	cpi	r24, 0x01	; 1
 850:	99 f5       	brne	.+102    	; 0x8b8 <__stack+0x59>
				EEPROM_write(25,c1);
 852:	89 e1       	ldi	r24, 0x19	; 25
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(26,c2);
 85a:	8a e1       	ldi	r24, 0x1A	; 26
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	60 91 fa 01 	lds	r22, 0x01FA
 862:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(27,c3);
 866:	8b e1       	ldi	r24, 0x1B	; 27
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	60 91 fe 01 	lds	r22, 0x01FE
 86e:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(28,c4);
 872:	8c e1       	ldi	r24, 0x1C	; 28
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	60 91 f9 01 	lds	r22, 0x01F9
 87a:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(29,15);
 87e:	8d e1       	ldi	r24, 0x1D	; 29
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	6f e0       	ldi	r22, 0x0F	; 15
 884:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				initial++;
 888:	80 91 f0 01 	lds	r24, 0x01F0
 88c:	8f 5f       	subi	r24, 0xFF	; 255
 88e:	80 93 f0 01 	sts	0x01F0, r24
				LCD_write_command(1);
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Now Restart :)");
 898:	85 ee       	ldi	r24, 0xE5	; 229
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	99 e6       	ldi	r25, 0x69	; 105
 8a4:	a8 e1       	ldi	r26, 0x18	; 24
 8a6:	81 50       	subi	r24, 0x01	; 1
 8a8:	90 40       	sbci	r25, 0x00	; 0
 8aa:	a0 40       	sbci	r26, 0x00	; 0
 8ac:	e1 f7       	brne	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <__stack+0x51>
 8b0:	00 00       	nop
				_delay_ms(500);
				start_msg=0;
 8b2:	10 92 f2 01 	sts	0x01F2, r1
 8b6:	12 c2       	rjmp	.+1060   	; 0xcdc <__stack+0x47d>
			}
			
			else {
				block_mode++;
 8b8:	80 91 fb 01 	lds	r24, 0x01FB
 8bc:	8f 5f       	subi	r24, 0xFF	; 255
 8be:	80 93 fb 01 	sts	0x01FB, r24
				LCD_write_command(1);
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Wrong password");
 8c8:	84 ef       	ldi	r24, 0xF4	; 244
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 8d0:	8f ef       	ldi	r24, 0xFF	; 255
 8d2:	92 e5       	ldi	r25, 0x52	; 82
 8d4:	a7 e0       	ldi	r26, 0x07	; 7
 8d6:	81 50       	subi	r24, 0x01	; 1
 8d8:	90 40       	sbci	r25, 0x00	; 0
 8da:	a0 40       	sbci	r26, 0x00	; 0
 8dc:	e1 f7       	brne	.-8      	; 0x8d6 <__stack+0x77>
 8de:	00 c0       	rjmp	.+0      	; 0x8e0 <__stack+0x81>
 8e0:	00 00       	nop
				_delay_ms(150);
				LCD_write_command(1);
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_num(3-block_mode);
 8e8:	80 91 fb 01 	lds	r24, 0x01FB
 8ec:	63 e0       	ldi	r22, 0x03	; 3
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	68 1b       	sub	r22, r24
 8f2:	71 09       	sbc	r23, r1
 8f4:	88 27       	eor	r24, r24
 8f6:	77 fd       	sbrc	r23, 7
 8f8:	80 95       	com	r24
 8fa:	98 2f       	mov	r25, r24
 8fc:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_write_num>
				LCD_write_string(" Tries left");
 900:	83 e0       	ldi	r24, 0x03	; 3
 902:	91 e0       	ldi	r25, 0x01	; 1
 904:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				EEPROM_write(30,block_mode);
 908:	8e e1       	ldi	r24, 0x1E	; 30
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	60 91 fb 01 	lds	r22, 0x01FB
 910:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
 914:	8f ef       	ldi	r24, 0xFF	; 255
 916:	91 ee       	ldi	r25, 0xE1	; 225
 918:	a4 e0       	ldi	r26, 0x04	; 4
 91a:	81 50       	subi	r24, 0x01	; 1
 91c:	90 40       	sbci	r25, 0x00	; 0
 91e:	a0 40       	sbci	r26, 0x00	; 0
 920:	e1 f7       	brne	.-8      	; 0x91a <__stack+0xbb>
 922:	00 c0       	rjmp	.+0      	; 0x924 <__stack+0xc5>
 924:	00 00       	nop
				_delay_ms(100);
				count=1;
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	80 93 f1 01 	sts	0x01F1, r24
				if(block_mode==3){
 92c:	80 91 fb 01 	lds	r24, 0x01FB
 930:	83 30       	cpi	r24, 0x03	; 3
 932:	09 f0       	breq	.+2      	; 0x936 <__stack+0xd7>
 934:	d3 c1       	rjmp	.+934    	; 0xcdc <__stack+0x47d>
				SETBIT(PORTC,4);
 936:	ac 9a       	sbi	0x15, 4	; 21
				LCD_write_command(1);
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("you are blocked");
 93e:	8f e0       	ldi	r24, 0x0F	; 15
 940:	91 e0       	ldi	r25, 0x01	; 1
 942:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 946:	80 ec       	ldi	r24, 0xC0	; 192
 948:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("for 20 sec");
 94c:	8f e1       	ldi	r24, 0x1F	; 31
 94e:	91 e0       	ldi	r25, 0x01	; 1
 950:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 954:	8f ef       	ldi	r24, 0xFF	; 255
 956:	97 ea       	ldi	r25, 0xA7	; 167
 958:	a1 e6       	ldi	r26, 0x61	; 97
 95a:	81 50       	subi	r24, 0x01	; 1
 95c:	90 40       	sbci	r25, 0x00	; 0
 95e:	a0 40       	sbci	r26, 0x00	; 0
 960:	e1 f7       	brne	.-8      	; 0x95a <__stack+0xfb>
 962:	00 c0       	rjmp	.+0      	; 0x964 <__stack+0x105>
 964:	00 00       	nop
				_delay_ms(2000);
				CLRBIT(PORTC,4);
 966:	ac 98       	cbi	0x15, 4	; 21
				LCD_write_command(1);
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Enter right pass");
 96e:	8a e2       	ldi	r24, 0x2A	; 42
 970:	91 e0       	ldi	r25, 0x01	; 1
 972:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				block_mode=0;
 976:	10 92 fb 01 	sts	0x01FB, r1
				EEPROM_write(30,0);
 97a:	8e e1       	ldi	r24, 0x1E	; 30
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
 984:	ab c1       	rjmp	.+854    	; 0xcdc <__stack+0x47d>
				}
				
			}
			break;
			case 5:
			switch (key){
 986:	c4 33       	cpi	r28, 0x34	; 52
 988:	09 f4       	brne	.+2      	; 0x98c <__stack+0x12d>
 98a:	63 c0       	rjmp	.+198    	; 0xa52 <__stack+0x1f3>
 98c:	c5 33       	cpi	r28, 0x35	; 53
 98e:	64 f4       	brge	.+24     	; 0x9a8 <__stack+0x149>
 990:	c2 33       	cpi	r28, 0x32	; 50
 992:	69 f1       	breq	.+90     	; 0x9ee <__stack+0x18f>
 994:	c3 33       	cpi	r28, 0x33	; 51
 996:	0c f0       	brlt	.+2      	; 0x99a <__stack+0x13b>
 998:	43 c0       	rjmp	.+134    	; 0xa20 <__stack+0x1c1>
 99a:	cf 3f       	cpi	r28, 0xFF	; 255
 99c:	09 f4       	brne	.+2      	; 0x9a0 <__stack+0x141>
 99e:	9e c1       	rjmp	.+828    	; 0xcdc <__stack+0x47d>
 9a0:	c1 33       	cpi	r28, 0x31	; 49
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0x147>
 9a4:	25 c1       	rjmp	.+586    	; 0xbf0 <__stack+0x391>
 9a6:	0a c0       	rjmp	.+20     	; 0x9bc <__stack+0x15d>
 9a8:	c6 33       	cpi	r28, 0x36	; 54
 9aa:	09 f4       	brne	.+2      	; 0x9ae <__stack+0x14f>
 9ac:	d3 c0       	rjmp	.+422    	; 0xb54 <__stack+0x2f5>
 9ae:	c6 33       	cpi	r28, 0x36	; 54
 9b0:	0c f4       	brge	.+2      	; 0x9b4 <__stack+0x155>
 9b2:	94 c0       	rjmp	.+296    	; 0xadc <__stack+0x27d>
 9b4:	c7 33       	cpi	r28, 0x37	; 55
 9b6:	09 f0       	breq	.+2      	; 0x9ba <__stack+0x15b>
 9b8:	1b c1       	rjmp	.+566    	; 0xbf0 <__stack+0x391>
 9ba:	08 c1       	rjmp	.+528    	; 0xbcc <__stack+0x36d>
				case '1':
				LCD_write_command(1);
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 1");
 9c2:	8b e3       	ldi	r24, 0x3B	; 59
 9c4:	91 e0       	ldi	r25, 0x01	; 1
 9c6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 9ca:	80 ec       	ldi	r24, 0xC0	; 192
 9cc:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 9d0:	82 e4       	ldi	r24, 0x42	; 66
 9d2:	91 e0       	ldi	r25, 0x01	; 1
 9d4:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				button_num=key;
 9d8:	81 e3       	ldi	r24, 0x31	; 49
 9da:	80 93 f3 01 	sts	0x01F3, r24
				CLRBIT(PORTB,4);
 9de:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 9e0:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 9e4:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				count=6;
 9e6:	86 e0       	ldi	r24, 0x06	; 6
 9e8:	80 93 f1 01 	sts	0x01F1, r24
				break;
 9ec:	77 c1       	rjmp	.+750    	; 0xcdc <__stack+0x47d>
				case '2':
				LCD_write_command(1);
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 2");
 9f4:	84 e5       	ldi	r24, 0x54	; 84
 9f6:	91 e0       	ldi	r25, 0x01	; 1
 9f8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 9fc:	80 ec       	ldi	r24, 0xC0	; 192
 9fe:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 a02:	82 e4       	ldi	r24, 0x42	; 66
 a04:	91 e0       	ldi	r25, 0x01	; 1
 a06:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				button_num=key;
 a0a:	82 e3       	ldi	r24, 0x32	; 50
 a0c:	80 93 f3 01 	sts	0x01F3, r24
				CLRBIT(PORTB,4);
 a10:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 a12:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 a16:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				count=6;
 a18:	86 e0       	ldi	r24, 0x06	; 6
 a1a:	80 93 f1 01 	sts	0x01F1, r24
				break;
 a1e:	5e c1       	rjmp	.+700    	; 0xcdc <__stack+0x47d>
				case '3':
				LCD_write_command(1);
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 3");
 a26:	8b e5       	ldi	r24, 0x5B	; 91
 a28:	91 e0       	ldi	r25, 0x01	; 1
 a2a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 a2e:	80 ec       	ldi	r24, 0xC0	; 192
 a30:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 a34:	82 e4       	ldi	r24, 0x42	; 66
 a36:	91 e0       	ldi	r25, 0x01	; 1
 a38:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				button_num=key;
 a3c:	83 e3       	ldi	r24, 0x33	; 51
 a3e:	80 93 f3 01 	sts	0x01F3, r24
				CLRBIT(PORTB,4);
 a42:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 a44:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 a48:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				count=6;
 a4a:	86 e0       	ldi	r24, 0x06	; 6
 a4c:	80 93 f1 01 	sts	0x01F1, r24
				break;
 a50:	45 c1       	rjmp	.+650    	; 0xcdc <__stack+0x47d>
				case '4':
				button_num=key;
 a52:	84 e3       	ldi	r24, 0x34	; 52
 a54:	80 93 f3 01 	sts	0x01F3, r24
				if (state==1){
 a58:	80 91 ec 01 	lds	r24, 0x01EC
 a5c:	81 30       	cpi	r24, 0x01	; 1
 a5e:	b1 f4       	brne	.+44     	; 0xa8c <__stack+0x22d>
				LCD_write_command(1);
 a60:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 4");
 a64:	82 e6       	ldi	r24, 0x62	; 98
 a66:	91 e0       	ldi	r25, 0x01	; 1
 a68:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 a6c:	80 ec       	ldi	r24, 0xC0	; 192
 a6e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 a72:	82 e4       	ldi	r24, 0x42	; 66
 a74:	91 e0       	ldi	r25, 0x01	; 1
 a76:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 a7a:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 a7c:	84 e3       	ldi	r24, 0x34	; 52
 a7e:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 a82:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				count=6;
 a84:	86 e0       	ldi	r24, 0x06	; 6
 a86:	80 93 f1 01 	sts	0x01F1, r24
 a8a:	28 c1       	rjmp	.+592    	; 0xcdc <__stack+0x47d>
				}
				else if(state==0 && disp_falg==0){
 a8c:	88 23       	and	r24, r24
 a8e:	09 f0       	breq	.+2      	; 0xa92 <__stack+0x233>
 a90:	25 c1       	rjmp	.+586    	; 0xcdc <__stack+0x47d>
 a92:	80 91 ef 01 	lds	r24, 0x01EF
 a96:	88 23       	and	r24, r24
 a98:	31 f4       	brne	.+12     	; 0xaa6 <__stack+0x247>
					key=-1;
					admin_display2();
 a9a:	0e 94 93 02 	call	0x526	; 0x526 <admin_display2>
					disp_falg=1;}
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	80 93 ef 01 	sts	0x01EF, r24
 aa4:	1b c1       	rjmp	.+566    	; 0xcdc <__stack+0x47d>
				else if (state==0 && disp_falg==1){
 aa6:	81 30       	cpi	r24, 0x01	; 1
 aa8:	09 f0       	breq	.+2      	; 0xaac <__stack+0x24d>
 aaa:	18 c1       	rjmp	.+560    	; 0xcdc <__stack+0x47d>
					LCD_write_command(1);
 aac:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					LCD_write_string("Room 4");
 ab0:	82 e6       	ldi	r24, 0x62	; 98
 ab2:	91 e0       	ldi	r25, 0x01	; 1
 ab4:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
					LCD_write_command(0xc0);
 ab8:	80 ec       	ldi	r24, 0xC0	; 192
 aba:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					LCD_write_string("1>on 2>off 3>back");
 abe:	82 e4       	ldi	r24, 0x42	; 66
 ac0:	91 e0       	ldi	r25, 0x01	; 1
 ac2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
					CLRBIT(PORTB,4);
 ac6:	c4 98       	cbi	0x18, 4	; 24
					SPI_send_char(key);
 ac8:	84 e3       	ldi	r24, 0x34	; 52
 aca:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
					SETBIT(PORTB,4);
 ace:	c4 9a       	sbi	0x18, 4	; 24
					key=-1;
					count=6;
 ad0:	86 e0       	ldi	r24, 0x06	; 6
 ad2:	80 93 f1 01 	sts	0x01F1, r24
					disp_falg=0;
 ad6:	10 92 ef 01 	sts	0x01EF, r1
 ada:	00 c1       	rjmp	.+512    	; 0xcdc <__stack+0x47d>
				}		
				else {key=-1;}
				break;
				case '5':
				button_num=key;
 adc:	85 e3       	ldi	r24, 0x35	; 53
 ade:	80 93 f3 01 	sts	0x01F3, r24
				if (state==0 && disp_falg==1){
 ae2:	80 91 ec 01 	lds	r24, 0x01EC
 ae6:	88 23       	and	r24, r24
 ae8:	e9 f4       	brne	.+58     	; 0xb24 <__stack+0x2c5>
 aea:	80 91 ef 01 	lds	r24, 0x01EF
 aee:	81 30       	cpi	r24, 0x01	; 1
 af0:	09 f0       	breq	.+2      	; 0xaf4 <__stack+0x295>
 af2:	f4 c0       	rjmp	.+488    	; 0xcdc <__stack+0x47d>
				LCD_write_command(1);
 af4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("TV");
 af8:	89 e6       	ldi	r24, 0x69	; 105
 afa:	91 e0       	ldi	r25, 0x01	; 1
 afc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 b00:	80 ec       	ldi	r24, 0xC0	; 192
 b02:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 b06:	82 e4       	ldi	r24, 0x42	; 66
 b08:	91 e0       	ldi	r25, 0x01	; 1
 b0a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 b0e:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 b10:	85 e3       	ldi	r24, 0x35	; 53
 b12:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 b16:	c4 9a       	sbi	0x18, 4	; 24
				disp_falg=0;
 b18:	10 92 ef 01 	sts	0x01EF, r1
				key=-1;
				count=6;
 b1c:	86 e0       	ldi	r24, 0x06	; 6
 b1e:	80 93 f1 01 	sts	0x01F1, r24
 b22:	dc c0       	rjmp	.+440    	; 0xcdc <__stack+0x47d>
				}
				else if(state==1) {
 b24:	81 30       	cpi	r24, 0x01	; 1
 b26:	09 f0       	breq	.+2      	; 0xb2a <__stack+0x2cb>
 b28:	d9 c0       	rjmp	.+434    	; 0xcdc <__stack+0x47d>
					LCD_write_command(1);
 b2a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					LCD_write_string("wrong entry");
 b2e:	88 ec       	ldi	r24, 0xC8	; 200
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 b36:	8f ef       	ldi	r24, 0xFF	; 255
 b38:	91 ee       	ldi	r25, 0xE1	; 225
 b3a:	a4 e0       	ldi	r26, 0x04	; 4
 b3c:	81 50       	subi	r24, 0x01	; 1
 b3e:	90 40       	sbci	r25, 0x00	; 0
 b40:	a0 40       	sbci	r26, 0x00	; 0
 b42:	e1 f7       	brne	.-8      	; 0xb3c <__stack+0x2dd>
 b44:	00 c0       	rjmp	.+0      	; 0xb46 <__stack+0x2e7>
 b46:	00 00       	nop
					_delay_ms(100);
					LCD_write_command(1);
 b48:	81 e0       	ldi	r24, 0x01	; 1
 b4a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					guest_display();
 b4e:	0e 94 b0 02 	call	0x560	; 0x560 <guest_display>
 b52:	c4 c0       	rjmp	.+392    	; 0xcdc <__stack+0x47d>
				}
				break;
				case '6':
				button_num=key;
 b54:	86 e3       	ldi	r24, 0x36	; 54
 b56:	80 93 f3 01 	sts	0x01F3, r24
				if(state==0 && disp_falg==1){
 b5a:	80 91 ec 01 	lds	r24, 0x01EC
 b5e:	88 23       	and	r24, r24
 b60:	e9 f4       	brne	.+58     	; 0xb9c <__stack+0x33d>
 b62:	80 91 ef 01 	lds	r24, 0x01EF
 b66:	81 30       	cpi	r24, 0x01	; 1
 b68:	09 f0       	breq	.+2      	; 0xb6c <__stack+0x30d>
 b6a:	b8 c0       	rjmp	.+368    	; 0xcdc <__stack+0x47d>
				LCD_write_command(1);
 b6c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("COND");
 b70:	8c e6       	ldi	r24, 0x6C	; 108
 b72:	91 e0       	ldi	r25, 0x01	; 1
 b74:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 b78:	80 ec       	ldi	r24, 0xC0	; 192
 b7a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 b7e:	82 e4       	ldi	r24, 0x42	; 66
 b80:	91 e0       	ldi	r25, 0x01	; 1
 b82:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 b86:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 b88:	86 e3       	ldi	r24, 0x36	; 54
 b8a:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 b8e:	c4 9a       	sbi	0x18, 4	; 24
				disp_falg=0;
 b90:	10 92 ef 01 	sts	0x01EF, r1
				key=-1;
				count=6;
 b94:	86 e0       	ldi	r24, 0x06	; 6
 b96:	80 93 f1 01 	sts	0x01F1, r24
 b9a:	a0 c0       	rjmp	.+320    	; 0xcdc <__stack+0x47d>
				}				
				else if(state==1) {
 b9c:	81 30       	cpi	r24, 0x01	; 1
 b9e:	09 f0       	breq	.+2      	; 0xba2 <__stack+0x343>
 ba0:	9d c0       	rjmp	.+314    	; 0xcdc <__stack+0x47d>
					LCD_write_command(1);
 ba2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					LCD_write_string("wrong entry");
 ba6:	88 ec       	ldi	r24, 0xC8	; 200
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 bae:	8f ef       	ldi	r24, 0xFF	; 255
 bb0:	91 ee       	ldi	r25, 0xE1	; 225
 bb2:	a4 e0       	ldi	r26, 0x04	; 4
 bb4:	81 50       	subi	r24, 0x01	; 1
 bb6:	90 40       	sbci	r25, 0x00	; 0
 bb8:	a0 40       	sbci	r26, 0x00	; 0
 bba:	e1 f7       	brne	.-8      	; 0xbb4 <__stack+0x355>
 bbc:	00 c0       	rjmp	.+0      	; 0xbbe <__stack+0x35f>
 bbe:	00 00       	nop
					_delay_ms(100);
					LCD_write_command(1);
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
					guest_display();
 bc6:	0e 94 b0 02 	call	0x560	; 0x560 <guest_display>
 bca:	88 c0       	rjmp	.+272    	; 0xcdc <__stack+0x47d>
				}
				break;
				case '7':
				button_num=key;
 bcc:	87 e3       	ldi	r24, 0x37	; 55
 bce:	80 93 f3 01 	sts	0x01F3, r24
				if(state==0&&disp_falg==1){
 bd2:	80 91 ec 01 	lds	r24, 0x01EC
 bd6:	88 23       	and	r24, r24
 bd8:	09 f0       	breq	.+2      	; 0xbdc <__stack+0x37d>
 bda:	80 c0       	rjmp	.+256    	; 0xcdc <__stack+0x47d>
 bdc:	80 91 ef 01 	lds	r24, 0x01EF
 be0:	81 30       	cpi	r24, 0x01	; 1
 be2:	09 f0       	breq	.+2      	; 0xbe6 <__stack+0x387>
 be4:	7b c0       	rjmp	.+246    	; 0xcdc <__stack+0x47d>
					admin_display();
 be6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>
					disp_falg=0;
 bea:	10 92 ef 01 	sts	0x01EF, r1
 bee:	76 c0       	rjmp	.+236    	; 0xcdc <__stack+0x47d>
				else{key=-1;}
				break;
				case -1:
				break;
				default:
				admin_display();
 bf0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>
				break;
 bf4:	73 c0       	rjmp	.+230    	; 0xcdc <__stack+0x47d>
			}
			break;
			case 6:
			switch (key){
 bf6:	c2 33       	cpi	r28, 0x32	; 50
 bf8:	49 f1       	breq	.+82     	; 0xc4c <__stack+0x3ed>
 bfa:	c3 33       	cpi	r28, 0x33	; 51
 bfc:	09 f4       	brne	.+2      	; 0xc00 <__stack+0x3a1>
 bfe:	49 c0       	rjmp	.+146    	; 0xc92 <__stack+0x433>
 c00:	c1 33       	cpi	r28, 0x31	; 49
 c02:	09 f0       	breq	.+2      	; 0xc06 <__stack+0x3a7>
 c04:	5d c0       	rjmp	.+186    	; 0xcc0 <__stack+0x461>
				case '1':
				LCD_write_command(1);
 c06:	81 e0       	ldi	r24, 0x01	; 1
 c08:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("status:   on ");
 c0c:	81 e7       	ldi	r24, 0x71	; 113
 c0e:	91 e0       	ldi	r25, 0x01	; 1
 c10:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 c14:	80 ec       	ldi	r24, 0xC0	; 192
 c16:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("2>off  3>back");			 
 c1a:	8f e7       	ldi	r24, 0x7F	; 127
 c1c:	91 e0       	ldi	r25, 0x01	; 1
 c1e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 c22:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 c24:	81 e3       	ldi	r24, 0x31	; 49
 c26:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 c2a:	c4 9a       	sbi	0x18, 4	; 24
 c2c:	8f ef       	ldi	r24, 0xFF	; 255
 c2e:	91 ee       	ldi	r25, 0xE1	; 225
 c30:	a4 e0       	ldi	r26, 0x04	; 4
 c32:	81 50       	subi	r24, 0x01	; 1
 c34:	90 40       	sbci	r25, 0x00	; 0
 c36:	a0 40       	sbci	r26, 0x00	; 0
 c38:	e1 f7       	brne	.-8      	; 0xc32 <__stack+0x3d3>
 c3a:	00 c0       	rjmp	.+0      	; 0xc3c <__stack+0x3dd>
 c3c:	00 00       	nop
				_delay_ms(100);
				CLRBIT(PORTB,4);
 c3e:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(button_num);
 c40:	80 91 f3 01 	lds	r24, 0x01F3
 c44:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 c48:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				break;
 c4a:	48 c0       	rjmp	.+144    	; 0xcdc <__stack+0x47d>
				case '2':
				LCD_write_command(1);
 c4c:	81 e0       	ldi	r24, 0x01	; 1
 c4e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("status:  off ");
 c52:	8d e8       	ldi	r24, 0x8D	; 141
 c54:	91 e0       	ldi	r25, 0x01	; 1
 c56:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 c5a:	80 ec       	ldi	r24, 0xC0	; 192
 c5c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on   3>back");
 c60:	8b e9       	ldi	r24, 0x9B	; 155
 c62:	91 e0       	ldi	r25, 0x01	; 1
 c64:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				CLRBIT(PORTB,4);
 c68:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(key);
 c6a:	82 e3       	ldi	r24, 0x32	; 50
 c6c:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 c70:	c4 9a       	sbi	0x18, 4	; 24
 c72:	8f ef       	ldi	r24, 0xFF	; 255
 c74:	91 ee       	ldi	r25, 0xE1	; 225
 c76:	a4 e0       	ldi	r26, 0x04	; 4
 c78:	81 50       	subi	r24, 0x01	; 1
 c7a:	90 40       	sbci	r25, 0x00	; 0
 c7c:	a0 40       	sbci	r26, 0x00	; 0
 c7e:	e1 f7       	brne	.-8      	; 0xc78 <__stack+0x419>
 c80:	00 c0       	rjmp	.+0      	; 0xc82 <__stack+0x423>
 c82:	00 00       	nop
				_delay_ms(100);
				CLRBIT(PORTB,4);
 c84:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char(button_num);
 c86:	80 91 f3 01 	lds	r24, 0x01F3
 c8a:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 c8e:	c4 9a       	sbi	0x18, 4	; 24
				key=-1;
				break;
 c90:	25 c0       	rjmp	.+74     	; 0xcdc <__stack+0x47d>
				case '3':
				CLRBIT(PORTB,4);
 c92:	c4 98       	cbi	0x18, 4	; 24
				SPI_send_char('0');
 c94:	80 e3       	ldi	r24, 0x30	; 48
 c96:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
				SETBIT(PORTB,4);
 c9a:	c4 9a       	sbi	0x18, 4	; 24
				if(state==0){
 c9c:	80 91 ec 01 	lds	r24, 0x01EC
 ca0:	88 23       	and	r24, r24
 ca2:	31 f4       	brne	.+12     	; 0xcb0 <__stack+0x451>
					admin_display();
 ca4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>
					key=-1;
					count=5;
 ca8:	85 e0       	ldi	r24, 0x05	; 5
 caa:	80 93 f1 01 	sts	0x01F1, r24
 cae:	16 c0       	rjmp	.+44     	; 0xcdc <__stack+0x47d>
				}
				else if(state==1){
 cb0:	81 30       	cpi	r24, 0x01	; 1
 cb2:	a1 f4       	brne	.+40     	; 0xcdc <__stack+0x47d>
					guest_display();
 cb4:	0e 94 b0 02 	call	0x560	; 0x560 <guest_display>
					key=-1;
					count=5;
 cb8:	85 e0       	ldi	r24, 0x05	; 5
 cba:	80 93 f1 01 	sts	0x01F1, r24
 cbe:	0e c0       	rjmp	.+28     	; 0xcdc <__stack+0x47d>
				}
				break;
				default:
				LCD_write_command(1);
 cc0:	81 e0       	ldi	r24, 0x01	; 1
 cc2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("wrong entry");
 cc6:	88 ec       	ldi	r24, 0xC8	; 200
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 cce:	80 ec       	ldi	r24, 0xC0	; 192
 cd0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 cd4:	82 e4       	ldi	r24, 0x42	; 66
 cd6:	91 e0       	ldi	r25, 0x01	; 1
 cd8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
			break;				
		
		}
	
	}
}
 cdc:	cf 91       	pop	r28
 cde:	08 95       	ret

00000ce0 <main>:
uint8_t state=0; // Admin(0) or guest(1)
uint8_t a1=1,a2=2,a3=3,a4=4; // right password digits --> admin
uint8_t g1,g2,g3,g4;		//right password digits	--> guest
uint8_t c1,c2,c3,c4; // password digits entered by user
int main(void){
	Set_admin_pass=EEPROM_read(24);
 ce0:	88 e1       	ldi	r24, 0x18	; 24
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 ce8:	80 93 ee 01 	sts	0x01EE, r24
	Set_guest_pass=EEPROM_read(29);
 cec:	8d e1       	ldi	r24, 0x1D	; 29
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 cf4:	80 93 ed 01 	sts	0x01ED, r24
	a1=EEPROM_read(20); // first digit of admin mode
 cf8:	84 e1       	ldi	r24, 0x14	; 20
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d00:	80 93 ea 01 	sts	0x01EA, r24
	a2=EEPROM_read(21);	// second digit of admin mode
 d04:	85 e1       	ldi	r24, 0x15	; 21
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d0c:	80 93 e9 01 	sts	0x01E9, r24
	a3=EEPROM_read(22);	// third digit of admin mode
 d10:	86 e1       	ldi	r24, 0x16	; 22
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d18:	80 93 e8 01 	sts	0x01E8, r24
	a4=EEPROM_read(23);	// forth digit of admin mode
 d1c:	87 e1       	ldi	r24, 0x17	; 23
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d24:	80 93 e7 01 	sts	0x01E7, r24
	g1=EEPROM_read(25);	// first digit of guest mode
 d28:	89 e1       	ldi	r24, 0x19	; 25
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d30:	80 93 f8 01 	sts	0x01F8, r24
	g2=EEPROM_read(26);	// second digit of guest mode
 d34:	8a e1       	ldi	r24, 0x1A	; 26
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d3c:	80 93 fc 01 	sts	0x01FC, r24
	g3=EEPROM_read(27);	// third digit of guest mode
 d40:	8b e1       	ldi	r24, 0x1B	; 27
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d48:	80 93 f7 01 	sts	0x01F7, r24
	g4=EEPROM_read(28);	// forth digit of guest mode
 d4c:	8c e1       	ldi	r24, 0x1C	; 28
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d54:	80 93 f6 01 	sts	0x01F6, r24
	SETBIT(DDRC,0);		// LED FOR ADMIN MODE
 d58:	a0 9a       	sbi	0x14, 0	; 20
	SETBIT(DDRC,2);		// LED FOR GUEST MODE
 d5a:	a2 9a       	sbi	0x14, 2	; 20
	SETBIT(DDRC,4);		// LED FOR BLOCK MODE
 d5c:	a4 9a       	sbi	0x14, 4	; 20
	LCD_init();
 d5e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_init>
	keypad_init();
 d62:	0e 94 5a 00 	call	0xb4	; 0xb4 <keypad_init>
	SPI_master_init();
 d66:	0e 94 68 07 	call	0xed0	; 0xed0 <SPI_master_init>
	timer_normal_init();
 d6a:	0e 94 79 07 	call	0xef2	; 0xef2 <timer_normal_init>
	block_mode=EEPROM_read(30);
 d6e:	8e e1       	ldi	r24, 0x1E	; 30
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 d76:	80 93 fb 01 	sts	0x01FB, r24
    {
		
		if(block_mode==3){
		SETBIT(PORTC,4);
		LCD_write_command(1);
		LCD_write_string("you are blocked");
 d7a:	0f 2e       	mov	r0, r31
 d7c:	ff e0       	ldi	r31, 0x0F	; 15
 d7e:	ef 2e       	mov	r14, r31
 d80:	f1 e0       	ldi	r31, 0x01	; 1
 d82:	ff 2e       	mov	r15, r31
 d84:	f0 2d       	mov	r31, r0
		LCD_write_command(0xc0);
		LCD_write_string("for 20 sec");
 d86:	0f 2e       	mov	r0, r31
 d88:	ff e1       	ldi	r31, 0x1F	; 31
 d8a:	cf 2e       	mov	r12, r31
 d8c:	f1 e0       	ldi	r31, 0x01	; 1
 d8e:	df 2e       	mov	r13, r31
 d90:	f0 2d       	mov	r31, r0
		_delay_ms(2000);
		CLRBIT(PORTC,4);
		LCD_write_command(1);
		LCD_write_string("Enter right pass");
 d92:	0f 2e       	mov	r0, r31
 d94:	fa e2       	ldi	r31, 0x2A	; 42
 d96:	af 2e       	mov	r10, r31
 d98:	f1 e0       	ldi	r31, 0x01	; 1
 d9a:	bf 2e       	mov	r11, r31
 d9c:	f0 2d       	mov	r31, r0
		
		
		if (Set_admin_pass==255	&& initial==0 )		// to set first value of admin password
		{
			LCD_write_command(1);
			LCD_write_string("Enter new admin");
 d9e:	0f 2e       	mov	r0, r31
 da0:	f9 ea       	ldi	r31, 0xA9	; 169
 da2:	8f 2e       	mov	r8, r31
 da4:	f1 e0       	ldi	r31, 0x01	; 1
 da6:	9f 2e       	mov	r9, r31
 da8:	f0 2d       	mov	r31, r0
			start_msg=1;
			_delay_ms(200);
		}
		if (Set_guest_pass==255 && initial==2)		// to set first value of guest password
		{
			initial=3;
 daa:	0f 2e       	mov	r0, r31
 dac:	f3 e0       	ldi	r31, 0x03	; 3
 dae:	5f 2e       	mov	r5, r31
 db0:	f0 2d       	mov	r31, r0
			LCD_write_command(1);
			LCD_write_string("Enter new guest");
 db2:	0f 2e       	mov	r0, r31
 db4:	f9 eb       	ldi	r31, 0xB9	; 185
 db6:	6f 2e       	mov	r6, r31
 db8:	f1 e0       	ldi	r31, 0x01	; 1
 dba:	7f 2e       	mov	r7, r31
 dbc:	f0 2d       	mov	r31, r0
			start_msg=1;
			_delay_ms(200);
		}
		if(start_msg==0){						// start message to user before writing password
		LCD_write_command(1);
		LCD_write_string("select Mode: ");
 dbe:	c9 ec       	ldi	r28, 0xC9	; 201
 dc0:	d1 e0       	ldi	r29, 0x01	; 1
		LCD_write_command(0xc0);
		LCD_write_string("0>Admin 1>Guest");
 dc2:	07 ed       	ldi	r16, 0xD7	; 215
 dc4:	11 e0       	ldi	r17, 0x01	; 1
	timer_normal_init();
	block_mode=EEPROM_read(30);
	while(1)
    {
		
		if(block_mode==3){
 dc6:	80 91 fb 01 	lds	r24, 0x01FB
 dca:	83 30       	cpi	r24, 0x03	; 3
 dcc:	21 f5       	brne	.+72     	; 0xe16 <main+0x136>
		SETBIT(PORTC,4);
 dce:	ac 9a       	sbi	0x15, 4	; 21
		LCD_write_command(1);
 dd0:	81 e0       	ldi	r24, 0x01	; 1
 dd2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("you are blocked");
 dd6:	c7 01       	movw	r24, r14
 dd8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
		LCD_write_command(0xc0);
 ddc:	80 ec       	ldi	r24, 0xC0	; 192
 dde:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("for 20 sec");
 de2:	c6 01       	movw	r24, r12
 de4:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 de8:	8f ef       	ldi	r24, 0xFF	; 255
 dea:	97 ea       	ldi	r25, 0xA7	; 167
 dec:	a1 e6       	ldi	r26, 0x61	; 97
 dee:	81 50       	subi	r24, 0x01	; 1
 df0:	90 40       	sbci	r25, 0x00	; 0
 df2:	a0 40       	sbci	r26, 0x00	; 0
 df4:	e1 f7       	brne	.-8      	; 0xdee <main+0x10e>
 df6:	00 c0       	rjmp	.+0      	; 0xdf8 <main+0x118>
 df8:	00 00       	nop
		_delay_ms(2000);
		CLRBIT(PORTC,4);
 dfa:	ac 98       	cbi	0x15, 4	; 21
		LCD_write_command(1);
 dfc:	81 e0       	ldi	r24, 0x01	; 1
 dfe:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("Enter right pass");
 e02:	c5 01       	movw	r24, r10
 e04:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
		block_mode=0;
 e08:	10 92 fb 01 	sts	0x01FB, r1
		EEPROM_write(30,0);
 e0c:	8e e1       	ldi	r24, 0x1E	; 30
 e0e:	90 e0       	ldi	r25, 0x00	; 0
 e10:	60 e0       	ldi	r22, 0x00	; 0
 e12:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
		}
		
		
		if (Set_admin_pass==255	&& initial==0 )		// to set first value of admin password
 e16:	80 91 ee 01 	lds	r24, 0x01EE
 e1a:	8f 3f       	cpi	r24, 0xFF	; 255
 e1c:	e1 f4       	brne	.+56     	; 0xe56 <main+0x176>
 e1e:	80 91 f0 01 	lds	r24, 0x01F0
 e22:	88 23       	and	r24, r24
 e24:	c1 f4       	brne	.+48     	; 0xe56 <main+0x176>
		{
			LCD_write_command(1);
 e26:	81 e0       	ldi	r24, 0x01	; 1
 e28:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_string("Enter new admin");
 e2c:	c4 01       	movw	r24, r8
 e2e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
			initial=1;
 e32:	81 e0       	ldi	r24, 0x01	; 1
 e34:	80 93 f0 01 	sts	0x01F0, r24
			count=1;
 e38:	80 93 f1 01 	sts	0x01F1, r24
			state=0;
 e3c:	10 92 ec 01 	sts	0x01EC, r1
			start_msg=1;
 e40:	80 93 f2 01 	sts	0x01F2, r24
 e44:	8f ef       	ldi	r24, 0xFF	; 255
 e46:	93 ec       	ldi	r25, 0xC3	; 195
 e48:	a9 e0       	ldi	r26, 0x09	; 9
 e4a:	81 50       	subi	r24, 0x01	; 1
 e4c:	90 40       	sbci	r25, 0x00	; 0
 e4e:	a0 40       	sbci	r26, 0x00	; 0
 e50:	e1 f7       	brne	.-8      	; 0xe4a <main+0x16a>
 e52:	00 c0       	rjmp	.+0      	; 0xe54 <main+0x174>
 e54:	00 00       	nop
			_delay_ms(200);
		}
		if (Set_guest_pass==255 && initial==2)		// to set first value of guest password
 e56:	80 91 ed 01 	lds	r24, 0x01ED
 e5a:	8f 3f       	cpi	r24, 0xFF	; 255
 e5c:	e1 f4       	brne	.+56     	; 0xe96 <main+0x1b6>
 e5e:	80 91 f0 01 	lds	r24, 0x01F0
 e62:	82 30       	cpi	r24, 0x02	; 2
 e64:	c1 f4       	brne	.+48     	; 0xe96 <main+0x1b6>
		{
			initial=3;
 e66:	50 92 f0 01 	sts	0x01F0, r5
			LCD_write_command(1);
 e6a:	81 e0       	ldi	r24, 0x01	; 1
 e6c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_string("Enter new guest");
 e70:	c3 01       	movw	r24, r6
 e72:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
			count=1;
 e76:	81 e0       	ldi	r24, 0x01	; 1
 e78:	80 93 f1 01 	sts	0x01F1, r24
			state=1;			
 e7c:	80 93 ec 01 	sts	0x01EC, r24
			start_msg=1;
 e80:	80 93 f2 01 	sts	0x01F2, r24
 e84:	8f ef       	ldi	r24, 0xFF	; 255
 e86:	93 ec       	ldi	r25, 0xC3	; 195
 e88:	a9 e0       	ldi	r26, 0x09	; 9
 e8a:	81 50       	subi	r24, 0x01	; 1
 e8c:	90 40       	sbci	r25, 0x00	; 0
 e8e:	a0 40       	sbci	r26, 0x00	; 0
 e90:	e1 f7       	brne	.-8      	; 0xe8a <main+0x1aa>
 e92:	00 c0       	rjmp	.+0      	; 0xe94 <main+0x1b4>
 e94:	00 00       	nop
			_delay_ms(200);
		}
		if(start_msg==0){						// start message to user before writing password
 e96:	80 91 f2 01 	lds	r24, 0x01F2
 e9a:	88 23       	and	r24, r24
 e9c:	b1 f4       	brne	.+44     	; 0xeca <main+0x1ea>
		LCD_write_command(1);
 e9e:	81 e0       	ldi	r24, 0x01	; 1
 ea0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("select Mode: ");
 ea4:	ce 01       	movw	r24, r28
 ea6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
		LCD_write_command(0xc0);
 eaa:	80 ec       	ldi	r24, 0xC0	; 192
 eac:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("0>Admin 1>Guest");
 eb0:	c8 01       	movw	r24, r16
 eb2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
		start_msg++;
 eb6:	80 91 f2 01 	lds	r24, 0x01F2
 eba:	8f 5f       	subi	r24, 0xFF	; 255
 ebc:	80 93 f2 01 	sts	0x01F2, r24
		CLRBIT(PORTB,4);
 ec0:	c4 98       	cbi	0x18, 4	; 24
		SPI_send_char('0');
 ec2:	80 e3       	ldi	r24, 0x30	; 48
 ec4:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send_char>
		SETBIT(PORTB,4);
 ec8:	c4 9a       	sbi	0x18, 4	; 24
		}
		get_password();
 eca:	0e 94 d7 02 	call	0x5ae	; 0x5ae <get_password>
		
	}
 ece:	7b cf       	rjmp	.-266    	; 0xdc6 <main+0xe6>

00000ed0 <SPI_master_init>:
#define CS	PB4
//#define CS2	PB3
#define CLK PB5

void SPI_master_init(){
	DDRB |= (1<<MOSI)|(1<<CS)|(1<<CLK);
 ed0:	87 b3       	in	r24, 0x17	; 23
 ed2:	80 6b       	ori	r24, 0xB0	; 176
 ed4:	87 bb       	out	0x17, r24	; 23
	SPCR = 1<<MSTR | 1<<SPE;
 ed6:	80 e5       	ldi	r24, 0x50	; 80
 ed8:	8d b9       	out	0x0d, r24	; 13
}
 eda:	08 95       	ret

00000edc <SPI_slave_init>:
void SPI_slave_init(){	
	SETBIT(DDRB,MISO);	// MISO
 edc:	be 9a       	sbi	0x17, 6	; 23
	SETBIT(SPCR,SPE);	// enable SPI
 ede:	6e 9a       	sbi	0x0d, 6	; 13
}
 ee0:	08 95       	ret

00000ee2 <SPI_send_char>:
void SPI_send_char(uint8_t data){
	SPDR = data;
 ee2:	8f b9       	out	0x0f, r24	; 15
	while(GETBIT(SPSR,SPIF) == 0);
 ee4:	77 9b       	sbis	0x0e, 7	; 14
 ee6:	fe cf       	rjmp	.-4      	; 0xee4 <SPI_send_char+0x2>
}
 ee8:	08 95       	ret

00000eea <SPI_receive_char>:
uint8_t SPI_receive_char(){
	while(GETBIT(SPSR,SPIF) == 0);
 eea:	77 9b       	sbis	0x0e, 7	; 14
 eec:	fe cf       	rjmp	.-4      	; 0xeea <SPI_receive_char>
	return SPDR;
 eee:	8f b1       	in	r24, 0x0f	; 15
 ef0:	08 95       	ret

00000ef2 <timer_normal_init>:
 *  Author: M
 */ 
#include "Timer0.h"

void timer_normal_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00);
 ef2:	85 e8       	ldi	r24, 0x85	; 133
 ef4:	83 bf       	out	0x33, r24	; 51
	//SETBIT(TIMSK,TOIE0);
	sei();
 ef6:	78 94       	sei
}
 ef8:	08 95       	ret

00000efa <timer_compare_init>:
void timer_compare_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00) | (1<<WGM01);
 efa:	8d e8       	ldi	r24, 0x8D	; 141
 efc:	83 bf       	out	0x33, r24	; 51
	OCR0 =200;
 efe:	88 ec       	ldi	r24, 0xC8	; 200
 f00:	8c bf       	out	0x3c, r24	; 60
	SETBIT(TIMSK,OCIE0);
 f02:	89 b7       	in	r24, 0x39	; 57
 f04:	82 60       	ori	r24, 0x02	; 2
 f06:	89 bf       	out	0x39, r24	; 57
	sei();
 f08:	78 94       	sei
 f0a:	08 95       	ret

00000f0c <__udivmodsi4>:
 f0c:	a1 e2       	ldi	r26, 0x21	; 33
 f0e:	1a 2e       	mov	r1, r26
 f10:	aa 1b       	sub	r26, r26
 f12:	bb 1b       	sub	r27, r27
 f14:	fd 01       	movw	r30, r26
 f16:	0d c0       	rjmp	.+26     	; 0xf32 <__udivmodsi4_ep>

00000f18 <__udivmodsi4_loop>:
 f18:	aa 1f       	adc	r26, r26
 f1a:	bb 1f       	adc	r27, r27
 f1c:	ee 1f       	adc	r30, r30
 f1e:	ff 1f       	adc	r31, r31
 f20:	a2 17       	cp	r26, r18
 f22:	b3 07       	cpc	r27, r19
 f24:	e4 07       	cpc	r30, r20
 f26:	f5 07       	cpc	r31, r21
 f28:	20 f0       	brcs	.+8      	; 0xf32 <__udivmodsi4_ep>
 f2a:	a2 1b       	sub	r26, r18
 f2c:	b3 0b       	sbc	r27, r19
 f2e:	e4 0b       	sbc	r30, r20
 f30:	f5 0b       	sbc	r31, r21

00000f32 <__udivmodsi4_ep>:
 f32:	66 1f       	adc	r22, r22
 f34:	77 1f       	adc	r23, r23
 f36:	88 1f       	adc	r24, r24
 f38:	99 1f       	adc	r25, r25
 f3a:	1a 94       	dec	r1
 f3c:	69 f7       	brne	.-38     	; 0xf18 <__udivmodsi4_loop>
 f3e:	60 95       	com	r22
 f40:	70 95       	com	r23
 f42:	80 95       	com	r24
 f44:	90 95       	com	r25
 f46:	9b 01       	movw	r18, r22
 f48:	ac 01       	movw	r20, r24
 f4a:	bd 01       	movw	r22, r26
 f4c:	cf 01       	movw	r24, r30
 f4e:	08 95       	ret

00000f50 <_exit>:
 f50:	f8 94       	cli

00000f52 <__stop_program>:
 f52:	ff cf       	rjmp	.-2      	; 0xf52 <__stop_program>
