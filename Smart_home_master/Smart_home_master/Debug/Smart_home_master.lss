
Smart_home_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00000d7a  00000e0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080019a  0080019a  00000f48  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000016a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001356  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c4  00000000  00000000  00002b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3b  00000000  00000000  000030fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fa  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c4  00000000  00000000  0000437a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3a       	cpi	r26, 0xAB	; 171
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 05 	call	0xb20	; 0xb20 <main>
  8a:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_read>:
 *  Author: M
 */ 
#include "EEPROM.h"

uint8_t EEPROM_read(uint16_t add){
	while(GETBIT(EECR,EEWE)==1){};
  92:	2c b3       	in	r18, 0x1c	; 28
  94:	21 fd       	sbrc	r18, 1
  96:	fd cf       	rjmp	.-6      	; 0x92 <EEPROM_read>
		EEAR =add;
  98:	9f bb       	out	0x1f, r25	; 31
  9a:	8e bb       	out	0x1e, r24	; 30
		SETBIT(EECR,EERE);
  9c:	e0 9a       	sbi	0x1c, 0	; 28
		return EEDR;
  9e:	8d b3       	in	r24, 0x1d	; 29
}
  a0:	08 95       	ret

000000a2 <EEPROM_write>:
void EEPROM_write(uint16_t add , uint8_t data){ 
	while(GETBIT(EECR,EEWE)==1){};
  a2:	2c b3       	in	r18, 0x1c	; 28
  a4:	21 fd       	sbrc	r18, 1
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <EEPROM_write>
    EEAR =add;
  a8:	9f bb       	out	0x1f, r25	; 31
  aa:	8e bb       	out	0x1e, r24	; 30
	EEDR =data;
  ac:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR,EEMWE);
  ae:	e2 9a       	sbi	0x1c, 2	; 28
	SETBIT(EECR,EEWE);
  b0:	e1 9a       	sbi	0x1c, 1	; 28
}
  b2:	08 95       	ret

000000b4 <keypad_init>:
	'1','2','3','N',
	'N','0','N','N'
};
void keypad_init(){

	CLRBIT(DDRD,2);
  b4:	8a 98       	cbi	0x11, 2	; 17
	CLRBIT(DDRD,3);
  b6:	8b 98       	cbi	0x11, 3	; 17
	CLRBIT(DDRD,4);
  b8:	8c 98       	cbi	0x11, 4	; 17
	CLRBIT(DDRD,5);
  ba:	8d 98       	cbi	0x11, 5	; 17
	PORTD |= 0b00111100; // internal pull up in case of protues
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	8c 63       	ori	r24, 0x3C	; 60
  c0:	82 bb       	out	0x12, r24	; 18
	SETBIT(DDRB,0);
  c2:	b8 9a       	sbi	0x17, 0	; 23
	SETBIT(DDRB,1);
  c4:	b9 9a       	sbi	0x17, 1	; 23
	SETBIT(DDRB,2);
  c6:	ba 9a       	sbi	0x17, 2	; 23
	SETBIT(DDRB,3);
  c8:	bb 9a       	sbi	0x17, 3	; 23
}
  ca:	08 95       	ret

000000cc <keypad_read>:
int8_t keypad_read(){

	for(uint8_t i = 0; i < 4 ; i++){
  cc:	e0 e0       	ldi	r30, 0x00	; 0
		PORTB = PORTB & 0b11110000;
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 7f       	andi	r24, 0xF0	; 240
  d2:	88 bb       	out	0x18, r24	; 24
		if (i == 0) PORTB |= 0b00001110;
  d4:	ee 23       	and	r30, r30
  d6:	21 f4       	brne	.+8      	; 0xe0 <keypad_read+0x14>
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	8e 60       	ori	r24, 0x0E	; 14
  dc:	88 bb       	out	0x18, r24	; 24
  de:	0c c0       	rjmp	.+24     	; 0xf8 <keypad_read+0x2c>
		if (i == 1) PORTB |= 0b00001101;
  e0:	e1 30       	cpi	r30, 0x01	; 1
  e2:	21 f4       	brne	.+8      	; 0xec <keypad_read+0x20>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 60       	ori	r24, 0x0D	; 13
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	0b c0       	rjmp	.+22     	; 0x102 <keypad_read+0x36>
		if (i == 2) PORTB |= 0b00001011;
  ec:	e2 30       	cpi	r30, 0x02	; 2
  ee:	21 f4       	brne	.+8      	; 0xf8 <keypad_read+0x2c>
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	8b 60       	ori	r24, 0x0B	; 11
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	05 c0       	rjmp	.+10     	; 0x102 <keypad_read+0x36>
		if (i == 3) PORTB |= 0b00000111;
  f8:	e3 30       	cpi	r30, 0x03	; 3
  fa:	19 f4       	brne	.+6      	; 0x102 <keypad_read+0x36>
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	88 bb       	out	0x18, r24	; 24
		
		if (GETBIT(PIND,2) == 0) return keypad_matrix[0+4*i];
 102:	80 b3       	in	r24, 0x10	; 16
 104:	82 fd       	sbrc	r24, 2
 106:	09 c0       	rjmp	.+18     	; 0x11a <keypad_read+0x4e>
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 5a       	subi	r30, 0xA0	; 160
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	80 81       	ld	r24, Z
 118:	08 95       	ret
		if (GETBIT(PIND,3) == 0) return keypad_matrix[1+4*i];
 11a:	80 b3       	in	r24, 0x10	; 16
 11c:	83 fd       	sbrc	r24, 3
 11e:	09 c0       	rjmp	.+18     	; 0x132 <keypad_read+0x66>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	81 81       	ldd	r24, Z+1	; 0x01
 130:	08 95       	ret
		if (GETBIT(PIND,4) == 0) return keypad_matrix[2+4*i];
 132:	80 b3       	in	r24, 0x10	; 16
 134:	84 fd       	sbrc	r24, 4
 136:	09 c0       	rjmp	.+18     	; 0x14a <keypad_read+0x7e>
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	e0 5a       	subi	r30, 0xA0	; 160
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	08 95       	ret
		if (GETBIT(PIND,5) == 0) return keypad_matrix[3+4*i];
 14a:	80 b3       	in	r24, 0x10	; 16
 14c:	85 fd       	sbrc	r24, 5
 14e:	09 c0       	rjmp	.+18     	; 0x162 <keypad_read+0x96>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 5a       	subi	r30, 0xA0	; 160
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	83 81       	ldd	r24, Z+3	; 0x03
 160:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e9       	ldi	r24, 0x9F	; 159
 164:	9f e0       	ldi	r25, 0x0F	; 15
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <keypad_read+0x9a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <keypad_read+0xa0>
 16c:	00 00       	nop
	SETBIT(DDRB,2);
	SETBIT(DDRB,3);
}
int8_t keypad_read(){

	for(uint8_t i = 0; i < 4 ; i++){
 16e:	ef 5f       	subi	r30, 0xFF	; 255
 170:	e4 30       	cpi	r30, 0x04	; 4
 172:	09 f0       	breq	.+2      	; 0x176 <keypad_read+0xaa>
 174:	ac cf       	rjmp	.-168    	; 0xce <keypad_read+0x2>
		if (GETBIT(PIND,4) == 0) return keypad_matrix[2+4*i];
		if (GETBIT(PIND,5) == 0) return keypad_matrix[3+4*i];
		_delay_ms(1);
		
	}
	return -1;
 176:	8f ef       	ldi	r24, 0xFF	; 255

 178:	08 95       	ret

0000017a <LCD_write_command>:
_delay_ms(20);
LCD_write_command(0x0C);
}

void LCD_write_command(uint8_t cmd){
	 RS(0);
 17a:	d9 98       	cbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(cmd,4));
 17c:	98 2f       	mov	r25, r24
 17e:	92 95       	swap	r25
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	90 ff       	sbrs	r25, 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <LCD_write_command+0x10>
 186:	db 9a       	sbi	0x1b, 3	; 27
 188:	01 c0       	rjmp	.+2      	; 0x18c <LCD_write_command+0x12>
 18a:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,5));
 18c:	98 2f       	mov	r25, r24
 18e:	92 95       	swap	r25
 190:	96 95       	lsr	r25
 192:	97 70       	andi	r25, 0x07	; 7
 194:	90 ff       	sbrs	r25, 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <LCD_write_command+0x22>
 198:	dc 9a       	sbi	0x1b, 4	; 27
 19a:	01 c0       	rjmp	.+2      	; 0x19e <LCD_write_command+0x24>
 19c:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,6));
 19e:	98 2f       	mov	r25, r24
 1a0:	92 95       	swap	r25
 1a2:	96 95       	lsr	r25
 1a4:	96 95       	lsr	r25
 1a6:	93 70       	andi	r25, 0x03	; 3
 1a8:	90 ff       	sbrs	r25, 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <LCD_write_command+0x36>
 1ac:	dd 9a       	sbi	0x1b, 5	; 27
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <LCD_write_command+0x38>
 1b0:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,7));
 1b2:	88 23       	and	r24, r24
 1b4:	14 f4       	brge	.+4      	; 0x1ba <LCD_write_command+0x40>
 1b6:	de 9a       	sbi	0x1b, 6	; 27
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <LCD_write_command+0x42>
 1ba:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 1bc:	da 9a       	sbi	0x1b, 2	; 27
 1be:	ef e9       	ldi	r30, 0x9F	; 159
 1c0:	ff e0       	ldi	r31, 0x0F	; 15
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_write_command+0x48>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_write_command+0x4e>
 1c8:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 1ca:	da 98       	cbi	0x1b, 2	; 27
 1cc:	ef e9       	ldi	r30, 0x9F	; 159
 1ce:	ff e0       	ldi	r31, 0x0F	; 15
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_write_command+0x56>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <LCD_write_command+0x5c>
 1d6:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(cmd,0));
 1d8:	80 ff       	sbrs	r24, 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <LCD_write_command+0x66>
 1dc:	db 9a       	sbi	0x1b, 3	; 27
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <LCD_write_command+0x68>
 1e0:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,1));
 1e2:	98 2f       	mov	r25, r24
 1e4:	96 95       	lsr	r25
 1e6:	90 ff       	sbrs	r25, 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <LCD_write_command+0x74>
 1ea:	dc 9a       	sbi	0x1b, 4	; 27
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <LCD_write_command+0x76>
 1ee:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,2));
 1f0:	98 2f       	mov	r25, r24
 1f2:	96 95       	lsr	r25
 1f4:	96 95       	lsr	r25
 1f6:	90 ff       	sbrs	r25, 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <LCD_write_command+0x84>
 1fa:	dd 9a       	sbi	0x1b, 5	; 27
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <LCD_write_command+0x86>
 1fe:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,3));
 200:	86 95       	lsr	r24
 202:	86 95       	lsr	r24
 204:	86 95       	lsr	r24
 206:	80 ff       	sbrs	r24, 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <LCD_write_command+0x94>
 20a:	de 9a       	sbi	0x1b, 6	; 27
 20c:	01 c0       	rjmp	.+2      	; 0x210 <LCD_write_command+0x96>
 20e:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 210:	da 9a       	sbi	0x1b, 2	; 27
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_write_command+0x9c>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_write_command+0xa2>
 21c:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 21e:	da 98       	cbi	0x1b, 2	; 27
 220:	ef e9       	ldi	r30, 0x9F	; 159
 222:	ff e0       	ldi	r31, 0x0F	; 15
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_write_command+0xaa>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_write_command+0xb0>
 22a:	00 00       	nop
	 _delay_ms(1);
}
 22c:	08 95       	ret

0000022e <LCD_init>:
 *  Author: M
 */ 
#include "LCD.h"

void LCD_init (){
INIT_LCD();
 22e:	8a b3       	in	r24, 0x1a	; 26
 230:	8e 67       	ori	r24, 0x7E	; 126
 232:	8a bb       	out	0x1a, r24	; 26
LCD_write_command(0X3);
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 23a:	8f e7       	ldi	r24, 0x7F	; 127
 23c:	9e e3       	ldi	r25, 0x3E	; 62
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_init+0x10>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_init+0x16>
 244:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 24c:	af e7       	ldi	r26, 0x7F	; 127
 24e:	be e3       	ldi	r27, 0x3E	; 62
 250:	11 97       	sbiw	r26, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_init+0x22>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_init+0x28>
 256:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 25e:	8f e7       	ldi	r24, 0x7F	; 127
 260:	9e e3       	ldi	r25, 0x3E	; 62
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_init+0x34>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_init+0x3a>
 268:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X2);
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X28);
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X08);
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X01);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
LCD_write_command(0X06);
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	99 ef       	ldi	r25, 0xF9	; 249
 28c:	a0 e0       	ldi	r26, 0x00	; 0
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	a0 40       	sbci	r26, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <LCD_init+0x60>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_init+0x6a>
 298:	00 00       	nop
_delay_ms(20);
LCD_write_command(0x0C);
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
}
 2a0:	08 95       	ret

000002a2 <LCD_write_char>:
	 EN(0);
	 _delay_ms(1);
}

void LCD_write_char(uint8_t data){
	 RS(1);
 2a2:	d9 9a       	sbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(data,4));
 2a4:	98 2f       	mov	r25, r24
 2a6:	92 95       	swap	r25
 2a8:	9f 70       	andi	r25, 0x0F	; 15
 2aa:	90 ff       	sbrs	r25, 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <LCD_write_char+0x10>
 2ae:	db 9a       	sbi	0x1b, 3	; 27
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <LCD_write_char+0x12>
 2b2:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,5));
 2b4:	98 2f       	mov	r25, r24
 2b6:	92 95       	swap	r25
 2b8:	96 95       	lsr	r25
 2ba:	97 70       	andi	r25, 0x07	; 7
 2bc:	90 ff       	sbrs	r25, 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <LCD_write_char+0x22>
 2c0:	dc 9a       	sbi	0x1b, 4	; 27
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <LCD_write_char+0x24>
 2c4:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,6));
 2c6:	98 2f       	mov	r25, r24
 2c8:	92 95       	swap	r25
 2ca:	96 95       	lsr	r25
 2cc:	96 95       	lsr	r25
 2ce:	93 70       	andi	r25, 0x03	; 3
 2d0:	90 ff       	sbrs	r25, 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <LCD_write_char+0x36>
 2d4:	dd 9a       	sbi	0x1b, 5	; 27
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <LCD_write_char+0x38>
 2d8:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,7));
 2da:	88 23       	and	r24, r24
 2dc:	14 f4       	brge	.+4      	; 0x2e2 <LCD_write_char+0x40>
 2de:	de 9a       	sbi	0x1b, 6	; 27
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <LCD_write_char+0x42>
 2e2:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 2e4:	da 9a       	sbi	0x1b, 2	; 27
 2e6:	ef e9       	ldi	r30, 0x9F	; 159
 2e8:	ff e0       	ldi	r31, 0x0F	; 15
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_write_char+0x48>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_write_char+0x4e>
 2f0:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 2f2:	da 98       	cbi	0x1b, 2	; 27
 2f4:	ef e9       	ldi	r30, 0x9F	; 159
 2f6:	ff e0       	ldi	r31, 0x0F	; 15
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_write_char+0x56>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_write_char+0x5c>
 2fe:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(data,0));
 300:	80 ff       	sbrs	r24, 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <LCD_write_char+0x66>
 304:	db 9a       	sbi	0x1b, 3	; 27
 306:	01 c0       	rjmp	.+2      	; 0x30a <LCD_write_char+0x68>
 308:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,1));
 30a:	98 2f       	mov	r25, r24
 30c:	96 95       	lsr	r25
 30e:	90 ff       	sbrs	r25, 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <LCD_write_char+0x74>
 312:	dc 9a       	sbi	0x1b, 4	; 27
 314:	01 c0       	rjmp	.+2      	; 0x318 <LCD_write_char+0x76>
 316:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,2));
 318:	98 2f       	mov	r25, r24
 31a:	96 95       	lsr	r25
 31c:	96 95       	lsr	r25
 31e:	90 ff       	sbrs	r25, 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <LCD_write_char+0x84>
 322:	dd 9a       	sbi	0x1b, 5	; 27
 324:	01 c0       	rjmp	.+2      	; 0x328 <LCD_write_char+0x86>
 326:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,3));
 328:	86 95       	lsr	r24
 32a:	86 95       	lsr	r24
 32c:	86 95       	lsr	r24
 32e:	80 ff       	sbrs	r24, 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <LCD_write_char+0x94>
 332:	de 9a       	sbi	0x1b, 6	; 27
 334:	01 c0       	rjmp	.+2      	; 0x338 <LCD_write_char+0x96>
 336:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 338:	da 9a       	sbi	0x1b, 2	; 27
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_write_char+0x9c>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_write_char+0xa2>
 344:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 346:	da 98       	cbi	0x1b, 2	; 27
 348:	ef e9       	ldi	r30, 0x9F	; 159
 34a:	ff e0       	ldi	r31, 0x0F	; 15
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_write_char+0xaa>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_write_char+0xb0>
 352:	00 00       	nop
	 _delay_ms(1);
}
 354:	08 95       	ret

00000356 <LCD_write_string>:
void LCD_write_string(uint8_t txt[]){
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	8c 01       	movw	r16, r24
	for (uint8_t i=0;txt[i]!='\0';i++){
 35e:	fc 01       	movw	r30, r24
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	51 f0       	breq	.+20     	; 0x37a <LCD_write_string+0x24>
 366:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_char(txt[i]);
 368:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
	 _delay_ms(1);
	 EN(0);
	 _delay_ms(1);
}
void LCD_write_string(uint8_t txt[]){
	for (uint8_t i=0;txt[i]!='\0';i++){
 36c:	cf 5f       	subi	r28, 0xFF	; 255
 36e:	f8 01       	movw	r30, r16
 370:	ec 0f       	add	r30, r28
 372:	f1 1d       	adc	r31, r1
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	b9 f7       	brne	.-18     	; 0x368 <LCD_write_string+0x12>
		LCD_write_char(txt[i]);
	}
}
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <LCD_write_num>:
void LCD_write_num(uint32_t num){
 382:	8f 92       	push	r8
 384:	9f 92       	push	r9
 386:	af 92       	push	r10
 388:	bf 92       	push	r11
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	2a 97       	sbiw	r28, 0x0a	; 10
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	dc 01       	movw	r26, r24
 3a6:	cb 01       	movw	r24, r22
uint8_t txt[10] = {0};
 3a8:	ae 01       	movw	r20, r28
 3aa:	4f 5f       	subi	r20, 0xFF	; 255
 3ac:	5f 4f       	sbci	r21, 0xFF	; 255
 3ae:	2a e0       	ldi	r18, 0x0A	; 10
 3b0:	fa 01       	movw	r30, r20
 3b2:	11 92       	st	Z+, r1
 3b4:	2a 95       	dec	r18
 3b6:	e9 f7       	brne	.-6      	; 0x3b2 <LCD_write_num+0x30>
int8_t i = 0;
if(num == 0) {
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	a1 05       	cpc	r26, r1
 3bc:	b1 05       	cpc	r27, r1
 3be:	21 f4       	brne	.+8      	; 0x3c8 <LCD_write_num+0x46>
	LCD_write_char('0');
 3c0:	80 e3       	ldi	r24, 0x30	; 48
 3c2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
	return;
 3c6:	38 c0       	rjmp	.+112    	; 0x438 <LCD_write_num+0xb6>
	}
}
void LCD_write_num(uint32_t num){
uint8_t txt[10] = {0};
int8_t i = 0;
if(num == 0) {
 3c8:	10 e0       	ldi	r17, 0x00	; 0
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
{
	txt[i] = num%10 + 48;
 3ca:	0f 2e       	mov	r0, r31
 3cc:	fa e0       	ldi	r31, 0x0A	; 10
 3ce:	8f 2e       	mov	r8, r31
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	9f 2e       	mov	r9, r31
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	af 2e       	mov	r10, r31
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	bf 2e       	mov	r11, r31
 3dc:	f0 2d       	mov	r31, r0
 3de:	e1 2e       	mov	r14, r17
 3e0:	ff 24       	eor	r15, r15
 3e2:	e7 fc       	sbrc	r14, 7
 3e4:	f0 94       	com	r15
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	2c 0f       	add	r18, r28
 3ec:	3d 1f       	adc	r19, r29
 3ee:	e2 0e       	add	r14, r18
 3f0:	f3 1e       	adc	r15, r19
 3f2:	bc 01       	movw	r22, r24
 3f4:	cd 01       	movw	r24, r26
 3f6:	a5 01       	movw	r20, r10
 3f8:	94 01       	movw	r18, r8
 3fa:	0e 94 99 06 	call	0xd32	; 0xd32 <__udivmodsi4>
 3fe:	60 5d       	subi	r22, 0xD0	; 208
 400:	f7 01       	movw	r30, r14
 402:	60 83       	st	Z, r22
	num = num  / 10 ;
 404:	82 2f       	mov	r24, r18
 406:	93 2f       	mov	r25, r19
 408:	a4 2f       	mov	r26, r20
 40a:	b5 2f       	mov	r27, r21
int8_t i = 0;
if(num == 0) {
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
 40c:	1f 5f       	subi	r17, 0xFF	; 255
 40e:	00 97       	sbiw	r24, 0x00	; 0
 410:	a1 05       	cpc	r26, r1
 412:	b1 05       	cpc	r27, r1
 414:	21 f7       	brne	.-56     	; 0x3de <LCD_write_num+0x5c>
{
	txt[i] = num%10 + 48;
	num = num  / 10 ;
}
i--;
 416:	11 50       	subi	r17, 0x01	; 1
while(i >= 0){
 418:	7a f0       	brmi	.+30     	; 0x438 <LCD_write_num+0xb6>
	LCD_write_char(txt[i]);
 41a:	e1 2f       	mov	r30, r17
 41c:	ff 27       	eor	r31, r31
 41e:	e7 fd       	sbrc	r30, 7
 420:	f0 95       	com	r31
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	2c 0f       	add	r18, r28
 428:	3d 1f       	adc	r19, r29
 42a:	e2 0f       	add	r30, r18
 42c:	f3 1f       	adc	r31, r19
 42e:	80 81       	ld	r24, Z
 430:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
	i--;
 434:	11 50       	subi	r17, 0x01	; 1
 436:	88 f7       	brcc	.-30     	; 0x41a <LCD_write_num+0x98>
}
 438:	2a 96       	adiw	r28, 0x0a	; 10
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	bf 90       	pop	r11
 450:	af 90       	pop	r10
 452:	9f 90       	pop	r9
 454:	8f 90       	pop	r8
 456:	08 95       	ret

00000458 <__vector_11>:
//	start_msg=0;
	//_delay_ms(3000);
	//LCD_write_command(1);
	//CLRBIT(PORTC,2);
}
ISR(TIMER0_OVF_vect){
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
	
	static uint8_t admin_mode = 0;
	static uint8_t guest_mode = 0;
	admin_mode++;
 466:	80 91 a0 01 	lds	r24, 0x01A0
 46a:	8f 5f       	subi	r24, 0xFF	; 255
 46c:	80 93 a0 01 	sts	0x01A0, r24
	guest_mode++;
 470:	90 91 a1 01 	lds	r25, 0x01A1
 474:	9f 5f       	subi	r25, 0xFF	; 255
 476:	90 93 a1 01 	sts	0x01A1, r25
	if (admin_mode==255 && state==0)			// 1.5sec
 47a:	8f 3f       	cpi	r24, 0xFF	; 255
 47c:	a1 f4       	brne	.+40     	; 0x4a6 <__vector_11+0x4e>
 47e:	80 91 9a 01 	lds	r24, 0x019A
 482:	88 23       	and	r24, r24
 484:	81 f4       	brne	.+32     	; 0x4a6 <__vector_11+0x4e>
	{
		
		TOGBIT(PORTC,0);
 486:	95 b3       	in	r25, 0x15	; 21
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	89 27       	eor	r24, r25
 48c:	85 bb       	out	0x15, r24	; 21
		admin_mode=0;
 48e:	10 92 a0 01 	sts	0x01A0, r1
		guest_mode=0;
 492:	10 92 a1 01 	sts	0x01A1, r1
		count=0;
 496:	10 92 9e 01 	sts	0x019E, r1
		start_msg=0;
 49a:	10 92 9f 01 	sts	0x019F, r1
		CLRBIT(TIMSK,TOIE0);
 49e:	89 b7       	in	r24, 0x39	; 57
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	89 bf       	out	0x39, r24	; 57
 4a4:	12 c0       	rjmp	.+36     	; 0x4ca <__vector_11+0x72>
	}
	else if (guest_mode==255 && state==1)	// 1.5sec
 4a6:	9f 3f       	cpi	r25, 0xFF	; 255
 4a8:	81 f4       	brne	.+32     	; 0x4ca <__vector_11+0x72>
 4aa:	80 91 9a 01 	lds	r24, 0x019A
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	61 f4       	brne	.+24     	; 0x4ca <__vector_11+0x72>
	{
		
		CLRBIT(PORTC,2);
 4b2:	aa 98       	cbi	0x15, 2	; 21
		admin_mode=0;
 4b4:	10 92 a0 01 	sts	0x01A0, r1
		guest_mode=0;
 4b8:	10 92 a1 01 	sts	0x01A1, r1
		count=0;
 4bc:	10 92 9e 01 	sts	0x019E, r1
		start_msg=0;
 4c0:	10 92 9f 01 	sts	0x019F, r1
		CLRBIT(TIMSK,TOIE0);
 4c4:	89 b7       	in	r24, 0x39	; 57
 4c6:	8e 7f       	andi	r24, 0xFE	; 254
 4c8:	89 bf       	out	0x39, r24	; 57
	}
}
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <admin_display>:
void admin_display(){
	LCD_write_string("1>Room1");
 4d8:	80 e7       	ldi	r24, 0x70	; 112
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0x88);
 4e0:	88 e8       	ldi	r24, 0x88	; 136
 4e2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("2>Room2");
 4e6:	88 e7       	ldi	r24, 0x78	; 120
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc0);
 4ee:	80 ec       	ldi	r24, 0xC0	; 192
 4f0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("3>Room3");
 4f4:	80 e8       	ldi	r24, 0x80	; 128
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc8);
 4fc:	88 ec       	ldi	r24, 0xC8	; 200
 4fe:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("4>More");
 502:	88 e8       	ldi	r24, 0x88	; 136
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
}
 50a:	08 95       	ret

0000050c <ADMIN>:
			break;				
		}
	}
}
void ADMIN(){
	SETBIT(PORTC,0);
 50c:	a8 9a       	sbi	0x15, 0	; 21
	SETBIT(TIMSK,TOIE0);
 50e:	89 b7       	in	r24, 0x39	; 57
 510:	81 60       	ori	r24, 0x01	; 1
 512:	89 bf       	out	0x39, r24	; 57
	admin_display();
 514:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>
	count=5;
 518:	85 e0       	ldi	r24, 0x05	; 5
 51a:	80 93 9e 01 	sts	0x019E, r24
//	count=0;
//	start_msg=0;
//	_delay_ms(3000);
//	LCD_write_command(1);
//	SETBIT(PORTC,0);
}
 51e:	08 95       	ret

00000520 <admin_display2>:
	LCD_write_string("3>Room3");
	LCD_write_command(0xc8);
	LCD_write_string("4>More");
}
void admin_display2(){
	LCD_write_string("1>Room4");
 520:	8f e8       	ldi	r24, 0x8F	; 143
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0x88);
 528:	88 e8       	ldi	r24, 0x88	; 136
 52a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("2>TV");
 52e:	87 e9       	ldi	r24, 0x97	; 151
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc0);
 536:	80 ec       	ldi	r24, 0xC0	; 192
 538:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("3>COND");
 53c:	8c e9       	ldi	r24, 0x9C	; 156
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc8);
 544:	88 ec       	ldi	r24, 0xC8	; 200
 546:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("4>back");
 54a:	83 ea       	ldi	r24, 0xA3	; 163
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
}
 552:	08 95       	ret

00000554 <guest_display>:
void guest_display(){
	LCD_write_string("1>Room1");
 554:	80 e7       	ldi	r24, 0x70	; 112
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0x88);
 55c:	88 e8       	ldi	r24, 0x88	; 136
 55e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("2>Room2");
 562:	88 e7       	ldi	r24, 0x78	; 120
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc0);
 56a:	80 ec       	ldi	r24, 0xC0	; 192
 56c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("3>Room3");
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
	LCD_write_command(0xc8);
 578:	88 ec       	ldi	r24, 0xC8	; 200
 57a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
	LCD_write_string("4>Room4");
 57e:	8a ea       	ldi	r24, 0xAA	; 170
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 586:	08 95       	ret

00000588 <GUEST>:
//	_delay_ms(3000);
//	LCD_write_command(1);
//	SETBIT(PORTC,0);
}
void GUEST(){
	SETBIT(PORTC,2);
 588:	aa 9a       	sbi	0x15, 2	; 21
	SETBIT(TIMSK,TOIE0);
 58a:	89 b7       	in	r24, 0x39	; 57
 58c:	81 60       	ori	r24, 0x01	; 1
 58e:	89 bf       	out	0x39, r24	; 57
	guest_display();
 590:	0e 94 aa 02 	call	0x554	; 0x554 <guest_display>
	count=5;	
 594:	85 e0       	ldi	r24, 0x05	; 5
 596:	80 93 9e 01 	sts	0x019E, r24
//	count=0;
//	start_msg=0;
	//_delay_ms(3000);
	//LCD_write_command(1);
	//CLRBIT(PORTC,2);
}
 59a:	08 95       	ret

0000059c <get_password>:
		}*/
	}
}

void get_password ()
{
 59c:	cf 93       	push	r28

//	LCD_write_command(0x80);
//	LCD_write_string("enter password");
	int8_t key=keypad_read();
 59e:	0e 94 66 00 	call	0xcc	; 0xcc <keypad_read>
 5a2:	c8 2f       	mov	r28, r24
	if(key != -1 && key!='N'){
 5a4:	8f 3f       	cpi	r24, 0xFF	; 255
 5a6:	09 f4       	brne	.+2      	; 0x5aa <get_password+0xe>
 5a8:	b9 c2       	rjmp	.+1394   	; 0xb1c <__stack+0x2bd>
 5aa:	8e 34       	cpi	r24, 0x4E	; 78
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <get_password+0x14>
 5ae:	b6 c2       	rjmp	.+1388   	; 0xb1c <__stack+0x2bd>
		switch (count)
 5b0:	80 91 9e 01 	lds	r24, 0x019E
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	09 f4       	brne	.+2      	; 0x5ba <get_password+0x1e>
 5b8:	a1 c0       	rjmp	.+322    	; 0x6fc <get_password+0x160>
 5ba:	84 30       	cpi	r24, 0x04	; 4
 5bc:	38 f4       	brcc	.+14     	; 0x5cc <get_password+0x30>
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <get_password+0x28>
 5c2:	60 c0       	rjmp	.+192    	; 0x684 <get_password+0xe8>
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	08 f0       	brcs	.+2      	; 0x5ca <get_password+0x2e>
 5c8:	7b c0       	rjmp	.+246    	; 0x6c0 <get_password+0x124>
 5ca:	0a c0       	rjmp	.+20     	; 0x5e0 <get_password+0x44>
 5cc:	85 30       	cpi	r24, 0x05	; 5
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <get_password+0x36>
 5d0:	c6 c1       	rjmp	.+908    	; 0x95e <__stack+0xff>
 5d2:	85 30       	cpi	r24, 0x05	; 5
 5d4:	08 f4       	brcc	.+2      	; 0x5d8 <get_password+0x3c>
 5d6:	b0 c0       	rjmp	.+352    	; 0x738 <get_password+0x19c>
 5d8:	86 30       	cpi	r24, 0x06	; 6
 5da:	09 f0       	breq	.+2      	; 0x5de <get_password+0x42>
 5dc:	9f c2       	rjmp	.+1342   	; 0xb1c <__stack+0x2bd>
 5de:	64 c2       	rjmp	.+1224   	; 0xaa8 <__stack+0x249>
		{
			case 0 :
			if (key-48==0)
 5e0:	c0 33       	cpi	r28, 0x30	; 48
 5e2:	b1 f4       	brne	.+44     	; 0x610 <get_password+0x74>
			{
				block_mode=0;
 5e4:	10 92 a7 01 	sts	0x01A7, r1
				EEPROM_write(30,0);
 5e8:	8e e1       	ldi	r24, 0x1E	; 30
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				state=0;
 5f2:	10 92 9a 01 	sts	0x019A, r1
				count++;
 5f6:	80 91 9e 01 	lds	r24, 0x019E
 5fa:	8f 5f       	subi	r24, 0xFF	; 255
 5fc:	80 93 9e 01 	sts	0x019E, r24
				LCD_write_command(1);
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Admin password");
 606:	82 eb       	ldi	r24, 0xB2	; 178
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 60e:	30 c0       	rjmp	.+96     	; 0x670 <get_password+0xd4>
				
			}
			else if (key-48==1)
 610:	c1 33       	cpi	r28, 0x31	; 49
 612:	b9 f4       	brne	.+46     	; 0x642 <get_password+0xa6>
			{
				block_mode=0;
 614:	10 92 a7 01 	sts	0x01A7, r1
				EEPROM_write(30,0);
 618:	8e e1       	ldi	r24, 0x1E	; 30
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				state=1;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	80 93 9a 01 	sts	0x019A, r24
				count++;
 628:	80 91 9e 01 	lds	r24, 0x019E
 62c:	8f 5f       	subi	r24, 0xFF	; 255
 62e:	80 93 9e 01 	sts	0x019E, r24
				LCD_write_command(1);
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Guest password");
 638:	81 ec       	ldi	r24, 0xC1	; 193
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 640:	17 c0       	rjmp	.+46     	; 0x670 <get_password+0xd4>
				
			}
			else {
				LCD_write_command(1);
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("wrong entry");
 648:	80 ed       	ldi	r24, 0xD0	; 208
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	93 ec       	ldi	r25, 0xC3	; 195
 654:	a9 e0       	ldi	r26, 0x09	; 9
 656:	81 50       	subi	r24, 0x01	; 1
 658:	90 40       	sbci	r25, 0x00	; 0
 65a:	a0 40       	sbci	r26, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <get_password+0xba>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <get_password+0xc4>
 660:	00 00       	nop
				_delay_ms(200);
				LCD_write_command(1);
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("0>admin&1>guest ");
 668:	8c ed       	ldi	r24, 0xDC	; 220
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 670:	8f ef       	ldi	r24, 0xFF	; 255
 672:	93 ec       	ldi	r25, 0xC3	; 195
 674:	a9 e0       	ldi	r26, 0x09	; 9
 676:	81 50       	subi	r24, 0x01	; 1
 678:	90 40       	sbci	r25, 0x00	; 0
 67a:	a0 40       	sbci	r26, 0x00	; 0
 67c:	e1 f7       	brne	.-8      	; 0x676 <get_password+0xda>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <get_password+0xe4>
 680:	00 00       	nop
 682:	4c c2       	rjmp	.+1176   	; 0xb1c <__stack+0x2bd>
			}
			_delay_ms(200);
			break;
			case 1 :
			LCD_write_command(0xc3);
 684:	83 ec       	ldi	r24, 0xC3	; 195
 686:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 68a:	8c 2f       	mov	r24, r28
 68c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	91 ee       	ldi	r25, 0xE1	; 225
 694:	a4 e0       	ldi	r26, 0x04	; 4
 696:	81 50       	subi	r24, 0x01	; 1
 698:	90 40       	sbci	r25, 0x00	; 0
 69a:	a0 40       	sbci	r26, 0x00	; 0
 69c:	e1 f7       	brne	.-8      	; 0x696 <get_password+0xfa>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <get_password+0x104>
 6a0:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc3);
 6a2:	83 ec       	ldi	r24, 0xC3	; 195
 6a4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 6a8:	8a e2       	ldi	r24, 0x2A	; 42
 6aa:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			c1=key-48;   // first digit of entered password from user
 6ae:	c0 53       	subi	r28, 0x30	; 48
 6b0:	c0 93 a9 01 	sts	0x01A9, r28
			count++;
 6b4:	80 91 9e 01 	lds	r24, 0x019E
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	80 93 9e 01 	sts	0x019E, r24
			break;
 6be:	2e c2       	rjmp	.+1116   	; 0xb1c <__stack+0x2bd>
			case 2 :
			LCD_write_command(0xc4);
 6c0:	84 ec       	ldi	r24, 0xC4	; 196
 6c2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 6c6:	8c 2f       	mov	r24, r28
 6c8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	91 ee       	ldi	r25, 0xE1	; 225
 6d0:	a4 e0       	ldi	r26, 0x04	; 4
 6d2:	81 50       	subi	r24, 0x01	; 1
 6d4:	90 40       	sbci	r25, 0x00	; 0
 6d6:	a0 40       	sbci	r26, 0x00	; 0
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <get_password+0x136>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <get_password+0x140>
 6dc:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc4);
 6de:	84 ec       	ldi	r24, 0xC4	; 196
 6e0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 6e4:	8a e2       	ldi	r24, 0x2A	; 42
 6e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			c2=key-48;  // second digit of entered password from user
 6ea:	c0 53       	subi	r28, 0x30	; 48
 6ec:	c0 93 a6 01 	sts	0x01A6, r28
			count++;
 6f0:	80 91 9e 01 	lds	r24, 0x019E
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	80 93 9e 01 	sts	0x019E, r24
			break;
 6fa:	10 c2       	rjmp	.+1056   	; 0xb1c <__stack+0x2bd>
			case 3 :
			LCD_write_command(0xc5);
 6fc:	85 ec       	ldi	r24, 0xC5	; 197
 6fe:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 702:	8c 2f       	mov	r24, r28
 704:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	91 ee       	ldi	r25, 0xE1	; 225
 70c:	a4 e0       	ldi	r26, 0x04	; 4
 70e:	81 50       	subi	r24, 0x01	; 1
 710:	90 40       	sbci	r25, 0x00	; 0
 712:	a0 40       	sbci	r26, 0x00	; 0
 714:	e1 f7       	brne	.-8      	; 0x70e <get_password+0x172>
 716:	00 c0       	rjmp	.+0      	; 0x718 <get_password+0x17c>
 718:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc5);
 71a:	85 ec       	ldi	r24, 0xC5	; 197
 71c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 720:	8a e2       	ldi	r24, 0x2A	; 42
 722:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			c3=key-48;   // third digit of entered password from user
 726:	c0 53       	subi	r28, 0x30	; 48
 728:	c0 93 aa 01 	sts	0x01AA, r28
			count++;
 72c:	80 91 9e 01 	lds	r24, 0x019E
 730:	8f 5f       	subi	r24, 0xFF	; 255
 732:	80 93 9e 01 	sts	0x019E, r24
			break;
 736:	f2 c1       	rjmp	.+996    	; 0xb1c <__stack+0x2bd>
			case 4 :
			LCD_write_command(0xc6);
 738:	86 ec       	ldi	r24, 0xC6	; 198
 73a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char(key);
 73e:	8c 2f       	mov	r24, r28
 740:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	91 ee       	ldi	r25, 0xE1	; 225
 748:	a4 e0       	ldi	r26, 0x04	; 4
 74a:	81 50       	subi	r24, 0x01	; 1
 74c:	90 40       	sbci	r25, 0x00	; 0
 74e:	a0 40       	sbci	r26, 0x00	; 0
 750:	e1 f7       	brne	.-8      	; 0x74a <get_password+0x1ae>
 752:	00 c0       	rjmp	.+0      	; 0x754 <get_password+0x1b8>
 754:	00 00       	nop
			_delay_ms(100);
			LCD_write_command(0xc6);
 756:	86 ec       	ldi	r24, 0xC6	; 198
 758:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_char('*');
 75c:	8a e2       	ldi	r24, 0x2A	; 42
 75e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_write_char>
			LCD_write_command(1);
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			c4=key-48;  // forth digit of entered password from user
 768:	8c 2f       	mov	r24, r28
 76a:	80 53       	subi	r24, 0x30	; 48
 76c:	80 93 a5 01 	sts	0x01A5, r24
			
			if (( c1==a1&&c2==a2&&c3==a3&&c4==a4) && state==0 && initial==0){
 770:	60 91 a9 01 	lds	r22, 0x01A9
 774:	90 91 99 01 	lds	r25, 0x0199
 778:	69 17       	cp	r22, r25
 77a:	d9 f4       	brne	.+54     	; 0x7b2 <get_password+0x216>
 77c:	20 91 a6 01 	lds	r18, 0x01A6
 780:	90 91 98 01 	lds	r25, 0x0198
 784:	29 17       	cp	r18, r25
 786:	a9 f4       	brne	.+42     	; 0x7b2 <get_password+0x216>
 788:	20 91 aa 01 	lds	r18, 0x01AA
 78c:	90 91 97 01 	lds	r25, 0x0197
 790:	29 17       	cp	r18, r25
 792:	79 f4       	brne	.+30     	; 0x7b2 <get_password+0x216>
 794:	90 91 96 01 	lds	r25, 0x0196
 798:	89 17       	cp	r24, r25
 79a:	59 f4       	brne	.+22     	; 0x7b2 <get_password+0x216>
 79c:	90 91 9a 01 	lds	r25, 0x019A
 7a0:	99 23       	and	r25, r25
 7a2:	39 f4       	brne	.+14     	; 0x7b2 <get_password+0x216>
 7a4:	90 91 9d 01 	lds	r25, 0x019D
 7a8:	99 23       	and	r25, r25
 7aa:	19 f4       	brne	.+6      	; 0x7b2 <get_password+0x216>
				/*call function to enter admin mode */
				key=-1;
				ADMIN();
 7ac:	0e 94 86 02 	call	0x50c	; 0x50c <ADMIN>
 7b0:	b5 c1       	rjmp	.+874    	; 0xb1c <__stack+0x2bd>
			}
			else if (( c1==g1&&c2==g2&&c3==g3&&c4==g4)&& state==1 && initial==0 ){
 7b2:	90 91 a4 01 	lds	r25, 0x01A4
 7b6:	69 17       	cp	r22, r25
 7b8:	d9 f4       	brne	.+54     	; 0x7f0 <get_password+0x254>
 7ba:	20 91 a6 01 	lds	r18, 0x01A6
 7be:	90 91 a8 01 	lds	r25, 0x01A8
 7c2:	29 17       	cp	r18, r25
 7c4:	a9 f4       	brne	.+42     	; 0x7f0 <get_password+0x254>
 7c6:	20 91 aa 01 	lds	r18, 0x01AA
 7ca:	90 91 a3 01 	lds	r25, 0x01A3
 7ce:	29 17       	cp	r18, r25
 7d0:	79 f4       	brne	.+30     	; 0x7f0 <get_password+0x254>
 7d2:	90 91 a2 01 	lds	r25, 0x01A2
 7d6:	89 17       	cp	r24, r25
 7d8:	59 f4       	brne	.+22     	; 0x7f0 <get_password+0x254>
 7da:	80 91 9a 01 	lds	r24, 0x019A
 7de:	81 30       	cpi	r24, 0x01	; 1
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <get_password+0x254>
 7e2:	80 91 9d 01 	lds	r24, 0x019D
 7e6:	88 23       	and	r24, r24
 7e8:	19 f4       	brne	.+6      	; 0x7f0 <get_password+0x254>
				/*call function to enter guest mode */
				GUEST();
 7ea:	0e 94 c4 02 	call	0x588	; 0x588 <GUEST>
 7ee:	b7 c0       	rjmp	.+366    	; 0x95e <__stack+0xff>
			}
			else if (initial==1 && state==0 ){
 7f0:	80 91 9d 01 	lds	r24, 0x019D
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	29 f5       	brne	.+74     	; 0x842 <get_password+0x2a6>
 7f8:	90 91 9a 01 	lds	r25, 0x019A
 7fc:	99 23       	and	r25, r25
 7fe:	09 f5       	brne	.+66     	; 0x842 <get_password+0x2a6>
				EEPROM_write(20,c1);
 800:	84 e1       	ldi	r24, 0x14	; 20
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(21,c2);
 808:	85 e1       	ldi	r24, 0x15	; 21
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	60 91 a6 01 	lds	r22, 0x01A6
 810:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(22,c3);
 814:	86 e1       	ldi	r24, 0x16	; 22
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	60 91 aa 01 	lds	r22, 0x01AA
 81c:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(23,c4);
 820:	87 e1       	ldi	r24, 0x17	; 23
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	60 91 a5 01 	lds	r22, 0x01A5
 828:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(24,15);
 82c:	88 e1       	ldi	r24, 0x18	; 24
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	6f e0       	ldi	r22, 0x0F	; 15
 832:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				initial++;
 836:	80 91 9d 01 	lds	r24, 0x019D
 83a:	8f 5f       	subi	r24, 0xFF	; 255
 83c:	80 93 9d 01 	sts	0x019D, r24
 840:	8e c0       	rjmp	.+284    	; 0x95e <__stack+0xff>
				
			}
			else if (initial==3&& state==1 ){
 842:	83 30       	cpi	r24, 0x03	; 3
 844:	39 f5       	brne	.+78     	; 0x894 <__stack+0x35>
 846:	80 91 9a 01 	lds	r24, 0x019A
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	19 f5       	brne	.+70     	; 0x894 <__stack+0x35>
				EEPROM_write(25,c1);
 84e:	89 e1       	ldi	r24, 0x19	; 25
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(26,c2);
 856:	8a e1       	ldi	r24, 0x1A	; 26
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	60 91 a6 01 	lds	r22, 0x01A6
 85e:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(27,c3);
 862:	8b e1       	ldi	r24, 0x1B	; 27
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	60 91 aa 01 	lds	r22, 0x01AA
 86a:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(28,c4);
 86e:	8c e1       	ldi	r24, 0x1C	; 28
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	60 91 a5 01 	lds	r22, 0x01A5
 876:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				EEPROM_write(29,15);
 87a:	8d e1       	ldi	r24, 0x1D	; 29
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	6f e0       	ldi	r22, 0x0F	; 15
 880:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				initial++;
 884:	80 91 9d 01 	lds	r24, 0x019D
 888:	8f 5f       	subi	r24, 0xFF	; 255
 88a:	80 93 9d 01 	sts	0x019D, r24
				start_msg=0;
 88e:	10 92 9f 01 	sts	0x019F, r1
 892:	65 c0       	rjmp	.+202    	; 0x95e <__stack+0xff>
			}
			
			else {
				block_mode++;
 894:	80 91 a7 01 	lds	r24, 0x01A7
 898:	8f 5f       	subi	r24, 0xFF	; 255
 89a:	80 93 a7 01 	sts	0x01A7, r24
				LCD_write_command(1);
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Wrong password");
 8a4:	8d ee       	ldi	r24, 0xED	; 237
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 8ac:	8f ef       	ldi	r24, 0xFF	; 255
 8ae:	95 ea       	ldi	r25, 0xA5	; 165
 8b0:	ae e0       	ldi	r26, 0x0E	; 14
 8b2:	81 50       	subi	r24, 0x01	; 1
 8b4:	90 40       	sbci	r25, 0x00	; 0
 8b6:	a0 40       	sbci	r26, 0x00	; 0
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <__stack+0x5d>
 8bc:	00 00       	nop
				_delay_ms(300);
				LCD_write_command(1);
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_num(3-block_mode);
 8c4:	80 91 a7 01 	lds	r24, 0x01A7
 8c8:	63 e0       	ldi	r22, 0x03	; 3
 8ca:	70 e0       	ldi	r23, 0x00	; 0
 8cc:	68 1b       	sub	r22, r24
 8ce:	71 09       	sbc	r23, r1
 8d0:	88 27       	eor	r24, r24
 8d2:	77 fd       	sbrc	r23, 7
 8d4:	80 95       	com	r24
 8d6:	98 2f       	mov	r25, r24
 8d8:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_write_num>
				LCD_write_string(" Tries left");
 8dc:	8c ef       	ldi	r24, 0xFC	; 252
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	91 ee       	ldi	r25, 0xE1	; 225
 8e8:	a4 e0       	ldi	r26, 0x04	; 4
 8ea:	81 50       	subi	r24, 0x01	; 1
 8ec:	90 40       	sbci	r25, 0x00	; 0
 8ee:	a0 40       	sbci	r26, 0x00	; 0
 8f0:	e1 f7       	brne	.-8      	; 0x8ea <__stack+0x8b>
 8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <__stack+0x95>
 8f4:	00 00       	nop
				_delay_ms(100);
				EEPROM_write(30,block_mode);				
 8f6:	8e e1       	ldi	r24, 0x1E	; 30
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	60 91 a7 01 	lds	r22, 0x01A7
 8fe:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				count=1;
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	80 93 9e 01 	sts	0x019E, r24
				if(block_mode==3){
 908:	80 91 a7 01 	lds	r24, 0x01A7
 90c:	83 30       	cpi	r24, 0x03	; 3
 90e:	39 f5       	brne	.+78     	; 0x95e <__stack+0xff>
				SETBIT(PORTC,4);
 910:	ac 9a       	sbi	0x15, 4	; 21
				LCD_write_command(1);
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("you are blocked");
 918:	88 e0       	ldi	r24, 0x08	; 8
 91a:	91 e0       	ldi	r25, 0x01	; 1
 91c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 920:	80 ec       	ldi	r24, 0xC0	; 192
 922:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("for 20 sec");
 926:	88 e1       	ldi	r24, 0x18	; 24
 928:	91 e0       	ldi	r25, 0x01	; 1
 92a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 92e:	8f ef       	ldi	r24, 0xFF	; 255
 930:	97 ea       	ldi	r25, 0xA7	; 167
 932:	a1 e6       	ldi	r26, 0x61	; 97
 934:	81 50       	subi	r24, 0x01	; 1
 936:	90 40       	sbci	r25, 0x00	; 0
 938:	a0 40       	sbci	r26, 0x00	; 0
 93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0xd5>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0xdf>
 93e:	00 00       	nop
				_delay_ms(2000);
				CLRBIT(PORTC,4);
 940:	ac 98       	cbi	0x15, 4	; 21
				LCD_write_command(1);
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Enter right pass");
 948:	83 e2       	ldi	r24, 0x23	; 35
 94a:	91 e0       	ldi	r25, 0x01	; 1
 94c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				block_mode=0;
 950:	10 92 a7 01 	sts	0x01A7, r1
				EEPROM_write(30,0);
 954:	8e e1       	ldi	r24, 0x1E	; 30
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
				}
			}
			case 5:
			switch (key){
 95e:	c3 33       	cpi	r28, 0x33	; 51
 960:	b9 f1       	breq	.+110    	; 0x9d0 <__stack+0x171>
 962:	c4 33       	cpi	r28, 0x34	; 52
 964:	44 f4       	brge	.+16     	; 0x976 <__stack+0x117>
 966:	c1 33       	cpi	r28, 0x31	; 49
 968:	79 f0       	breq	.+30     	; 0x988 <__stack+0x129>
 96a:	c2 33       	cpi	r28, 0x32	; 50
 96c:	fc f4       	brge	.+62     	; 0x9ac <__stack+0x14d>
 96e:	cf 3f       	cpi	r28, 0xFF	; 255
 970:	09 f0       	breq	.+2      	; 0x974 <__stack+0x115>
 972:	84 c0       	rjmp	.+264    	; 0xa7c <__stack+0x21d>
 974:	d3 c0       	rjmp	.+422    	; 0xb1c <__stack+0x2bd>
 976:	c5 33       	cpi	r28, 0x35	; 53
 978:	09 f4       	brne	.+2      	; 0x97c <__stack+0x11d>
 97a:	4e c0       	rjmp	.+156    	; 0xa18 <__stack+0x1b9>
 97c:	c5 33       	cpi	r28, 0x35	; 53
 97e:	d4 f1       	brlt	.+116    	; 0x9f4 <__stack+0x195>
 980:	c6 33       	cpi	r28, 0x36	; 54
 982:	09 f0       	breq	.+2      	; 0x986 <__stack+0x127>
 984:	7b c0       	rjmp	.+246    	; 0xa7c <__stack+0x21d>
 986:	61 c0       	rjmp	.+194    	; 0xa4a <__stack+0x1eb>
				case '1':
				LCD_write_command(1);
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 1");
 98e:	84 e3       	ldi	r24, 0x34	; 52
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 996:	80 ec       	ldi	r24, 0xC0	; 192
 998:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 99c:	8b e3       	ldi	r24, 0x3B	; 59
 99e:	91 e0       	ldi	r25, 0x01	; 1
 9a0:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				count=6;
 9a4:	86 e0       	ldi	r24, 0x06	; 6
 9a6:	80 93 9e 01 	sts	0x019E, r24
				break;
 9aa:	b8 c0       	rjmp	.+368    	; 0xb1c <__stack+0x2bd>
				case '2':
				LCD_write_command(1);
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 2");
 9b2:	8d e4       	ldi	r24, 0x4D	; 77
 9b4:	91 e0       	ldi	r25, 0x01	; 1
 9b6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 9ba:	80 ec       	ldi	r24, 0xC0	; 192
 9bc:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 9c0:	8b e3       	ldi	r24, 0x3B	; 59
 9c2:	91 e0       	ldi	r25, 0x01	; 1
 9c4:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				count=6;
 9c8:	86 e0       	ldi	r24, 0x06	; 6
 9ca:	80 93 9e 01 	sts	0x019E, r24
				break;
 9ce:	a6 c0       	rjmp	.+332    	; 0xb1c <__stack+0x2bd>
				case '3':
				LCD_write_command(1);
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 3");
 9d6:	84 e5       	ldi	r24, 0x54	; 84
 9d8:	91 e0       	ldi	r25, 0x01	; 1
 9da:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 9de:	80 ec       	ldi	r24, 0xC0	; 192
 9e0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 9e4:	8b e3       	ldi	r24, 0x3B	; 59
 9e6:	91 e0       	ldi	r25, 0x01	; 1
 9e8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				count=6;
 9ec:	86 e0       	ldi	r24, 0x06	; 6
 9ee:	80 93 9e 01 	sts	0x019E, r24
				break;
 9f2:	94 c0       	rjmp	.+296    	; 0xb1c <__stack+0x2bd>
				case '4':
				LCD_write_command(1);
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 4");
 9fa:	8b e5       	ldi	r24, 0x5B	; 91
 9fc:	91 e0       	ldi	r25, 0x01	; 1
 9fe:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 a02:	80 ec       	ldi	r24, 0xC0	; 192
 a04:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 a08:	8b e3       	ldi	r24, 0x3B	; 59
 a0a:	91 e0       	ldi	r25, 0x01	; 1
 a0c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				count=6;
 a10:	86 e0       	ldi	r24, 0x06	; 6
 a12:	80 93 9e 01 	sts	0x019E, r24
				break;
 a16:	82 c0       	rjmp	.+260    	; 0xb1c <__stack+0x2bd>
				case '5':
				if (state==0){
 a18:	80 91 9a 01 	lds	r24, 0x019A
 a1c:	88 23       	and	r24, r24
 a1e:	91 f4       	brne	.+36     	; 0xa44 <__stack+0x1e5>
				LCD_write_command(1);
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("TV");
 a26:	82 e6       	ldi	r24, 0x62	; 98
 a28:	91 e0       	ldi	r25, 0x01	; 1
 a2a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 a2e:	80 ec       	ldi	r24, 0xC0	; 192
 a30:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 a34:	8b e3       	ldi	r24, 0x3B	; 59
 a36:	91 e0       	ldi	r25, 0x01	; 1
 a38:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				count=6;
 a3c:	86 e0       	ldi	r24, 0x06	; 6
 a3e:	80 93 9e 01 	sts	0x019E, r24
 a42:	6c c0       	rjmp	.+216    	; 0xb1c <__stack+0x2bd>
				}
				else {
					guest_display();
 a44:	0e 94 aa 02 	call	0x554	; 0x554 <guest_display>
 a48:	69 c0       	rjmp	.+210    	; 0xb1c <__stack+0x2bd>

				}
				break;
				case '6':
			if(state==0){
 a4a:	80 91 9a 01 	lds	r24, 0x019A
 a4e:	88 23       	and	r24, r24
 a50:	91 f4       	brne	.+36     	; 0xa76 <__stack+0x217>
				LCD_write_command(1);
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("COND");
 a58:	85 e6       	ldi	r24, 0x65	; 101
 a5a:	91 e0       	ldi	r25, 0x01	; 1
 a5c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 a60:	80 ec       	ldi	r24, 0xC0	; 192
 a62:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("1>on 2>off 3>back");
 a66:	8b e3       	ldi	r24, 0x3B	; 59
 a68:	91 e0       	ldi	r25, 0x01	; 1
 a6a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				count=6;
 a6e:	86 e0       	ldi	r24, 0x06	; 6
 a70:	80 93 9e 01 	sts	0x019E, r24
 a74:	53 c0       	rjmp	.+166    	; 0xb1c <__stack+0x2bd>
				}				
				else {
					guest_display();
 a76:	0e 94 aa 02 	call	0x554	; 0x554 <guest_display>
 a7a:	50 c0       	rjmp	.+160    	; 0xb1c <__stack+0x2bd>
				}
				break;
				case -1:
				break;
				default:
				LCD_write_command(1);
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("wrong entry");
 a82:	80 ed       	ldi	r24, 0xD0	; 208
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 a8a:	8f ef       	ldi	r24, 0xFF	; 255
 a8c:	91 ee       	ldi	r25, 0xE1	; 225
 a8e:	a4 e0       	ldi	r26, 0x04	; 4
 a90:	81 50       	subi	r24, 0x01	; 1
 a92:	90 40       	sbci	r25, 0x00	; 0
 a94:	a0 40       	sbci	r26, 0x00	; 0
 a96:	e1 f7       	brne	.-8      	; 0xa90 <__stack+0x231>
 a98:	00 c0       	rjmp	.+0      	; 0xa9a <__stack+0x23b>
 a9a:	00 00       	nop
				_delay_ms(100);
				LCD_write_command(1);
 a9c:	81 e0       	ldi	r24, 0x01	; 1
 a9e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				admin_display();
 aa2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <admin_display>

				break;
 aa6:	3a c0       	rjmp	.+116    	; 0xb1c <__stack+0x2bd>
			}
			break;
			case 6:
			switch (key){
 aa8:	c2 33       	cpi	r28, 0x32	; 50
 aaa:	99 f0       	breq	.+38     	; 0xad2 <__stack+0x273>
 aac:	c3 33       	cpi	r28, 0x33	; 51
 aae:	01 f1       	breq	.+64     	; 0xaf0 <__stack+0x291>
 ab0:	c1 33       	cpi	r28, 0x31	; 49
 ab2:	69 f5       	brne	.+90     	; 0xb0e <__stack+0x2af>
				case '1':
				LCD_write_command(1);
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 1");
 aba:	84 e3       	ldi	r24, 0x34	; 52
 abc:	91 e0       	ldi	r25, 0x01	; 1
 abe:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 ac2:	80 ec       	ldi	r24, 0xC0	; 192
 ac4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("action");
 ac8:	8a e6       	ldi	r24, 0x6A	; 106
 aca:	91 e0       	ldi	r25, 0x01	; 1
 acc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				
				break;
 ad0:	25 c0       	rjmp	.+74     	; 0xb1c <__stack+0x2bd>
				case '2':
				LCD_write_command(1);
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 1");
 ad8:	84 e3       	ldi	r24, 0x34	; 52
 ada:	91 e0       	ldi	r25, 0x01	; 1
 adc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 ae0:	80 ec       	ldi	r24, 0xC0	; 192
 ae2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("action");
 ae6:	8a e6       	ldi	r24, 0x6A	; 106
 ae8:	91 e0       	ldi	r25, 0x01	; 1
 aea:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				break;
 aee:	16 c0       	rjmp	.+44     	; 0xb1c <__stack+0x2bd>
				case '3':
				LCD_write_command(1);
 af0:	81 e0       	ldi	r24, 0x01	; 1
 af2:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("Room 1");
 af6:	84 e3       	ldi	r24, 0x34	; 52
 af8:	91 e0       	ldi	r25, 0x01	; 1
 afa:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				LCD_write_command(0xc0);
 afe:	80 ec       	ldi	r24, 0xC0	; 192
 b00:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("back");
 b04:	81 e7       	ldi	r24, 0x71	; 113
 b06:	91 e0       	ldi	r25, 0x01	; 1
 b08:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				break;
 b0c:	07 c0       	rjmp	.+14     	; 0xb1c <__stack+0x2bd>
				default:
				LCD_write_command(1);
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
				LCD_write_string("wrong entry");
 b14:	80 ed       	ldi	r24, 0xD0	; 208
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
				break;
			}
			break;				
		}
	}
}
 b1c:	cf 91       	pop	r28
 b1e:	08 95       	ret

00000b20 <main>:
uint8_t state=0; // Admin(0) or guest(1)
uint8_t a1=1,a2=2,a3=3,a4=4; // right password digits --> admin
uint8_t g1,g2,g3,g4;		//right password digits	--> guest
uint8_t c1,c2,c3,c4; // password digits entered by user
int main(void){
	Set_admin_pass=EEPROM_read(24);
 b20:	88 e1       	ldi	r24, 0x18	; 24
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b28:	80 93 9c 01 	sts	0x019C, r24
	Set_guest_pass=EEPROM_read(29);
 b2c:	8d e1       	ldi	r24, 0x1D	; 29
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b34:	80 93 9b 01 	sts	0x019B, r24
	a1=EEPROM_read(20); // first digit of admin mode
 b38:	84 e1       	ldi	r24, 0x14	; 20
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b40:	80 93 99 01 	sts	0x0199, r24
	a2=EEPROM_read(21);	// second digit of admin mode
 b44:	85 e1       	ldi	r24, 0x15	; 21
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b4c:	80 93 98 01 	sts	0x0198, r24
	a3=EEPROM_read(22);	// third digit of admin mode
 b50:	86 e1       	ldi	r24, 0x16	; 22
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b58:	80 93 97 01 	sts	0x0197, r24
	a4=EEPROM_read(23);	// forth digit of admin mode
 b5c:	87 e1       	ldi	r24, 0x17	; 23
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b64:	80 93 96 01 	sts	0x0196, r24
	g1=EEPROM_read(25);	// first digit of guest mode
 b68:	89 e1       	ldi	r24, 0x19	; 25
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b70:	80 93 a4 01 	sts	0x01A4, r24
	g2=EEPROM_read(26);	// second digit of guest mode
 b74:	8a e1       	ldi	r24, 0x1A	; 26
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b7c:	80 93 a8 01 	sts	0x01A8, r24
	g3=EEPROM_read(27);	// third digit of guest mode
 b80:	8b e1       	ldi	r24, 0x1B	; 27
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b88:	80 93 a3 01 	sts	0x01A3, r24
	g4=EEPROM_read(28);	// forth digit of guest mode
 b8c:	8c e1       	ldi	r24, 0x1C	; 28
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 b94:	80 93 a2 01 	sts	0x01A2, r24
	SETBIT(DDRC,0);		// LED FOR ADMIN MODE
 b98:	a0 9a       	sbi	0x14, 0	; 20
	SETBIT(DDRC,2);		// LED FOR GUEST MODE
 b9a:	a2 9a       	sbi	0x14, 2	; 20
	SETBIT(DDRC,4);		// LED FOR BLOCK MODE
 b9c:	a4 9a       	sbi	0x14, 4	; 20
//	sei();
//	int8_t key;
	LCD_init();
 b9e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_init>
	keypad_init();
 ba2:	0e 94 5a 00 	call	0xb4	; 0xb4 <keypad_init>
	SPI_master_init();
 ba6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <SPI_master_init>
	timer_normal_init();
 baa:	0e 94 8c 06 	call	0xd18	; 0xd18 <timer_normal_init>
//    SETBIT(PORTC,4);
//	LCD_write_string("enter password");
	block_mode=EEPROM_read(30);
 bae:	8e e1       	ldi	r24, 0x1E	; 30
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 bb6:	80 93 a7 01 	sts	0x01A7, r24
    {
		
		if(block_mode==3){
		SETBIT(PORTC,4);
		LCD_write_command(1);
		LCD_write_string("you are blocked");
 bba:	08 e0       	ldi	r16, 0x08	; 8
 bbc:	11 e0       	ldi	r17, 0x01	; 1
		LCD_write_command(0xc0);
		LCD_write_string("for 20 sec");
 bbe:	0f 2e       	mov	r0, r31
 bc0:	f8 e1       	ldi	r31, 0x18	; 24
 bc2:	ef 2e       	mov	r14, r31
 bc4:	f1 e0       	ldi	r31, 0x01	; 1
 bc6:	ff 2e       	mov	r15, r31
 bc8:	f0 2d       	mov	r31, r0
		_delay_ms(2000);
		CLRBIT(PORTC,4);
		LCD_write_command(1);
		LCD_write_string("Enter right pass");
 bca:	0f 2e       	mov	r0, r31
 bcc:	f3 e2       	ldi	r31, 0x23	; 35
 bce:	cf 2e       	mov	r12, r31
 bd0:	f1 e0       	ldi	r31, 0x01	; 1
 bd2:	df 2e       	mov	r13, r31
 bd4:	f0 2d       	mov	r31, r0
		
		
		if (Set_admin_pass==255	&& initial==0 )		// to set first value of admin password
		{
			LCD_write_command(1);
			LCD_write_string("Enter new admin");
 bd6:	0f 2e       	mov	r0, r31
 bd8:	f6 e7       	ldi	r31, 0x76	; 118
 bda:	af 2e       	mov	r10, r31
 bdc:	f1 e0       	ldi	r31, 0x01	; 1
 bde:	bf 2e       	mov	r11, r31
 be0:	f0 2d       	mov	r31, r0
			start_msg=1;
			_delay_ms(200);
		}
		if (Set_guest_pass==255 && initial==2)		// to set first value of guest password
		{
			initial=3;
 be2:	0f 2e       	mov	r0, r31
 be4:	f3 e0       	ldi	r31, 0x03	; 3
 be6:	9f 2e       	mov	r9, r31
 be8:	f0 2d       	mov	r31, r0
			LCD_write_command(1);
			LCD_write_string("Enter new guest");
 bea:	0f 2e       	mov	r0, r31
 bec:	f6 e8       	ldi	r31, 0x86	; 134
 bee:	6f 2e       	mov	r6, r31
 bf0:	f1 e0       	ldi	r31, 0x01	; 1
 bf2:	7f 2e       	mov	r7, r31
 bf4:	f0 2d       	mov	r31, r0
			start_msg=1;
			_delay_ms(200);
		}
		if(start_msg==0){						// start message to user before writing password
		LCD_write_command(1);
		LCD_write_string("0>admin&1>guest ");
 bf6:	cc ed       	ldi	r28, 0xDC	; 220
 bf8:	d0 e0       	ldi	r29, 0x00	; 0
//	LCD_write_string("enter password");
	block_mode=EEPROM_read(30);
	while(1)
    {
		
		if(block_mode==3){
 bfa:	80 91 a7 01 	lds	r24, 0x01A7
 bfe:	83 30       	cpi	r24, 0x03	; 3
 c00:	f9 f4       	brne	.+62     	; 0xc40 <main+0x120>
		SETBIT(PORTC,4);
 c02:	ac 9a       	sbi	0x15, 4	; 21
		LCD_write_command(1);
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("you are blocked");
 c0a:	c8 01       	movw	r24, r16
 c0c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
		LCD_write_command(0xc0);
 c10:	80 ec       	ldi	r24, 0xC0	; 192
 c12:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("for 20 sec");
 c16:	c7 01       	movw	r24, r14
 c18:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 c1c:	8f ef       	ldi	r24, 0xFF	; 255
 c1e:	97 ea       	ldi	r25, 0xA7	; 167
 c20:	a1 e6       	ldi	r26, 0x61	; 97
 c22:	81 50       	subi	r24, 0x01	; 1
 c24:	90 40       	sbci	r25, 0x00	; 0
 c26:	a0 40       	sbci	r26, 0x00	; 0
 c28:	e1 f7       	brne	.-8      	; 0xc22 <main+0x102>
 c2a:	00 c0       	rjmp	.+0      	; 0xc2c <main+0x10c>
 c2c:	00 00       	nop
		_delay_ms(2000);
		CLRBIT(PORTC,4);
 c2e:	ac 98       	cbi	0x15, 4	; 21
		LCD_write_command(1);
 c30:	81 e0       	ldi	r24, 0x01	; 1
 c32:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("Enter right pass");
 c36:	c6 01       	movw	r24, r12
 c38:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
		block_mode=0;
 c3c:	10 92 a7 01 	sts	0x01A7, r1

		}
		
		
		if (Set_admin_pass==255	&& initial==0 )		// to set first value of admin password
 c40:	80 91 9c 01 	lds	r24, 0x019C
 c44:	8f 3f       	cpi	r24, 0xFF	; 255
 c46:	e1 f4       	brne	.+56     	; 0xc80 <main+0x160>
 c48:	80 91 9d 01 	lds	r24, 0x019D
 c4c:	88 23       	and	r24, r24
 c4e:	c1 f4       	brne	.+48     	; 0xc80 <main+0x160>
		{
			LCD_write_command(1);
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_string("Enter new admin");
 c56:	c5 01       	movw	r24, r10
 c58:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
			initial=1;
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	80 93 9d 01 	sts	0x019D, r24
			count=1;
 c62:	80 93 9e 01 	sts	0x019E, r24
			state=0;
 c66:	10 92 9a 01 	sts	0x019A, r1
			start_msg=1;
 c6a:	80 93 9f 01 	sts	0x019F, r24
 c6e:	8f ef       	ldi	r24, 0xFF	; 255
 c70:	93 ec       	ldi	r25, 0xC3	; 195
 c72:	a9 e0       	ldi	r26, 0x09	; 9
 c74:	81 50       	subi	r24, 0x01	; 1
 c76:	90 40       	sbci	r25, 0x00	; 0
 c78:	a0 40       	sbci	r26, 0x00	; 0
 c7a:	e1 f7       	brne	.-8      	; 0xc74 <main+0x154>
 c7c:	00 c0       	rjmp	.+0      	; 0xc7e <main+0x15e>
 c7e:	00 00       	nop
			_delay_ms(200);
		}
		if (Set_guest_pass==255 && initial==2)		// to set first value of guest password
 c80:	80 91 9b 01 	lds	r24, 0x019B
 c84:	8f 3f       	cpi	r24, 0xFF	; 255
 c86:	e1 f4       	brne	.+56     	; 0xcc0 <main+0x1a0>
 c88:	80 91 9d 01 	lds	r24, 0x019D
 c8c:	82 30       	cpi	r24, 0x02	; 2
 c8e:	c1 f4       	brne	.+48     	; 0xcc0 <main+0x1a0>
		{
			initial=3;
 c90:	90 92 9d 01 	sts	0x019D, r9
			LCD_write_command(1);
 c94:	81 e0       	ldi	r24, 0x01	; 1
 c96:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
			LCD_write_string("Enter new guest");
 c9a:	c3 01       	movw	r24, r6
 c9c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
			count=1;
 ca0:	81 e0       	ldi	r24, 0x01	; 1
 ca2:	80 93 9e 01 	sts	0x019E, r24
			state=1;			
 ca6:	80 93 9a 01 	sts	0x019A, r24
			start_msg=1;
 caa:	80 93 9f 01 	sts	0x019F, r24
 cae:	8f ef       	ldi	r24, 0xFF	; 255
 cb0:	93 ec       	ldi	r25, 0xC3	; 195
 cb2:	a9 e0       	ldi	r26, 0x09	; 9
 cb4:	81 50       	subi	r24, 0x01	; 1
 cb6:	90 40       	sbci	r25, 0x00	; 0
 cb8:	a0 40       	sbci	r26, 0x00	; 0
 cba:	e1 f7       	brne	.-8      	; 0xcb4 <main+0x194>
 cbc:	00 c0       	rjmp	.+0      	; 0xcbe <main+0x19e>
 cbe:	00 00       	nop
			_delay_ms(200);
		}
		if(start_msg==0){						// start message to user before writing password
 cc0:	80 91 9f 01 	lds	r24, 0x019F
 cc4:	88 23       	and	r24, r24
 cc6:	a1 f4       	brne	.+40     	; 0xcf0 <main+0x1d0>
		LCD_write_command(1);
 cc8:	81 e0       	ldi	r24, 0x01	; 1
 cca:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_write_command>
		LCD_write_string("0>admin&1>guest ");
 cce:	ce 01       	movw	r24, r28
 cd0:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_write_string>
 cd4:	8f ef       	ldi	r24, 0xFF	; 255
 cd6:	99 e6       	ldi	r25, 0x69	; 105
 cd8:	a8 e1       	ldi	r26, 0x18	; 24
 cda:	81 50       	subi	r24, 0x01	; 1
 cdc:	90 40       	sbci	r25, 0x00	; 0
 cde:	a0 40       	sbci	r26, 0x00	; 0
 ce0:	e1 f7       	brne	.-8      	; 0xcda <main+0x1ba>
 ce2:	00 c0       	rjmp	.+0      	; 0xce4 <main+0x1c4>
 ce4:	00 00       	nop
		_delay_ms(500);
		start_msg++;
 ce6:	80 91 9f 01 	lds	r24, 0x019F
 cea:	8f 5f       	subi	r24, 0xFF	; 255
 cec:	80 93 9f 01 	sts	0x019F, r24
		}
		get_password();
 cf0:	0e 94 ce 02 	call	0x59c	; 0x59c <get_password>
		SPI_send_char(key);
		SETBIT(PORTB,4);
		sei();				// test
		_delay_ms(100);
		}*/
	}
 cf4:	82 cf       	rjmp	.-252    	; 0xbfa <main+0xda>

00000cf6 <SPI_master_init>:
#define CS	PB4
//#define CS2	PB3
#define CLK PB5

void SPI_master_init(){
	DDRB |= (1<<MOSI)|(1<<CS)|(1<<CLK);
 cf6:	87 b3       	in	r24, 0x17	; 23
 cf8:	80 6b       	ori	r24, 0xB0	; 176
 cfa:	87 bb       	out	0x17, r24	; 23
	SPCR = 1<<MSTR | 1<<SPE;
 cfc:	80 e5       	ldi	r24, 0x50	; 80
 cfe:	8d b9       	out	0x0d, r24	; 13
}
 d00:	08 95       	ret

00000d02 <SPI_slave_init>:
void SPI_slave_init(){	
	SETBIT(DDRB,MISO);	// MISO
 d02:	be 9a       	sbi	0x17, 6	; 23
	SETBIT(SPCR,SPE);	// enable SPI
 d04:	6e 9a       	sbi	0x0d, 6	; 13
}
 d06:	08 95       	ret

00000d08 <SPI_send_char>:
void SPI_send_char(uint8_t data){
	SPDR = data;
 d08:	8f b9       	out	0x0f, r24	; 15
	while(GETBIT(SPSR,SPIF) == 0);
 d0a:	77 9b       	sbis	0x0e, 7	; 14
 d0c:	fe cf       	rjmp	.-4      	; 0xd0a <SPI_send_char+0x2>
}
 d0e:	08 95       	ret

00000d10 <SPI_receive_char>:
uint8_t SPI_receive_char(){
	while(GETBIT(SPSR,SPIF) == 0);
 d10:	77 9b       	sbis	0x0e, 7	; 14
 d12:	fe cf       	rjmp	.-4      	; 0xd10 <SPI_receive_char>
	return SPDR;
 d14:	8f b1       	in	r24, 0x0f	; 15
 d16:	08 95       	ret

00000d18 <timer_normal_init>:
 *  Author: M
 */ 
#include "Timer0.h"

void timer_normal_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00);
 d18:	85 e8       	ldi	r24, 0x85	; 133
 d1a:	83 bf       	out	0x33, r24	; 51
	//SETBIT(TIMSK,TOIE0);
	sei();
 d1c:	78 94       	sei
}
 d1e:	08 95       	ret

00000d20 <timer_compare_init>:
void timer_compare_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00) | (1<<WGM01);
 d20:	8d e8       	ldi	r24, 0x8D	; 141
 d22:	83 bf       	out	0x33, r24	; 51
	OCR0 =200;
 d24:	88 ec       	ldi	r24, 0xC8	; 200
 d26:	8c bf       	out	0x3c, r24	; 60
	SETBIT(TIMSK,OCIE0);
 d28:	89 b7       	in	r24, 0x39	; 57
 d2a:	82 60       	ori	r24, 0x02	; 2
 d2c:	89 bf       	out	0x39, r24	; 57
	sei();
 d2e:	78 94       	sei
 d30:	08 95       	ret

00000d32 <__udivmodsi4>:
 d32:	a1 e2       	ldi	r26, 0x21	; 33
 d34:	1a 2e       	mov	r1, r26
 d36:	aa 1b       	sub	r26, r26
 d38:	bb 1b       	sub	r27, r27
 d3a:	fd 01       	movw	r30, r26
 d3c:	0d c0       	rjmp	.+26     	; 0xd58 <__udivmodsi4_ep>

00000d3e <__udivmodsi4_loop>:
 d3e:	aa 1f       	adc	r26, r26
 d40:	bb 1f       	adc	r27, r27
 d42:	ee 1f       	adc	r30, r30
 d44:	ff 1f       	adc	r31, r31
 d46:	a2 17       	cp	r26, r18
 d48:	b3 07       	cpc	r27, r19
 d4a:	e4 07       	cpc	r30, r20
 d4c:	f5 07       	cpc	r31, r21
 d4e:	20 f0       	brcs	.+8      	; 0xd58 <__udivmodsi4_ep>
 d50:	a2 1b       	sub	r26, r18
 d52:	b3 0b       	sbc	r27, r19
 d54:	e4 0b       	sbc	r30, r20
 d56:	f5 0b       	sbc	r31, r21

00000d58 <__udivmodsi4_ep>:
 d58:	66 1f       	adc	r22, r22
 d5a:	77 1f       	adc	r23, r23
 d5c:	88 1f       	adc	r24, r24
 d5e:	99 1f       	adc	r25, r25
 d60:	1a 94       	dec	r1
 d62:	69 f7       	brne	.-38     	; 0xd3e <__udivmodsi4_loop>
 d64:	60 95       	com	r22
 d66:	70 95       	com	r23
 d68:	80 95       	com	r24
 d6a:	90 95       	com	r25
 d6c:	9b 01       	movw	r18, r22
 d6e:	ac 01       	movw	r20, r24
 d70:	bd 01       	movw	r22, r26
 d72:	cf 01       	movw	r24, r30
 d74:	08 95       	ret

00000d76 <_exit>:
 d76:	f8 94       	cli

00000d78 <__stop_program>:
 d78:	ff cf       	rjmp	.-2      	; 0xd78 <__stop_program>
