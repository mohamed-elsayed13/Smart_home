
Smart_home_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004d2  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000566  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  000020a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a2  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000211  00000000  00000000  00002722  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059f  00000000  00000000  00002933  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000018c  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012b  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 56 00 	call	0xac	; 0xac <main>
  8a:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
 */ 

#include "ADC.h"

void ADC_init(){
	SETBIT(ADMUX,REFS0);
  92:	3e 9a       	sbi	0x07, 6	; 7
	SETBIT(ADCSRA,ADEN);
  94:	37 9a       	sbi	0x06, 7	; 6
	SETBIT(ADCSRA,ADPS0);
  96:	30 9a       	sbi	0x06, 0	; 6
	SETBIT(ADCSRA,ADPS1);
  98:	31 9a       	sbi	0x06, 1	; 6
	SETBIT(ADCSRA,ADPS2);	
  9a:	32 9a       	sbi	0x06, 2	; 6
}
  9c:	08 95       	ret

0000009e <ADC_read>:

uint16_t ADC_read(){

	SETBIT(ADCSRA,ADSC); // start conversion
  9e:	36 9a       	sbi	0x06, 6	; 6
	while(GETBIT(ADCSRA,ADSC) == 1){}
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	86 fd       	sbrc	r24, 6
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <ADC_read+0x2>
	return ADC;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	95 b1       	in	r25, 0x05	; 5
  aa:	08 95       	ret

000000ac <main>:
uint16_t temp=0;		// for temperature reading of lm35
uint8_t Air_COND=0;		// flag to know if Air_COND. is on or off
int main(void)
{
	uint8_t select;		// to select which room to control 
	ADC_init();
  ac:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	SPI_slave_init();
  b0:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_slave_init>
	timer_normal_init();
  b4:	0e 94 3a 01 	call	0x274	; 0x274 <timer_normal_init>
	SETBIT(DDRC,0);		//ROOM1
  b8:	a0 9a       	sbi	0x14, 0	; 20
	SETBIT(DDRC,1);		//ROOM2
  ba:	a1 9a       	sbi	0x14, 1	; 20
	SETBIT(DDRC,2);		//ROOM3
  bc:	a2 9a       	sbi	0x14, 2	; 20
	SETBIT(DDRC,3);		//ROOM4
  be:	a3 9a       	sbi	0x14, 3	; 20
	SETBIT(DDRC,4);		//TV
  c0:	a4 9a       	sbi	0x14, 4	; 20
	SETBIT(DDRC,5);		//Air_COND
  c2:	a5 9a       	sbi	0x14, 5	; 20
		temp=temp * 0.48828125;
		select=SPI_receive_char();
		if(select=='1'&& temp<Temperature){Air_COND=1;}		
		else if (select=='1'&& temp>=Temperature){
			SETBIT(PORTC,5);
			Air_COND=1;
  c4:	c1 e0       	ldi	r28, 0x01	; 1
	SETBIT(DDRC,4);		//TV
	SETBIT(DDRC,5);		//Air_COND
	while(1)
    {
		
		select=SPI_receive_char();
  c6:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_receive_char>
		switch (select)
  ca:	83 33       	cpi	r24, 0x33	; 51
  cc:	11 f1       	breq	.+68     	; 0x112 <main+0x66>
  ce:	84 33       	cpi	r24, 0x34	; 52
  d0:	28 f4       	brcc	.+10     	; 0xdc <main+0x30>
  d2:	81 33       	cpi	r24, 0x31	; 49
  d4:	51 f0       	breq	.+20     	; 0xea <main+0x3e>
  d6:	82 33       	cpi	r24, 0x32	; 50
  d8:	b1 f7       	brne	.-20     	; 0xc6 <main+0x1a>
  da:	11 c0       	rjmp	.+34     	; 0xfe <main+0x52>
  dc:	85 33       	cpi	r24, 0x35	; 53
  de:	69 f1       	breq	.+90     	; 0x13a <main+0x8e>
  e0:	85 33       	cpi	r24, 0x35	; 53
  e2:	08 f1       	brcs	.+66     	; 0x126 <main+0x7a>
  e4:	86 33       	cpi	r24, 0x36	; 54
  e6:	79 f7       	brne	.-34     	; 0xc6 <main+0x1a>
  e8:	33 c0       	rjmp	.+102    	; 0x150 <main+0xa4>
		{
		case '1':
		select=SPI_receive_char();
  ea:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_receive_char>
		if (select=='1'){SETBIT(PORTC,0);}
  ee:	81 33       	cpi	r24, 0x31	; 49
  f0:	11 f4       	brne	.+4      	; 0xf6 <main+0x4a>
  f2:	a8 9a       	sbi	0x15, 0	; 21
  f4:	e8 cf       	rjmp	.-48     	; 0xc6 <main+0x1a>
		else if (select=='2'){CLRBIT(PORTC,0);}
  f6:	82 33       	cpi	r24, 0x32	; 50
  f8:	31 f7       	brne	.-52     	; 0xc6 <main+0x1a>
  fa:	a8 98       	cbi	0x15, 0	; 21
  fc:	e4 cf       	rjmp	.-56     	; 0xc6 <main+0x1a>
		break;
		case '2':
		select=SPI_receive_char();
  fe:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_receive_char>
		if (select=='1'){SETBIT(PORTC,1);}
 102:	81 33       	cpi	r24, 0x31	; 49
 104:	11 f4       	brne	.+4      	; 0x10a <main+0x5e>
 106:	a9 9a       	sbi	0x15, 1	; 21
 108:	de cf       	rjmp	.-68     	; 0xc6 <main+0x1a>
		else if (select=='2'){CLRBIT(PORTC,1);}	
 10a:	82 33       	cpi	r24, 0x32	; 50
 10c:	e1 f6       	brne	.-72     	; 0xc6 <main+0x1a>
 10e:	a9 98       	cbi	0x15, 1	; 21
 110:	da cf       	rjmp	.-76     	; 0xc6 <main+0x1a>
		break;
		case '3':
		select=SPI_receive_char();
 112:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_receive_char>
		if (select=='1'){SETBIT(PORTC,2);}
 116:	81 33       	cpi	r24, 0x31	; 49
 118:	11 f4       	brne	.+4      	; 0x11e <main+0x72>
 11a:	aa 9a       	sbi	0x15, 2	; 21
 11c:	d4 cf       	rjmp	.-88     	; 0xc6 <main+0x1a>
		else if (select=='2'){CLRBIT(PORTC,2);}
 11e:	82 33       	cpi	r24, 0x32	; 50
 120:	91 f6       	brne	.-92     	; 0xc6 <main+0x1a>
 122:	aa 98       	cbi	0x15, 2	; 21
 124:	d0 cf       	rjmp	.-96     	; 0xc6 <main+0x1a>
		break;
		case '4':
		select=SPI_receive_char();
 126:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_receive_char>
		if (select=='1'){SETBIT(PORTC,3);}
 12a:	81 33       	cpi	r24, 0x31	; 49
 12c:	11 f4       	brne	.+4      	; 0x132 <main+0x86>
 12e:	ab 9a       	sbi	0x15, 3	; 21
 130:	ca cf       	rjmp	.-108    	; 0xc6 <main+0x1a>
		else if (select=='2'){CLRBIT(PORTC,3);}
 132:	82 33       	cpi	r24, 0x32	; 50
 134:	41 f6       	brne	.-112    	; 0xc6 <main+0x1a>
 136:	ab 98       	cbi	0x15, 3	; 21
 138:	c6 cf       	rjmp	.-116    	; 0xc6 <main+0x1a>
		break;
		case '5':
		select=SPI_receive_char();
 13a:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_receive_char>
		if (select=='1'){SETBIT(PORTC,4);}
 13e:	81 33       	cpi	r24, 0x31	; 49
 140:	11 f4       	brne	.+4      	; 0x146 <main+0x9a>
 142:	ac 9a       	sbi	0x15, 4	; 21
 144:	c0 cf       	rjmp	.-128    	; 0xc6 <main+0x1a>
		else if (select=='2'){CLRBIT(PORTC,4);}
 146:	82 33       	cpi	r24, 0x32	; 50
 148:	09 f0       	breq	.+2      	; 0x14c <main+0xa0>
 14a:	bd cf       	rjmp	.-134    	; 0xc6 <main+0x1a>
 14c:	ac 98       	cbi	0x15, 4	; 21
 14e:	bb cf       	rjmp	.-138    	; 0xc6 <main+0x1a>
		break;
		case '6':
		temp=ADC_read();
 150:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_read>
		temp=temp * 0.48828125;
 154:	bc 01       	movw	r22, r24
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 76 01 	call	0x2ec	; 0x2ec <__floatunsisf>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	4a ef       	ldi	r20, 0xFA	; 250
 164:	5e e3       	ldi	r21, 0x3E	; 62
 166:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__mulsf3>
 16a:	0e 94 4a 01 	call	0x294	; 0x294 <__fixunssfsi>
 16e:	dc 01       	movw	r26, r24
 170:	cb 01       	movw	r24, r22
 172:	90 93 62 00 	sts	0x0062, r25
 176:	80 93 61 00 	sts	0x0061, r24
		select=SPI_receive_char();
 17a:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_receive_char>
		if(select=='1'&& temp<Temperature){Air_COND=1;}		
 17e:	81 33       	cpi	r24, 0x31	; 49
 180:	71 f4       	brne	.+28     	; 0x19e <main+0xf2>
 182:	80 91 61 00 	lds	r24, 0x0061
 186:	90 91 62 00 	lds	r25, 0x0062
 18a:	89 31       	cpi	r24, 0x19	; 25
 18c:	91 05       	cpc	r25, r1
 18e:	18 f4       	brcc	.+6      	; 0x196 <main+0xea>
 190:	c0 93 60 00 	sts	0x0060, r28
 194:	98 cf       	rjmp	.-208    	; 0xc6 <main+0x1a>
		else if (select=='1'&& temp>=Temperature){
			SETBIT(PORTC,5);
 196:	ad 9a       	sbi	0x15, 5	; 21
			Air_COND=1;
 198:	c0 93 60 00 	sts	0x0060, r28
 19c:	94 cf       	rjmp	.-216    	; 0xc6 <main+0x1a>
			}
		else if (select=='2'){
 19e:	82 33       	cpi	r24, 0x32	; 50
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <main+0xf8>
 1a2:	91 cf       	rjmp	.-222    	; 0xc6 <main+0x1a>
			CLRBIT(PORTC,5);
 1a4:	ad 98       	cbi	0x15, 5	; 21
			Air_COND=0;
 1a6:	10 92 60 00 	sts	0x0060, r1
 1aa:	8d cf       	rjmp	.-230    	; 0xc6 <main+0x1a>

000001ac <__vector_11>:
		break;
		}
		
    }
}
ISR(TIMER0_OVF_vect){			// to check temp. every 0.5 sec.
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
static uint8_t timer=0;
timer++;
 1ce:	80 91 63 00 	lds	r24, 0x0063
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 93 63 00 	sts	0x0063, r24
temp=ADC_read();
 1d8:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_read>
temp=temp * 0.48828125;
 1dc:	bc 01       	movw	r22, r24
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 76 01 	call	0x2ec	; 0x2ec <__floatunsisf>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	4a ef       	ldi	r20, 0xFA	; 250
 1ec:	5e e3       	ldi	r21, 0x3E	; 62
 1ee:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__mulsf3>
 1f2:	0e 94 4a 01 	call	0x294	; 0x294 <__fixunssfsi>
 1f6:	dc 01       	movw	r26, r24
 1f8:	cb 01       	movw	r24, r22
 1fa:	9c 01       	movw	r18, r24
 1fc:	90 93 62 00 	sts	0x0062, r25
 200:	80 93 61 00 	sts	0x0061, r24
if(timer==20&& Air_COND==1 && temp>=Temperature ){
 204:	80 91 63 00 	lds	r24, 0x0063
 208:	84 31       	cpi	r24, 0x14	; 20
 20a:	91 f4       	brne	.+36     	; 0x230 <__vector_11+0x84>
 20c:	80 91 60 00 	lds	r24, 0x0060
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	71 f4       	brne	.+28     	; 0x230 <__vector_11+0x84>
 214:	29 31       	cpi	r18, 0x19	; 25
 216:	31 05       	cpc	r19, r1
 218:	40 f0       	brcs	.+16     	; 0x22a <__vector_11+0x7e>
SETBIT(PORTC,5);
 21a:	ad 9a       	sbi	0x15, 5	; 21
timer=0;
 21c:	10 92 63 00 	sts	0x0063, r1
 220:	07 c0       	rjmp	.+14     	; 0x230 <__vector_11+0x84>
}	
else if(timer==20&& Air_COND==1 && temp<=Temperature){
	CLRBIT(PORTC,5);
 222:	ad 98       	cbi	0x15, 5	; 21
	timer=0;
 224:	10 92 63 00 	sts	0x0063, r1
 228:	03 c0       	rjmp	.+6      	; 0x230 <__vector_11+0x84>
temp=temp * 0.48828125;
if(timer==20&& Air_COND==1 && temp>=Temperature ){
SETBIT(PORTC,5);
timer=0;
}	
else if(timer==20&& Air_COND==1 && temp<=Temperature){
 22a:	2a 31       	cpi	r18, 0x1A	; 26
 22c:	31 05       	cpc	r19, r1
 22e:	c8 f3       	brcs	.-14     	; 0x222 <__vector_11+0x76>
	CLRBIT(PORTC,5);
	timer=0;
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <SPI_master_init>:
#define CS	PB4
//#define CS2	PB3
#define CLK PB5

void SPI_master_init(){
	DDRB |= (1<<MOSI)|(1<<CS)|(1<<CLK);
 252:	87 b3       	in	r24, 0x17	; 23
 254:	80 6b       	ori	r24, 0xB0	; 176
 256:	87 bb       	out	0x17, r24	; 23
	SPCR = 1<<MSTR | 1<<SPE;
 258:	80 e5       	ldi	r24, 0x50	; 80
 25a:	8d b9       	out	0x0d, r24	; 13
}
 25c:	08 95       	ret

0000025e <SPI_slave_init>:
void SPI_slave_init(){	
	SETBIT(DDRB,MISO);	// MISO
 25e:	be 9a       	sbi	0x17, 6	; 23
	SETBIT(SPCR,SPE);	// enable SPI
 260:	6e 9a       	sbi	0x0d, 6	; 13
}
 262:	08 95       	ret

00000264 <SPI_send_char>:
void SPI_send_char(uint8_t data){
	SPDR = data;
 264:	8f b9       	out	0x0f, r24	; 15
	while(GETBIT(SPSR,SPIF) == 0);
 266:	77 9b       	sbis	0x0e, 7	; 14
 268:	fe cf       	rjmp	.-4      	; 0x266 <SPI_send_char+0x2>
}
 26a:	08 95       	ret

0000026c <SPI_receive_char>:
uint8_t SPI_receive_char(){
	while(GETBIT(SPSR,SPIF) == 0);
 26c:	77 9b       	sbis	0x0e, 7	; 14
 26e:	fe cf       	rjmp	.-4      	; 0x26c <SPI_receive_char>
	return SPDR;
 270:	8f b1       	in	r24, 0x0f	; 15
 272:	08 95       	ret

00000274 <timer_normal_init>:
 *  Author: M
 */ 
#include "Timer0.h"

void timer_normal_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00);
 274:	85 e8       	ldi	r24, 0x85	; 133
 276:	83 bf       	out	0x33, r24	; 51
	SETBIT(TIMSK,TOIE0);
 278:	89 b7       	in	r24, 0x39	; 57
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	89 bf       	out	0x39, r24	; 57
	sei();
 27e:	78 94       	sei
}
 280:	08 95       	ret

00000282 <timer_compare_init>:
void timer_compare_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00) | (1<<WGM01);
 282:	8d e8       	ldi	r24, 0x8D	; 141
 284:	83 bf       	out	0x33, r24	; 51
	OCR0 =200;
 286:	88 ec       	ldi	r24, 0xC8	; 200
 288:	8c bf       	out	0x3c, r24	; 60
	SETBIT(TIMSK,OCIE0);
 28a:	89 b7       	in	r24, 0x39	; 57
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	89 bf       	out	0x39, r24	; 57
	sei();
 290:	78 94       	sei
 292:	08 95       	ret

00000294 <__fixunssfsi>:
 294:	70 d0       	rcall	.+224    	; 0x376 <__fp_splitA>
 296:	88 f0       	brcs	.+34     	; 0x2ba <__fixunssfsi+0x26>
 298:	9f 57       	subi	r25, 0x7F	; 127
 29a:	90 f0       	brcs	.+36     	; 0x2c0 <__fixunssfsi+0x2c>
 29c:	b9 2f       	mov	r27, r25
 29e:	99 27       	eor	r25, r25
 2a0:	b7 51       	subi	r27, 0x17	; 23
 2a2:	a0 f0       	brcs	.+40     	; 0x2cc <__fixunssfsi+0x38>
 2a4:	d1 f0       	breq	.+52     	; 0x2da <__fixunssfsi+0x46>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	88 1f       	adc	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	1a f0       	brmi	.+6      	; 0x2b6 <__fixunssfsi+0x22>
 2b0:	ba 95       	dec	r27
 2b2:	c9 f7       	brne	.-14     	; 0x2a6 <__fixunssfsi+0x12>
 2b4:	12 c0       	rjmp	.+36     	; 0x2da <__fixunssfsi+0x46>
 2b6:	b1 30       	cpi	r27, 0x01	; 1
 2b8:	81 f0       	breq	.+32     	; 0x2da <__fixunssfsi+0x46>
 2ba:	77 d0       	rcall	.+238    	; 0x3aa <__fp_zero>
 2bc:	b1 e0       	ldi	r27, 0x01	; 1
 2be:	08 95       	ret
 2c0:	74 c0       	rjmp	.+232    	; 0x3aa <__fp_zero>
 2c2:	67 2f       	mov	r22, r23
 2c4:	78 2f       	mov	r23, r24
 2c6:	88 27       	eor	r24, r24
 2c8:	b8 5f       	subi	r27, 0xF8	; 248
 2ca:	39 f0       	breq	.+14     	; 0x2da <__fixunssfsi+0x46>
 2cc:	b9 3f       	cpi	r27, 0xF9	; 249
 2ce:	cc f3       	brlt	.-14     	; 0x2c2 <__fixunssfsi+0x2e>
 2d0:	86 95       	lsr	r24
 2d2:	77 95       	ror	r23
 2d4:	67 95       	ror	r22
 2d6:	b3 95       	inc	r27
 2d8:	d9 f7       	brne	.-10     	; 0x2d0 <__fixunssfsi+0x3c>
 2da:	3e f4       	brtc	.+14     	; 0x2ea <__fixunssfsi+0x56>
 2dc:	90 95       	com	r25
 2de:	80 95       	com	r24
 2e0:	70 95       	com	r23
 2e2:	61 95       	neg	r22
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	8f 4f       	sbci	r24, 0xFF	; 255
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	08 95       	ret

000002ec <__floatunsisf>:
 2ec:	e8 94       	clt
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <__floatsisf+0x12>

000002f0 <__floatsisf>:
 2f0:	97 fb       	bst	r25, 7
 2f2:	3e f4       	brtc	.+14     	; 0x302 <__floatsisf+0x12>
 2f4:	90 95       	com	r25
 2f6:	80 95       	com	r24
 2f8:	70 95       	com	r23
 2fa:	61 95       	neg	r22
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
 2fe:	8f 4f       	sbci	r24, 0xFF	; 255
 300:	9f 4f       	sbci	r25, 0xFF	; 255
 302:	99 23       	and	r25, r25
 304:	a9 f0       	breq	.+42     	; 0x330 <__floatsisf+0x40>
 306:	f9 2f       	mov	r31, r25
 308:	96 e9       	ldi	r25, 0x96	; 150
 30a:	bb 27       	eor	r27, r27
 30c:	93 95       	inc	r25
 30e:	f6 95       	lsr	r31
 310:	87 95       	ror	r24
 312:	77 95       	ror	r23
 314:	67 95       	ror	r22
 316:	b7 95       	ror	r27
 318:	f1 11       	cpse	r31, r1
 31a:	f8 cf       	rjmp	.-16     	; 0x30c <__floatsisf+0x1c>
 31c:	fa f4       	brpl	.+62     	; 0x35c <__floatsisf+0x6c>
 31e:	bb 0f       	add	r27, r27
 320:	11 f4       	brne	.+4      	; 0x326 <__floatsisf+0x36>
 322:	60 ff       	sbrs	r22, 0
 324:	1b c0       	rjmp	.+54     	; 0x35c <__floatsisf+0x6c>
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	8f 4f       	sbci	r24, 0xFF	; 255
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	16 c0       	rjmp	.+44     	; 0x35c <__floatsisf+0x6c>
 330:	88 23       	and	r24, r24
 332:	11 f0       	breq	.+4      	; 0x338 <__floatsisf+0x48>
 334:	96 e9       	ldi	r25, 0x96	; 150
 336:	11 c0       	rjmp	.+34     	; 0x35a <__floatsisf+0x6a>
 338:	77 23       	and	r23, r23
 33a:	21 f0       	breq	.+8      	; 0x344 <__floatsisf+0x54>
 33c:	9e e8       	ldi	r25, 0x8E	; 142
 33e:	87 2f       	mov	r24, r23
 340:	76 2f       	mov	r23, r22
 342:	05 c0       	rjmp	.+10     	; 0x34e <__floatsisf+0x5e>
 344:	66 23       	and	r22, r22
 346:	71 f0       	breq	.+28     	; 0x364 <__floatsisf+0x74>
 348:	96 e8       	ldi	r25, 0x86	; 134
 34a:	86 2f       	mov	r24, r22
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	2a f0       	brmi	.+10     	; 0x35c <__floatsisf+0x6c>
 352:	9a 95       	dec	r25
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	88 1f       	adc	r24, r24
 35a:	da f7       	brpl	.-10     	; 0x352 <__floatsisf+0x62>
 35c:	88 0f       	add	r24, r24
 35e:	96 95       	lsr	r25
 360:	87 95       	ror	r24
 362:	97 f9       	bld	r25, 7
 364:	08 95       	ret

00000366 <__fp_split3>:
 366:	57 fd       	sbrc	r21, 7
 368:	90 58       	subi	r25, 0x80	; 128
 36a:	44 0f       	add	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	59 f0       	breq	.+22     	; 0x386 <__fp_splitA+0x10>
 370:	5f 3f       	cpi	r21, 0xFF	; 255
 372:	71 f0       	breq	.+28     	; 0x390 <__fp_splitA+0x1a>
 374:	47 95       	ror	r20

00000376 <__fp_splitA>:
 376:	88 0f       	add	r24, r24
 378:	97 fb       	bst	r25, 7
 37a:	99 1f       	adc	r25, r25
 37c:	61 f0       	breq	.+24     	; 0x396 <__fp_splitA+0x20>
 37e:	9f 3f       	cpi	r25, 0xFF	; 255
 380:	79 f0       	breq	.+30     	; 0x3a0 <__fp_splitA+0x2a>
 382:	87 95       	ror	r24
 384:	08 95       	ret
 386:	12 16       	cp	r1, r18
 388:	13 06       	cpc	r1, r19
 38a:	14 06       	cpc	r1, r20
 38c:	55 1f       	adc	r21, r21
 38e:	f2 cf       	rjmp	.-28     	; 0x374 <__fp_split3+0xe>
 390:	46 95       	lsr	r20
 392:	f1 df       	rcall	.-30     	; 0x376 <__fp_splitA>
 394:	08 c0       	rjmp	.+16     	; 0x3a6 <__fp_splitA+0x30>
 396:	16 16       	cp	r1, r22
 398:	17 06       	cpc	r1, r23
 39a:	18 06       	cpc	r1, r24
 39c:	99 1f       	adc	r25, r25
 39e:	f1 cf       	rjmp	.-30     	; 0x382 <__fp_splitA+0xc>
 3a0:	86 95       	lsr	r24
 3a2:	71 05       	cpc	r23, r1
 3a4:	61 05       	cpc	r22, r1
 3a6:	08 94       	sec
 3a8:	08 95       	ret

000003aa <__fp_zero>:
 3aa:	e8 94       	clt

000003ac <__fp_szero>:
 3ac:	bb 27       	eor	r27, r27
 3ae:	66 27       	eor	r22, r22
 3b0:	77 27       	eor	r23, r23
 3b2:	cb 01       	movw	r24, r22
 3b4:	97 f9       	bld	r25, 7
 3b6:	08 95       	ret

000003b8 <__mulsf3>:
 3b8:	0b d0       	rcall	.+22     	; 0x3d0 <__mulsf3x>
 3ba:	78 c0       	rjmp	.+240    	; 0x4ac <__fp_round>
 3bc:	69 d0       	rcall	.+210    	; 0x490 <__fp_pscA>
 3be:	28 f0       	brcs	.+10     	; 0x3ca <__mulsf3+0x12>
 3c0:	6e d0       	rcall	.+220    	; 0x49e <__fp_pscB>
 3c2:	18 f0       	brcs	.+6      	; 0x3ca <__mulsf3+0x12>
 3c4:	95 23       	and	r25, r21
 3c6:	09 f0       	breq	.+2      	; 0x3ca <__mulsf3+0x12>
 3c8:	5a c0       	rjmp	.+180    	; 0x47e <__fp_inf>
 3ca:	5f c0       	rjmp	.+190    	; 0x48a <__fp_nan>
 3cc:	11 24       	eor	r1, r1
 3ce:	ee cf       	rjmp	.-36     	; 0x3ac <__fp_szero>

000003d0 <__mulsf3x>:
 3d0:	ca df       	rcall	.-108    	; 0x366 <__fp_split3>
 3d2:	a0 f3       	brcs	.-24     	; 0x3bc <__mulsf3+0x4>

000003d4 <__mulsf3_pse>:
 3d4:	95 9f       	mul	r25, r21
 3d6:	d1 f3       	breq	.-12     	; 0x3cc <__mulsf3+0x14>
 3d8:	95 0f       	add	r25, r21
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	55 1f       	adc	r21, r21
 3de:	62 9f       	mul	r22, r18
 3e0:	f0 01       	movw	r30, r0
 3e2:	72 9f       	mul	r23, r18
 3e4:	bb 27       	eor	r27, r27
 3e6:	f0 0d       	add	r31, r0
 3e8:	b1 1d       	adc	r27, r1
 3ea:	63 9f       	mul	r22, r19
 3ec:	aa 27       	eor	r26, r26
 3ee:	f0 0d       	add	r31, r0
 3f0:	b1 1d       	adc	r27, r1
 3f2:	aa 1f       	adc	r26, r26
 3f4:	64 9f       	mul	r22, r20
 3f6:	66 27       	eor	r22, r22
 3f8:	b0 0d       	add	r27, r0
 3fa:	a1 1d       	adc	r26, r1
 3fc:	66 1f       	adc	r22, r22
 3fe:	82 9f       	mul	r24, r18
 400:	22 27       	eor	r18, r18
 402:	b0 0d       	add	r27, r0
 404:	a1 1d       	adc	r26, r1
 406:	62 1f       	adc	r22, r18
 408:	73 9f       	mul	r23, r19
 40a:	b0 0d       	add	r27, r0
 40c:	a1 1d       	adc	r26, r1
 40e:	62 1f       	adc	r22, r18
 410:	83 9f       	mul	r24, r19
 412:	a0 0d       	add	r26, r0
 414:	61 1d       	adc	r22, r1
 416:	22 1f       	adc	r18, r18
 418:	74 9f       	mul	r23, r20
 41a:	33 27       	eor	r19, r19
 41c:	a0 0d       	add	r26, r0
 41e:	61 1d       	adc	r22, r1
 420:	23 1f       	adc	r18, r19
 422:	84 9f       	mul	r24, r20
 424:	60 0d       	add	r22, r0
 426:	21 1d       	adc	r18, r1
 428:	82 2f       	mov	r24, r18
 42a:	76 2f       	mov	r23, r22
 42c:	6a 2f       	mov	r22, r26
 42e:	11 24       	eor	r1, r1
 430:	9f 57       	subi	r25, 0x7F	; 127
 432:	50 40       	sbci	r21, 0x00	; 0
 434:	8a f0       	brmi	.+34     	; 0x458 <__mulsf3_pse+0x84>
 436:	e1 f0       	breq	.+56     	; 0x470 <__mulsf3_pse+0x9c>
 438:	88 23       	and	r24, r24
 43a:	4a f0       	brmi	.+18     	; 0x44e <__mulsf3_pse+0x7a>
 43c:	ee 0f       	add	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	bb 1f       	adc	r27, r27
 442:	66 1f       	adc	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	91 50       	subi	r25, 0x01	; 1
 44a:	50 40       	sbci	r21, 0x00	; 0
 44c:	a9 f7       	brne	.-22     	; 0x438 <__mulsf3_pse+0x64>
 44e:	9e 3f       	cpi	r25, 0xFE	; 254
 450:	51 05       	cpc	r21, r1
 452:	70 f0       	brcs	.+28     	; 0x470 <__mulsf3_pse+0x9c>
 454:	14 c0       	rjmp	.+40     	; 0x47e <__fp_inf>
 456:	aa cf       	rjmp	.-172    	; 0x3ac <__fp_szero>
 458:	5f 3f       	cpi	r21, 0xFF	; 255
 45a:	ec f3       	brlt	.-6      	; 0x456 <__mulsf3_pse+0x82>
 45c:	98 3e       	cpi	r25, 0xE8	; 232
 45e:	dc f3       	brlt	.-10     	; 0x456 <__mulsf3_pse+0x82>
 460:	86 95       	lsr	r24
 462:	77 95       	ror	r23
 464:	67 95       	ror	r22
 466:	b7 95       	ror	r27
 468:	f7 95       	ror	r31
 46a:	e7 95       	ror	r30
 46c:	9f 5f       	subi	r25, 0xFF	; 255
 46e:	c1 f7       	brne	.-16     	; 0x460 <__mulsf3_pse+0x8c>
 470:	fe 2b       	or	r31, r30
 472:	88 0f       	add	r24, r24
 474:	91 1d       	adc	r25, r1
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	97 f9       	bld	r25, 7
 47c:	08 95       	ret

0000047e <__fp_inf>:
 47e:	97 f9       	bld	r25, 7
 480:	9f 67       	ori	r25, 0x7F	; 127
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	08 95       	ret

0000048a <__fp_nan>:
 48a:	9f ef       	ldi	r25, 0xFF	; 255
 48c:	80 ec       	ldi	r24, 0xC0	; 192
 48e:	08 95       	ret

00000490 <__fp_pscA>:
 490:	00 24       	eor	r0, r0
 492:	0a 94       	dec	r0
 494:	16 16       	cp	r1, r22
 496:	17 06       	cpc	r1, r23
 498:	18 06       	cpc	r1, r24
 49a:	09 06       	cpc	r0, r25
 49c:	08 95       	ret

0000049e <__fp_pscB>:
 49e:	00 24       	eor	r0, r0
 4a0:	0a 94       	dec	r0
 4a2:	12 16       	cp	r1, r18
 4a4:	13 06       	cpc	r1, r19
 4a6:	14 06       	cpc	r1, r20
 4a8:	05 06       	cpc	r0, r21
 4aa:	08 95       	ret

000004ac <__fp_round>:
 4ac:	09 2e       	mov	r0, r25
 4ae:	03 94       	inc	r0
 4b0:	00 0c       	add	r0, r0
 4b2:	11 f4       	brne	.+4      	; 0x4b8 <__fp_round+0xc>
 4b4:	88 23       	and	r24, r24
 4b6:	52 f0       	brmi	.+20     	; 0x4cc <__fp_round+0x20>
 4b8:	bb 0f       	add	r27, r27
 4ba:	40 f4       	brcc	.+16     	; 0x4cc <__fp_round+0x20>
 4bc:	bf 2b       	or	r27, r31
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__fp_round+0x18>
 4c0:	60 ff       	sbrs	r22, 0
 4c2:	04 c0       	rjmp	.+8      	; 0x4cc <__fp_round+0x20>
 4c4:	6f 5f       	subi	r22, 0xFF	; 255
 4c6:	7f 4f       	sbci	r23, 0xFF	; 255
 4c8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
