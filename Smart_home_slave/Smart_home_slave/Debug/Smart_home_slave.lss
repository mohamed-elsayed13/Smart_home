
Smart_home_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004ca  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000c98  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a30  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f7  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000850  00000000  00000000  00001abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e0  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c6  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c5 01 	call	0x38a	; 0x38a <main>
  8a:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
 */ 

#include "ADC.h"

void ADC_init(){
	SETBIT(ADMUX,REFS0);
  92:	3e 9a       	sbi	0x07, 6	; 7
	SETBIT(ADCSRA,ADEN);
  94:	37 9a       	sbi	0x06, 7	; 6
	SETBIT(ADCSRA,ADPS0);
  96:	30 9a       	sbi	0x06, 0	; 6
	SETBIT(ADCSRA,ADPS1);
  98:	31 9a       	sbi	0x06, 1	; 6
	SETBIT(ADCSRA,ADPS2);	
  9a:	32 9a       	sbi	0x06, 2	; 6
}
  9c:	08 95       	ret

0000009e <ADC_read>:

uint16_t ADC_read(){

	SETBIT(ADCSRA,ADSC); // start conversion
  9e:	36 9a       	sbi	0x06, 6	; 6
	while(GETBIT(ADCSRA,ADSC) == 1){}
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	86 fd       	sbrc	r24, 6
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <ADC_read+0x2>
	return ADC;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	95 b1       	in	r25, 0x05	; 5
  aa:	08 95       	ret

000000ac <LCD_write_command>:
_delay_ms(20);
LCD_write_command(0x0C);
}

void LCD_write_command(uint8_t cmd){
	 RS(0);
  ac:	d9 98       	cbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(cmd,4));
  ae:	98 2f       	mov	r25, r24
  b0:	92 95       	swap	r25
  b2:	9f 70       	andi	r25, 0x0F	; 15
  b4:	90 ff       	sbrs	r25, 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <LCD_write_command+0x10>
  b8:	db 9a       	sbi	0x1b, 3	; 27
  ba:	01 c0       	rjmp	.+2      	; 0xbe <LCD_write_command+0x12>
  bc:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,5));
  be:	98 2f       	mov	r25, r24
  c0:	92 95       	swap	r25
  c2:	96 95       	lsr	r25
  c4:	97 70       	andi	r25, 0x07	; 7
  c6:	90 ff       	sbrs	r25, 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <LCD_write_command+0x22>
  ca:	dc 9a       	sbi	0x1b, 4	; 27
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <LCD_write_command+0x24>
  ce:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,6));
  d0:	98 2f       	mov	r25, r24
  d2:	92 95       	swap	r25
  d4:	96 95       	lsr	r25
  d6:	96 95       	lsr	r25
  d8:	93 70       	andi	r25, 0x03	; 3
  da:	90 ff       	sbrs	r25, 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <LCD_write_command+0x36>
  de:	dd 9a       	sbi	0x1b, 5	; 27
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <LCD_write_command+0x38>
  e2:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,7));
  e4:	88 23       	and	r24, r24
  e6:	14 f4       	brge	.+4      	; 0xec <LCD_write_command+0x40>
  e8:	de 9a       	sbi	0x1b, 6	; 27
  ea:	01 c0       	rjmp	.+2      	; 0xee <LCD_write_command+0x42>
  ec:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
  ee:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	ef e9       	ldi	r30, 0x9F	; 159
  f2:	ff e0       	ldi	r31, 0x0F	; 15
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_write_command+0x48>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_write_command+0x4e>
  fa:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
  fc:	da 98       	cbi	0x1b, 2	; 27
  fe:	ef e9       	ldi	r30, 0x9F	; 159
 100:	ff e0       	ldi	r31, 0x0F	; 15
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_write_command+0x56>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_write_command+0x5c>
 108:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(cmd,0));
 10a:	80 ff       	sbrs	r24, 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <LCD_write_command+0x66>
 10e:	db 9a       	sbi	0x1b, 3	; 27
 110:	01 c0       	rjmp	.+2      	; 0x114 <LCD_write_command+0x68>
 112:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,1));
 114:	98 2f       	mov	r25, r24
 116:	96 95       	lsr	r25
 118:	90 ff       	sbrs	r25, 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <LCD_write_command+0x74>
 11c:	dc 9a       	sbi	0x1b, 4	; 27
 11e:	01 c0       	rjmp	.+2      	; 0x122 <LCD_write_command+0x76>
 120:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,2));
 122:	98 2f       	mov	r25, r24
 124:	96 95       	lsr	r25
 126:	96 95       	lsr	r25
 128:	90 ff       	sbrs	r25, 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <LCD_write_command+0x84>
 12c:	dd 9a       	sbi	0x1b, 5	; 27
 12e:	01 c0       	rjmp	.+2      	; 0x132 <LCD_write_command+0x86>
 130:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,3));
 132:	86 95       	lsr	r24
 134:	86 95       	lsr	r24
 136:	86 95       	lsr	r24
 138:	80 ff       	sbrs	r24, 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <LCD_write_command+0x94>
 13c:	de 9a       	sbi	0x1b, 6	; 27
 13e:	01 c0       	rjmp	.+2      	; 0x142 <LCD_write_command+0x96>
 140:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 142:	da 9a       	sbi	0x1b, 2	; 27
 144:	8f e9       	ldi	r24, 0x9F	; 159
 146:	9f e0       	ldi	r25, 0x0F	; 15
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_write_command+0x9c>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_write_command+0xa2>
 14e:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 150:	da 98       	cbi	0x1b, 2	; 27
 152:	ef e9       	ldi	r30, 0x9F	; 159
 154:	ff e0       	ldi	r31, 0x0F	; 15
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_write_command+0xaa>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_write_command+0xb0>
 15c:	00 00       	nop
	 _delay_ms(1);
}
 15e:	08 95       	ret

00000160 <LCD_init>:
 *  Author: M
 */ 
#include "LCD.h"

void LCD_init (){
INIT_LCD();
 160:	8a b3       	in	r24, 0x1a	; 26
 162:	8e 67       	ori	r24, 0x7E	; 126
 164:	8a bb       	out	0x1a, r24	; 26
LCD_write_command(0X3);
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_command>
 16c:	8f e7       	ldi	r24, 0x7F	; 127
 16e:	9e e3       	ldi	r25, 0x3E	; 62
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_init+0x10>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_init+0x16>
 176:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_command>
 17e:	af e7       	ldi	r26, 0x7F	; 127
 180:	be e3       	ldi	r27, 0x3E	; 62
 182:	11 97       	sbiw	r26, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_init+0x22>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_init+0x28>
 188:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_command>
 190:	8f e7       	ldi	r24, 0x7F	; 127
 192:	9e e3       	ldi	r25, 0x3E	; 62
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_init+0x34>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_init+0x3a>
 19a:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X2);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_command>
LCD_write_command(0X28);
 1a2:	88 e2       	ldi	r24, 0x28	; 40
 1a4:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_command>
LCD_write_command(0X08);
 1a8:	88 e0       	ldi	r24, 0x08	; 8
 1aa:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_command>
LCD_write_command(0X01);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_command>
LCD_write_command(0X06);
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_command>
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	99 ef       	ldi	r25, 0xF9	; 249
 1be:	a0 e0       	ldi	r26, 0x00	; 0
 1c0:	81 50       	subi	r24, 0x01	; 1
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	a0 40       	sbci	r26, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <LCD_init+0x60>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_init+0x6a>
 1ca:	00 00       	nop
_delay_ms(20);
LCD_write_command(0x0C);
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 56 00 	call	0xac	; 0xac <LCD_write_command>
}
 1d2:	08 95       	ret

000001d4 <LCD_write_char>:
	 EN(0);
	 _delay_ms(1);
}

void LCD_write_char(uint8_t data){
	 RS(1);
 1d4:	d9 9a       	sbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(data,4));
 1d6:	98 2f       	mov	r25, r24
 1d8:	92 95       	swap	r25
 1da:	9f 70       	andi	r25, 0x0F	; 15
 1dc:	90 ff       	sbrs	r25, 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <LCD_write_char+0x10>
 1e0:	db 9a       	sbi	0x1b, 3	; 27
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <LCD_write_char+0x12>
 1e4:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,5));
 1e6:	98 2f       	mov	r25, r24
 1e8:	92 95       	swap	r25
 1ea:	96 95       	lsr	r25
 1ec:	97 70       	andi	r25, 0x07	; 7
 1ee:	90 ff       	sbrs	r25, 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <LCD_write_char+0x22>
 1f2:	dc 9a       	sbi	0x1b, 4	; 27
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <LCD_write_char+0x24>
 1f6:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,6));
 1f8:	98 2f       	mov	r25, r24
 1fa:	92 95       	swap	r25
 1fc:	96 95       	lsr	r25
 1fe:	96 95       	lsr	r25
 200:	93 70       	andi	r25, 0x03	; 3
 202:	90 ff       	sbrs	r25, 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <LCD_write_char+0x36>
 206:	dd 9a       	sbi	0x1b, 5	; 27
 208:	01 c0       	rjmp	.+2      	; 0x20c <LCD_write_char+0x38>
 20a:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,7));
 20c:	88 23       	and	r24, r24
 20e:	14 f4       	brge	.+4      	; 0x214 <LCD_write_char+0x40>
 210:	de 9a       	sbi	0x1b, 6	; 27
 212:	01 c0       	rjmp	.+2      	; 0x216 <LCD_write_char+0x42>
 214:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 216:	da 9a       	sbi	0x1b, 2	; 27
 218:	ef e9       	ldi	r30, 0x9F	; 159
 21a:	ff e0       	ldi	r31, 0x0F	; 15
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_write_char+0x48>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_write_char+0x4e>
 222:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 224:	da 98       	cbi	0x1b, 2	; 27
 226:	ef e9       	ldi	r30, 0x9F	; 159
 228:	ff e0       	ldi	r31, 0x0F	; 15
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_write_char+0x56>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_write_char+0x5c>
 230:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(data,0));
 232:	80 ff       	sbrs	r24, 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <LCD_write_char+0x66>
 236:	db 9a       	sbi	0x1b, 3	; 27
 238:	01 c0       	rjmp	.+2      	; 0x23c <LCD_write_char+0x68>
 23a:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,1));
 23c:	98 2f       	mov	r25, r24
 23e:	96 95       	lsr	r25
 240:	90 ff       	sbrs	r25, 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <LCD_write_char+0x74>
 244:	dc 9a       	sbi	0x1b, 4	; 27
 246:	01 c0       	rjmp	.+2      	; 0x24a <LCD_write_char+0x76>
 248:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,2));
 24a:	98 2f       	mov	r25, r24
 24c:	96 95       	lsr	r25
 24e:	96 95       	lsr	r25
 250:	90 ff       	sbrs	r25, 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <LCD_write_char+0x84>
 254:	dd 9a       	sbi	0x1b, 5	; 27
 256:	01 c0       	rjmp	.+2      	; 0x25a <LCD_write_char+0x86>
 258:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,3));
 25a:	86 95       	lsr	r24
 25c:	86 95       	lsr	r24
 25e:	86 95       	lsr	r24
 260:	80 ff       	sbrs	r24, 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <LCD_write_char+0x94>
 264:	de 9a       	sbi	0x1b, 6	; 27
 266:	01 c0       	rjmp	.+2      	; 0x26a <LCD_write_char+0x96>
 268:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 26a:	da 9a       	sbi	0x1b, 2	; 27
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_write_char+0x9c>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_write_char+0xa2>
 276:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 278:	da 98       	cbi	0x1b, 2	; 27
 27a:	ef e9       	ldi	r30, 0x9F	; 159
 27c:	ff e0       	ldi	r31, 0x0F	; 15
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <LCD_write_char+0xaa>
 282:	00 c0       	rjmp	.+0      	; 0x284 <LCD_write_char+0xb0>
 284:	00 00       	nop
	 _delay_ms(1);
}
 286:	08 95       	ret

00000288 <LCD_write_string>:
void LCD_write_string(uint8_t txt[]){
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	8c 01       	movw	r16, r24
	for (uint8_t i=0;txt[i]!='\0';i++){
 290:	fc 01       	movw	r30, r24
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	51 f0       	breq	.+20     	; 0x2ac <LCD_write_string+0x24>
 298:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_char(txt[i]);
 29a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_write_char>
	 _delay_ms(1);
	 EN(0);
	 _delay_ms(1);
}
void LCD_write_string(uint8_t txt[]){
	for (uint8_t i=0;txt[i]!='\0';i++){
 29e:	cf 5f       	subi	r28, 0xFF	; 255
 2a0:	f8 01       	movw	r30, r16
 2a2:	ec 0f       	add	r30, r28
 2a4:	f1 1d       	adc	r31, r1
 2a6:	80 81       	ld	r24, Z
 2a8:	88 23       	and	r24, r24
 2aa:	b9 f7       	brne	.-18     	; 0x29a <LCD_write_string+0x12>
		LCD_write_char(txt[i]);
	}
}
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <LCD_write_num>:
void LCD_write_num(uint32_t num){
 2b4:	8f 92       	push	r8
 2b6:	9f 92       	push	r9
 2b8:	af 92       	push	r10
 2ba:	bf 92       	push	r11
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	2a 97       	sbiw	r28, 0x0a	; 10
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	dc 01       	movw	r26, r24
 2d8:	cb 01       	movw	r24, r22
uint8_t txt[10] = {0};
 2da:	ae 01       	movw	r20, r28
 2dc:	4f 5f       	subi	r20, 0xFF	; 255
 2de:	5f 4f       	sbci	r21, 0xFF	; 255
 2e0:	2a e0       	ldi	r18, 0x0A	; 10
 2e2:	fa 01       	movw	r30, r20
 2e4:	11 92       	st	Z+, r1
 2e6:	2a 95       	dec	r18
 2e8:	e9 f7       	brne	.-6      	; 0x2e4 <LCD_write_num+0x30>
int8_t i = 0;
if(num == 0) {
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	a1 05       	cpc	r26, r1
 2ee:	b1 05       	cpc	r27, r1
 2f0:	21 f4       	brne	.+8      	; 0x2fa <LCD_write_num+0x46>
	LCD_write_char('0');
 2f2:	80 e3       	ldi	r24, 0x30	; 48
 2f4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_write_char>
	return;
 2f8:	38 c0       	rjmp	.+112    	; 0x36a <LCD_write_num+0xb6>
	}
}
void LCD_write_num(uint32_t num){
uint8_t txt[10] = {0};
int8_t i = 0;
if(num == 0) {
 2fa:	10 e0       	ldi	r17, 0x00	; 0
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
{
	txt[i] = num%10 + 48;
 2fc:	0f 2e       	mov	r0, r31
 2fe:	fa e0       	ldi	r31, 0x0A	; 10
 300:	8f 2e       	mov	r8, r31
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	9f 2e       	mov	r9, r31
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	af 2e       	mov	r10, r31
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	bf 2e       	mov	r11, r31
 30e:	f0 2d       	mov	r31, r0
 310:	e1 2e       	mov	r14, r17
 312:	ff 24       	eor	r15, r15
 314:	e7 fc       	sbrc	r14, 7
 316:	f0 94       	com	r15
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	2c 0f       	add	r18, r28
 31e:	3d 1f       	adc	r19, r29
 320:	e2 0e       	add	r14, r18
 322:	f3 1e       	adc	r15, r19
 324:	bc 01       	movw	r22, r24
 326:	cd 01       	movw	r24, r26
 328:	a5 01       	movw	r20, r10
 32a:	94 01       	movw	r18, r8
 32c:	0e 94 41 02 	call	0x482	; 0x482 <__udivmodsi4>
 330:	60 5d       	subi	r22, 0xD0	; 208
 332:	f7 01       	movw	r30, r14
 334:	60 83       	st	Z, r22
	num = num  / 10 ;
 336:	82 2f       	mov	r24, r18
 338:	93 2f       	mov	r25, r19
 33a:	a4 2f       	mov	r26, r20
 33c:	b5 2f       	mov	r27, r21
int8_t i = 0;
if(num == 0) {
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
 33e:	1f 5f       	subi	r17, 0xFF	; 255
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	a1 05       	cpc	r26, r1
 344:	b1 05       	cpc	r27, r1
 346:	21 f7       	brne	.-56     	; 0x310 <LCD_write_num+0x5c>
{
	txt[i] = num%10 + 48;
	num = num  / 10 ;
}
i--;
 348:	11 50       	subi	r17, 0x01	; 1
while(i >= 0){
 34a:	7a f0       	brmi	.+30     	; 0x36a <LCD_write_num+0xb6>
	LCD_write_char(txt[i]);
 34c:	e1 2f       	mov	r30, r17
 34e:	ff 27       	eor	r31, r31
 350:	e7 fd       	sbrc	r30, 7
 352:	f0 95       	com	r31
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	2c 0f       	add	r18, r28
 35a:	3d 1f       	adc	r19, r29
 35c:	e2 0f       	add	r30, r18
 35e:	f3 1f       	adc	r31, r19
 360:	80 81       	ld	r24, Z
 362:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_write_char>
	i--;
 366:	11 50       	subi	r17, 0x01	; 1
 368:	88 f7       	brcc	.-30     	; 0x34c <LCD_write_num+0x98>
}
 36a:	2a 96       	adiw	r28, 0x0a	; 10
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	bf 90       	pop	r11
 382:	af 90       	pop	r10
 384:	9f 90       	pop	r9
 386:	8f 90       	pop	r8
 388:	08 95       	ret

0000038a <main>:
#include "SPI.h"
#include "LCD.h"
int main(void)
{
	uint8_t select;
	LCD_init();
 38a:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_init>
	SPI_slave_init();
 38e:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_slave_init>
	SETBIT(DDRC,0);
 392:	a0 9a       	sbi	0x14, 0	; 20
	SETBIT(DDRC,1);
 394:	a1 9a       	sbi	0x14, 1	; 20
	SETBIT(DDRC,2);
 396:	a2 9a       	sbi	0x14, 2	; 20
	SETBIT(DDRC,3);
 398:	a3 9a       	sbi	0x14, 3	; 20
	SETBIT(DDRC,4);
 39a:	a4 9a       	sbi	0x14, 4	; 20
	SETBIT(DDRC,5);
 39c:	a5 9a       	sbi	0x14, 5	; 20
		case '4':
		TOGBIT(PORTC,3);
		SPI_send_char(GETBIT(PORTC,3));
		break;
		case '5':
		TOGBIT(PORTC,4);
 39e:	ee 24       	eor	r14, r14
 3a0:	68 94       	set
 3a2:	e4 f8       	bld	r14, 4
		case '3':
		TOGBIT(PORTC,2);
		SPI_send_char(GETBIT(PORTC,2));
		break;
		case '4':
		TOGBIT(PORTC,3);
 3a4:	ff 24       	eor	r15, r15
 3a6:	68 94       	set
 3a8:	f3 f8       	bld	r15, 3
		case '5':
		TOGBIT(PORTC,4);
		SPI_send_char(GETBIT(PORTC,4));
		break;
		case '6':
		TOGBIT(PORTC,5);
 3aa:	00 e2       	ldi	r16, 0x20	; 32
		select=SPI_receive_char();
		LCD_write_char(select);
		switch (select)
		{
		case '1':
		TOGBIT(PORTC,0);
 3ac:	11 e0       	ldi	r17, 0x01	; 1
		SPI_send_char(GETBIT(PORTC,0));
		break;
		case '2':
		TOGBIT(PORTC,1);
 3ae:	d2 e0       	ldi	r29, 0x02	; 2
		SPI_send_char(GETBIT(PORTC,1));
		break;
		case '3':
		TOGBIT(PORTC,2);
 3b0:	dd 24       	eor	r13, r13
 3b2:	68 94       	set
 3b4:	d2 f8       	bld	r13, 2
	SETBIT(DDRC,4);
	SETBIT(DDRC,5);
	while(1)
    {
		
		select=SPI_receive_char();
 3b6:	0e 94 3d 02 	call	0x47a	; 0x47a <SPI_receive_char>
 3ba:	c8 2f       	mov	r28, r24
		LCD_write_char(select);
 3bc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_write_char>
		switch (select)
 3c0:	c3 33       	cpi	r28, 0x33	; 51
 3c2:	01 f1       	breq	.+64     	; 0x404 <main+0x7a>
 3c4:	c4 33       	cpi	r28, 0x34	; 52
 3c6:	30 f4       	brcc	.+12     	; 0x3d4 <main+0x4a>
 3c8:	c1 33       	cpi	r28, 0x31	; 49
 3ca:	59 f0       	breq	.+22     	; 0x3e2 <main+0x58>
 3cc:	c2 33       	cpi	r28, 0x32	; 50
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <main+0x48>
 3d0:	43 c0       	rjmp	.+134    	; 0x458 <main+0xce>
 3d2:	0f c0       	rjmp	.+30     	; 0x3f2 <main+0x68>
 3d4:	c5 33       	cpi	r28, 0x35	; 53
 3d6:	59 f1       	breq	.+86     	; 0x42e <main+0xa4>
 3d8:	c5 33       	cpi	r28, 0x35	; 53
 3da:	f0 f0       	brcs	.+60     	; 0x418 <main+0x8e>
 3dc:	c6 33       	cpi	r28, 0x36	; 54
 3de:	e1 f5       	brne	.+120    	; 0x458 <main+0xce>
 3e0:	30 c0       	rjmp	.+96     	; 0x442 <main+0xb8>
		{
		case '1':
		TOGBIT(PORTC,0);
 3e2:	85 b3       	in	r24, 0x15	; 21
 3e4:	81 27       	eor	r24, r17
 3e6:	85 bb       	out	0x15, r24	; 21
		SPI_send_char(GETBIT(PORTC,0));
 3e8:	85 b3       	in	r24, 0x15	; 21
 3ea:	81 70       	andi	r24, 0x01	; 1
 3ec:	0e 94 39 02 	call	0x472	; 0x472 <SPI_send_char>
		break;
 3f0:	e2 cf       	rjmp	.-60     	; 0x3b6 <main+0x2c>
		case '2':
		TOGBIT(PORTC,1);
 3f2:	85 b3       	in	r24, 0x15	; 21
 3f4:	8d 27       	eor	r24, r29
 3f6:	85 bb       	out	0x15, r24	; 21
		SPI_send_char(GETBIT(PORTC,1));
 3f8:	85 b3       	in	r24, 0x15	; 21
 3fa:	86 95       	lsr	r24
 3fc:	81 70       	andi	r24, 0x01	; 1
 3fe:	0e 94 39 02 	call	0x472	; 0x472 <SPI_send_char>
		break;
 402:	d9 cf       	rjmp	.-78     	; 0x3b6 <main+0x2c>
		case '3':
		TOGBIT(PORTC,2);
 404:	85 b3       	in	r24, 0x15	; 21
 406:	8d 25       	eor	r24, r13
 408:	85 bb       	out	0x15, r24	; 21
		SPI_send_char(GETBIT(PORTC,2));
 40a:	85 b3       	in	r24, 0x15	; 21
 40c:	86 95       	lsr	r24
 40e:	86 95       	lsr	r24
 410:	81 70       	andi	r24, 0x01	; 1
 412:	0e 94 39 02 	call	0x472	; 0x472 <SPI_send_char>
		break;
 416:	cf cf       	rjmp	.-98     	; 0x3b6 <main+0x2c>
		case '4':
		TOGBIT(PORTC,3);
 418:	85 b3       	in	r24, 0x15	; 21
 41a:	8f 25       	eor	r24, r15
 41c:	85 bb       	out	0x15, r24	; 21
		SPI_send_char(GETBIT(PORTC,3));
 41e:	85 b3       	in	r24, 0x15	; 21
 420:	86 95       	lsr	r24
 422:	86 95       	lsr	r24
 424:	86 95       	lsr	r24
 426:	81 70       	andi	r24, 0x01	; 1
 428:	0e 94 39 02 	call	0x472	; 0x472 <SPI_send_char>
		break;
 42c:	c4 cf       	rjmp	.-120    	; 0x3b6 <main+0x2c>
		case '5':
		TOGBIT(PORTC,4);
 42e:	85 b3       	in	r24, 0x15	; 21
 430:	8e 25       	eor	r24, r14
 432:	85 bb       	out	0x15, r24	; 21
		SPI_send_char(GETBIT(PORTC,4));
 434:	85 b3       	in	r24, 0x15	; 21
 436:	82 95       	swap	r24
 438:	8f 70       	andi	r24, 0x0F	; 15
 43a:	81 70       	andi	r24, 0x01	; 1
 43c:	0e 94 39 02 	call	0x472	; 0x472 <SPI_send_char>
		break;
 440:	ba cf       	rjmp	.-140    	; 0x3b6 <main+0x2c>
		case '6':
		TOGBIT(PORTC,5);
 442:	85 b3       	in	r24, 0x15	; 21
 444:	80 27       	eor	r24, r16
 446:	85 bb       	out	0x15, r24	; 21
		SPI_send_char(GETBIT(PORTC,5));
 448:	85 b3       	in	r24, 0x15	; 21
 44a:	82 95       	swap	r24
 44c:	86 95       	lsr	r24
 44e:	87 70       	andi	r24, 0x07	; 7
 450:	81 70       	andi	r24, 0x01	; 1
 452:	0e 94 39 02 	call	0x472	; 0x472 <SPI_send_char>
		break;
 456:	af cf       	rjmp	.-162    	; 0x3b6 <main+0x2c>
		default:
		SPI_send_char('n');
 458:	8e e6       	ldi	r24, 0x6E	; 110
 45a:	0e 94 39 02 	call	0x472	; 0x472 <SPI_send_char>
		break;
 45e:	ab cf       	rjmp	.-170    	; 0x3b6 <main+0x2c>

00000460 <SPI_master_init>:
#define CS	PB4
//#define CS2	PB3
#define CLK PB5

void SPI_master_init(){
	DDRB |= (1<<MOSI)|(1<<CS)|(1<<CLK);
 460:	87 b3       	in	r24, 0x17	; 23
 462:	80 6b       	ori	r24, 0xB0	; 176
 464:	87 bb       	out	0x17, r24	; 23
	SPCR = 1<<MSTR | 1<<SPE;
 466:	80 e5       	ldi	r24, 0x50	; 80
 468:	8d b9       	out	0x0d, r24	; 13
}
 46a:	08 95       	ret

0000046c <SPI_slave_init>:
void SPI_slave_init(){	
	SETBIT(DDRB,MISO);	// MISO
 46c:	be 9a       	sbi	0x17, 6	; 23
	SETBIT(SPCR,SPE);	// enable SPI
 46e:	6e 9a       	sbi	0x0d, 6	; 13
}
 470:	08 95       	ret

00000472 <SPI_send_char>:
void SPI_send_char(uint8_t data){
	SPDR = data;
 472:	8f b9       	out	0x0f, r24	; 15
	while(GETBIT(SPSR,SPIF) == 0);
 474:	77 9b       	sbis	0x0e, 7	; 14
 476:	fe cf       	rjmp	.-4      	; 0x474 <SPI_send_char+0x2>
}
 478:	08 95       	ret

0000047a <SPI_receive_char>:
uint8_t SPI_receive_char(){
	while(GETBIT(SPSR,SPIF) == 0);
 47a:	77 9b       	sbis	0x0e, 7	; 14
 47c:	fe cf       	rjmp	.-4      	; 0x47a <SPI_receive_char>
	return SPDR;
 47e:	8f b1       	in	r24, 0x0f	; 15
 480:	08 95       	ret

00000482 <__udivmodsi4>:
 482:	a1 e2       	ldi	r26, 0x21	; 33
 484:	1a 2e       	mov	r1, r26
 486:	aa 1b       	sub	r26, r26
 488:	bb 1b       	sub	r27, r27
 48a:	fd 01       	movw	r30, r26
 48c:	0d c0       	rjmp	.+26     	; 0x4a8 <__udivmodsi4_ep>

0000048e <__udivmodsi4_loop>:
 48e:	aa 1f       	adc	r26, r26
 490:	bb 1f       	adc	r27, r27
 492:	ee 1f       	adc	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	a2 17       	cp	r26, r18
 498:	b3 07       	cpc	r27, r19
 49a:	e4 07       	cpc	r30, r20
 49c:	f5 07       	cpc	r31, r21
 49e:	20 f0       	brcs	.+8      	; 0x4a8 <__udivmodsi4_ep>
 4a0:	a2 1b       	sub	r26, r18
 4a2:	b3 0b       	sbc	r27, r19
 4a4:	e4 0b       	sbc	r30, r20
 4a6:	f5 0b       	sbc	r31, r21

000004a8 <__udivmodsi4_ep>:
 4a8:	66 1f       	adc	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	1a 94       	dec	r1
 4b2:	69 f7       	brne	.-38     	; 0x48e <__udivmodsi4_loop>
 4b4:	60 95       	com	r22
 4b6:	70 95       	com	r23
 4b8:	80 95       	com	r24
 4ba:	90 95       	com	r25
 4bc:	9b 01       	movw	r18, r22
 4be:	ac 01       	movw	r20, r24
 4c0:	bd 01       	movw	r22, r26
 4c2:	cf 01       	movw	r24, r30
 4c4:	08 95       	ret

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
